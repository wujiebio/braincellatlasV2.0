{"version":3,"file":"js/home.1d6778df.js","mappings":"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","sources":["webpack://single_cell_vis/./src/render/performance.js","webpack://single_cell_vis/./src/views/HomeView.vue","webpack://single_cell_vis/./src/views/tab/ViewManager.vue","webpack://single_cell_vis/src/views/tab/ViewManager.vue","webpack://single_cell_vis/./src/views/tab/ViewManager.vue?82f9","webpack://single_cell_vis/./src/views/tab/ViewManager.vue?699b","webpack://single_cell_vis/./src/views/tab/CellProperties.vue","webpack://single_cell_vis/./src/utils/tool.js","webpack://single_cell_vis/./src/views/components/typeListItem.vue","webpack://single_cell_vis/src/views/components/typeListItem.vue","webpack://single_cell_vis/./src/views/components/typeListItem.vue?f8e8","webpack://single_cell_vis/./src/views/components/typeListItem.vue?e359","webpack://single_cell_vis/src/views/tab/CellProperties.vue","webpack://single_cell_vis/./src/views/tab/CellProperties.vue?a646","webpack://single_cell_vis/./src/views/tab/CellProperties.vue?cc09","webpack://single_cell_vis/./src/views/tab/Genes.vue","webpack://single_cell_vis/src/views/tab/Genes.vue","webpack://single_cell_vis/./src/views/tab/Genes.vue?a261","webpack://single_cell_vis/./src/views/tab/Genes.vue?6a32","webpack://single_cell_vis/./src/views/SingleCellGraph.vue","webpack://single_cell_vis/./src/views/ScatterBrainSingle.vue","webpack://single_cell_vis/./src/render/quadTree.js","webpack://single_cell_vis/./src/render/ScatterRenderer.js","webpack://single_cell_vis/src/views/ScatterBrainSingle.vue","webpack://single_cell_vis/./src/views/ScatterBrainSingle.vue?03fb","webpack://single_cell_vis/./src/views/ScatterBrainSingle.vue?b226","webpack://single_cell_vis/./src/views/components/infoList.vue","webpack://single_cell_vis/src/views/components/infoList.vue","webpack://single_cell_vis/./src/views/components/infoList.vue?3246","webpack://single_cell_vis/./src/views/components/infoList.vue?a8e1","webpack://single_cell_vis/./src/components/visualization/GraphControls.vue","webpack://single_cell_vis/src/components/visualization/GraphControls.vue","webpack://single_cell_vis/./src/components/visualization/GraphControls.vue?d7bf","webpack://single_cell_vis/./src/components/visualization/GraphControls.vue?a88b","webpack://single_cell_vis/src/views/SingleCellGraph.vue","webpack://single_cell_vis/./src/views/SingleCellGraph.vue?1e6f","webpack://single_cell_vis/./src/views/SingleCellGraph.vue?2588","webpack://single_cell_vis/src/views/HomeView.vue","webpack://single_cell_vis/./src/views/HomeView.vue?5167","webpack://single_cell_vis/./src/views/HomeView.vue?aae2","webpack://single_cell_vis/./src/render/indexDB.js","webpack://single_cell_vis/./src/render/dataLoader.js","webpack://single_cell_vis/./src/render/regl-webgl2-compat.js","webpack://single_cell_vis/./node_modules/vue-virtual-scroll-list/dist/index.js"],"sourcesContent":["// 性能监控工具\n\n// 跟踪平均FPS\nexport class FpsCounter {\n  constructor(updateInterval = 1000) {\n    this.frames = 0;\n    this.lastTime = performance.now();\n    this.fps = 0;\n    this.updateInterval = updateInterval;\n  }\n\n  update() {\n    this.frames++;\n    const now = performance.now();\n    const elapsed = now - this.lastTime;\n\n    if (elapsed >= this.updateInterval) {\n      this.fps = (this.frames * 1000) / elapsed;\n      this.lastTime = now;\n      this.frames = 0;\n    }\n    \n    return this.fps;\n  }\n}\n\n// 跟踪操作执行时间\nexport class PerformanceTracker {\n  constructor() {\n    this.marks = new Map();\n    this.timings = {};\n    this.lastRenderTime = 0;\n    this.averageRenderTime = 0;\n    this.renderCount = 0;\n  }\n\n  startMark(name) {\n    this.marks.set(name, performance.now());\n  }\n\n  endMark(name) {\n    if (!this.marks.has(name)) return 0;\n    \n    const startTime = this.marks.get(name);\n    const duration = performance.now() - startTime;\n    \n    if (!this.timings[name]) {\n      this.timings[name] = {\n        total: 0,\n        count: 0,\n        average: 0,\n        min: duration,\n        max: duration\n      };\n    }\n    \n    const timing = this.timings[name];\n    timing.total += duration;\n    timing.count++;\n    timing.average = timing.total / timing.count;\n    timing.min = Math.min(timing.min, duration);\n    timing.max = Math.max(timing.max, duration);\n    \n    this.marks.delete(name);\n    return duration;\n  }\n\n  trackRenderTime(duration) {\n    this.lastRenderTime = duration;\n    this.renderCount++;\n    this.averageRenderTime = ((this.averageRenderTime * (this.renderCount - 1)) + duration) / this.renderCount;\n  }\n\n  getTimings() {\n    return this.timings;\n  }\n\n  getAverageRenderTime() {\n    return this.averageRenderTime;\n  }\n\n  clear() {\n    this.marks.clear();\n    this.timings = {};\n  }\n}\n\n// 检测并警告潜在的性能问题\nexport class PerformanceWatcher {\n  constructor(thresholds = {}) {\n    this.thresholds = {\n      renderTime: 16, // 16ms (约60fps)\n      loadTime: 500,  // 500ms\n      memoryLimit: 200 * 1024 * 1024, // 200MB\n      ...thresholds\n    };\n    this.warnings = [];\n  }\n\n  checkRenderTime(duration) {\n    if (duration > this.thresholds.renderTime) {\n      const warning = `渲染时间(${duration.toFixed(2)}ms)超过阈值(${this.thresholds.renderTime}ms)`;\n      this.warnings.push({type: 'render', message: warning, time: performance.now()});\n      return warning;\n    }\n    return null;\n  }\n\n  checkLoadTime(duration) {\n    if (duration > this.thresholds.loadTime) {\n      const warning = `加载时间(${duration.toFixed(2)}ms)超过阈值(${this.thresholds.loadTime}ms)`;\n      this.warnings.push({type: 'load', message: warning, time: performance.now()});\n      return warning;\n    }\n    return null;\n  }\n\n  checkMemoryUsage() {\n    if (window.performance && window.performance.memory) {\n      const memory = window.performance.memory.usedJSHeapSize;\n      if (memory > this.thresholds.memoryLimit) {\n        const warning = `内存使用(${(memory/1024/1024).toFixed(2)}MB)超过阈值(${(this.thresholds.memoryLimit/1024/1024).toFixed(2)}MB)`;\n        this.warnings.push({type: 'memory', message: warning, time: performance.now()});\n        return warning;\n      }\n    }\n    return null;\n  }\n\n  getWarnings() {\n    return this.warnings;\n  }\n\n  clearWarnings() {\n    this.warnings = [];\n  }\n}\n\n// 导出单例实例供全局使用\nexport const perfTracker = new PerformanceTracker();\nexport const perfWatcher = new PerformanceWatcher();\nexport const fpsCounter = new FpsCounter(); ","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"home\"},[_c('div',{staticClass:\"sidebar\",style:({ width: _vm.sidebarWidth + 'px' })},[_c('v-tabs',{staticClass:\"sidebar-tabs\",attrs:{\"vertical\":\"\"},model:{value:(_vm.tab),callback:function ($$v) {_vm.tab=$$v},expression:\"tab\"}},[_c('div',{staticClass:\"tab-buttons\"},_vm._l((_vm.tabList),function(item){return _c('v-tab',{key:item.text,staticClass:\"tab-button\"},[_c('v-icon',[_vm._v(_vm._s(item.icon))])],1)}),1),_c('div',{staticClass:\"sidebar-actions\"},[_c('span',{staticClass:\"action-icon\"},[_c('v-icon',[_vm._v(\"mdi-redo\")])],1),_c('span',{staticClass:\"action-icon\"},[_c('v-icon',[_vm._v(\"mdi-undo\")])],1),_c('hr',{staticClass:\"action-divider\"}),_c('span',{staticClass:\"action-icon\"},[_c('v-icon',[_vm._v(\"mdi-launch\")])],1)])]),_c('v-tabs-items',{staticClass:\"sidebar-content\",attrs:{\"reverse\":\"\"},model:{value:(_vm.tab),callback:function ($$v) {_vm.tab=$$v},expression:\"tab\"}},_vm._l((_vm.tabList),function(item){return _c('v-tab-item',{key:item.text},[_c('v-card',{staticClass:\"full-height\",attrs:{\"color\":\"basil\",\"flat\":\"\"}},[_c(item.component,{tag:\"component\",on:{\"getType\":_vm.getType,\"getHover\":_vm.getHover,\"getGeneExp\":_vm.getGeneExp,\"getColorBy\":_vm.getColorBy,\"changeLayout\":_vm.changeLayout,\"currentRangeSelected\":_vm.getRangeSelected,\"panelStateChange\":_vm.handlePanelStateChange,\"dataset-changed\":_vm.handleDatasetChanged}})],1)],1)}),1),(!_vm.isPanelOpen)?_c('div',{staticClass:\"resize-handle\",on:{\"mousedown\":_vm.initResize}}):_vm._e()],1),_c('div',{key:_vm.flag,staticClass:\"visualization-area\",class:_vm.gridClass},_vm._l((_vm.datasetList),function(item,i){return _c('SingleCellGraphVue',{key:_vm.datasetList[i],staticClass:\"grid-item\",attrs:{\"summaryData\":_vm.summaryData,\"isDelete\":_vm.signDelete,\"currentIndex\":i,\"classInfo\":_vm.classInfo,\"datasetType\":_vm.datasetList[i]},on:{\"deleteGrap\":_vm.deleteGrap}})}),1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"tab-panel\",staticStyle:{\"position\":\"relative\",\"overflow\":\"visible\"}},[_c('div',{staticClass:\"vm-header br\"},[_c('p',{staticStyle:{\"font-size\":\"14px\",\"margin\":\"10px 0\"}},[_vm._v(\"MANAGE LAYOUT\")]),_c('p',{staticStyle:{\"font-weight\":\"700\",\"font-size\":\"14px\",\"color\":\"#646465\"}},[_vm._v(\" Current Views \")]),_c('p',{staticStyle:{\"font-size\":\"14px\",\"margin\":\"5px 0\"}},[_vm._v(\"1 out of 4\")]),(_vm.isConfigLoading)?_c('div',{staticStyle:{\"font-size\":\"12px\",\"color\":\"#999\",\"margin\":\"5px 0\"}},[_vm._v(\" Loading datasets configuration... \")]):_vm._e()]),_vm._m(0),_vm._l((_vm.allVisualization),function(item,index){return _c('div',{key:'e'+index,staticClass:\"br row4 hover-active\",on:{\"click\":_vm.openEdit}},[_c('div',{staticClass:\"color-info\"},[_c('span',{staticClass:\"color-block\"}),_c('div',{staticClass:\"vm-color-text\",staticStyle:{\"text-align\":\"left\",\"margin-left\":\"20px\"}},[_c('p',[_vm._v(_vm._s(_vm.currentDatasetInfo.title))]),_c('p',{staticStyle:{\"color\":\"#898989\"}},[_vm._v(_vm._s(_vm.currentDatasetInfo.description))]),_c('p',{staticStyle:{\"color\":\"#898989\",\"font-size\":\"12px\",\"letter-spacing\":\"1px\"}},[_vm._v(\" \"+_vm._s(_vm.currentDatasetInfo.cellsDisplay)+\" \"),_c('span',{staticStyle:{\"font-weight\":\"700\"}},[_vm._v(\"·\")]),_vm._v(\" \"+_vm._s(_vm.currentDatasetInfo.colorField)+\" \")])])]),_c('span',[_c('v-icon',{staticClass:\"arrow-right\"},[_vm._v(\"mdi-chevron-right\")])],1)])}),(_vm.allVisualization.length<4)?_c('div',{staticClass:\"br row4 hover-active\",on:{\"click\":_vm.openAdd}},[_c('p',{staticStyle:{\"width\":\"80%\",\"margin\":\"0 auto\",\"text-align\":\"left\"}},[_c('v-icon',{staticStyle:{\"margin-right\":\"15px\",\"color\":\"#141414\"}},[_vm._v(\"mdi-plus\")]),_c('span',[_vm._v(\"Add Visualization\")])],1),_c('span',[_c('v-icon',{staticClass:\"arrow-right\"},[_vm._v(\"mdi-chevron-right\")])],1)]):_vm._e(),_vm._l(((4-_vm.allVisualization.length-1)>0?4-_vm.allVisualization.length-1:0),function(i){return _c('div',{key:'r'+i,staticClass:\"br row4 row5\"},[_c('p',[_vm._v(\"None\")])])}),_c('div',{staticClass:\"expand-panel\"}),(_vm.showEditClass)?_c('div',{staticClass:\"vm-row2-click-panel\"},[_c('v-row',{attrs:{\"justify\":\"space-between\"}},[_c('v-col',{attrs:{\"cols\":\"3\"}},[_c('h3',{staticStyle:{\"font-weight\":\"400\",\"text-align\":\"left\"}},[_vm._v(\"Edit\")])]),_c('v-col',{attrs:{\"cols\":\"3\"}},[_c('v-icon',{staticClass:\"icon-set icon10\",on:{\"click\":function($event){_vm.showEditClass=!_vm.showEditClass}}},[_vm._v(\"mdi-close\")])],1)],1),_c('v-row',[_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('p',{staticClass:\"edit-title\"},[_vm._v(\"Dataset\")]),_c('v-autocomplete',{attrs:{\"items\":_vm.datasetOptions,\"dense\":\"\",\"clearable\":\"\",\"item-text\":\"text\",\"item-value\":\"value\"},on:{\"change\":_vm.handleDatasetChange},model:{value:(_vm.selectedDataset),callback:function ($$v) {_vm.selectedDataset=$$v},expression:\"selectedDataset\"}}),_c('p',{staticClass:\"edit-title\"},[_vm._v(\"Visualization\")]),_c('v-autocomplete',{attrs:{\"items\":_vm.visualList,\"dense\":\"\",\"clearable\":\"\",\"item-text\":\"label\",\"item-value\":\"value\"},model:{value:(_vm.selectVisual),callback:function ($$v) {_vm.selectVisual=$$v},expression:\"selectVisual\"}}),_c('div',{staticStyle:{\"text-align\":\"right\"}},[_c('v-btn',{staticStyle:{\"margin-right\":\"10px\"},attrs:{\"text\":\"\",\"color\":\"#334c67\"}},[_vm._v(\" duplicate \")]),_c('v-btn',{attrs:{\"depressed\":\"\",\"disabled\":\"\"}},[_vm._v(\" remove \")])],1)],1)],1),_c('v-row',{staticStyle:{\"padding\":\"0 0 0 20px\"}},[_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-subheader',{staticStyle:{\"color\":\"#000\"}},[_vm._v(\"RESOLUTION / PERFORMANCE\")]),_c('v-slider',{attrs:{\"tick-labels\":_vm.ticksLabels,\"thumb-color\":\"#334c67\",\"track-color\":\"#b1bbc5\",\"track-fill-color\":\"#334c67\",\"max\":3,\"step\":\"1\",\"ticks\":\"always\",\"tick-size\":\"2\"},model:{value:(_vm.resulution),callback:function ($$v) {_vm.resulution=$$v},expression:\"resulution\"}})],1),_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-subheader',{staticStyle:{\"color\":\"#000\"}},[_vm._v(\"POINT SIZE\")]),_c('v-slider',{attrs:{\"tick-labels\":['Small', '', 'Medium', '', 'Large'],\"thumb-color\":\"#334c67\",\"track-color\":\"#b1bbc5\",\"track-fill-color\":\"#334c67\",\"max\":4,\"step\":\"1\",\"ticks\":\"always\",\"tick-size\":\"2\"},model:{value:(_vm.pointSize),callback:function ($$v) {_vm.pointSize=$$v},expression:\"pointSize\"}})],1),_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-subheader',{staticStyle:{\"color\":\"#000\"}},[_vm._v(\"FILTER\")]),_c('v-checkbox',{attrs:{\"label\":\"Transparent filtered cells\"},model:{value:(_vm.checkbox),callback:function ($$v) {_vm.checkbox=$$v},expression:\"checkbox\"}}),(_vm.checkbox)?_c('v-slider',{attrs:{\"tick-labels\":['0','','1'],\"thumb-color\":\"#334c67\",\"track-color\":\"#b1bbc5\",\"track-fill-color\":\"#334c67\",\"max\":2,\"step\":\"1\",\"ticks\":\"always\",\"tick-size\":\"2\"},model:{value:(_vm.filteredCell),callback:function ($$v) {_vm.filteredCell=$$v},expression:\"filteredCell\"}}):_vm._e()],1)],1)],1):_vm._e(),(_vm.showAddVis)?_c('div',{staticClass:\"vm-row2-click-panel\"},[_c('v-row',{attrs:{\"justify\":\"space-between\"}},[_c('v-col',{attrs:{\"cols\":\"3\"}},[_c('h3',{staticStyle:{\"font-weight\":\"400\",\"text-align\":\"left\"}},[_vm._v(\"Add\")])]),_c('v-col',{attrs:{\"cols\":\"3\"}},[_c('v-icon',{staticClass:\"icon-set icon10\",on:{\"click\":function($event){_vm.showAddVis=!_vm.showAddVis}}},[_vm._v(\"mdi-close\")])],1)],1),_c('v-row',[_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-autocomplete',{attrs:{\"items\":_vm.datasetOptions,\"dense\":\"\",\"placeholder\":\"Search\",\"label\":\"Dataset\",\"clearable\":\"\",\"item-text\":\"text\",\"item-value\":\"value\"},on:{\"change\":_vm.changeAddDataset},model:{value:(_vm.newSelectDataset),callback:function ($$v) {_vm.newSelectDataset=$$v},expression:\"newSelectDataset\"}})],1),_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-autocomplete',{attrs:{\"items\":_vm.newVisualList,\"dense\":\"\",\"placeholder\":\"Search\",\"label\":\"Visualization\",\"clearable\":\"\",\"item-text\":\"label\",\"item-value\":\"value\"},model:{value:(_vm.newSelectVisual),callback:function ($$v) {_vm.newSelectVisual=$$v},expression:\"newSelectVisual\"}})],1),_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('div',{staticStyle:{\"text-align\":\"right\"}},[_c('v-btn',{staticStyle:{\"margin-right\":\"10px\"},attrs:{\"text\":\"\",\"color\":\"#334c67\"}},[_vm._v(\" duplicate \")]),_c('v-btn',{attrs:{\"depressed\":\"\",\"disabled\":\"\"}},[_vm._v(\" remove \")])],1)])],1)],1):_vm._e()],2)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"br row2\"},[_c('div',{staticClass:\"color-main\"},[_c('span',{staticClass:\"color-block\"})])])\n}]\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"tab-panel\" style=\"position: relative;overflow:visible;\">\n    <div class=\"vm-header br\">\n      <p style=\"font-size: 14px; margin: 10px 0\">MANAGE LAYOUT</p>\n      <p style=\"font-weight: 700; font-size: 14px; color: #646465\">\n        Current Views\n      </p>\n      <p style=\"font-size: 14px; margin: 5px 0\">1 out of 4</p>\n      <div v-if=\"isConfigLoading\" style=\"font-size: 12px; color: #999; margin: 5px 0\">\n        Loading datasets configuration...\n      </div>\n    </div>\n    \n    <div class=\"br row2\">\n      <div class=\"color-main\">\n        <span class=\"color-block\"></span>\n      </div>\n    </div>\n    \n    <div class=\"br row4 hover-active\" @click=\"openEdit\" v-for=\"(item,index) in allVisualization\" :key=\"'e'+index\">\n      <div class=\"color-info\">\n        <span class=\"color-block\"></span>\n        <div style=\"text-align: left; margin-left: 20px\" class=\"vm-color-text\">\n          <p>{{ currentDatasetInfo.title }}</p>\n          <p style=\"color: #898989\">{{ currentDatasetInfo.description }}</p>\n          <p style=\"color: #898989; font-size: 12px; letter-spacing: 1px\">\n            {{ currentDatasetInfo.cellsDisplay }} <span style=\"font-weight: 700\">·</span> {{ currentDatasetInfo.colorField }}\n          </p>\n        </div>\n      </div>\n      <span>\n        <v-icon class=\"arrow-right\">mdi-chevron-right</v-icon>\n      </span>\n    </div>\n    \n    <div class=\"br row4 hover-active\" v-if=\"allVisualization.length<4\" @click=\"openAdd\">\n      <p style=\"width: 80%; margin: 0 auto; text-align: left\">\n        <v-icon style=\"margin-right: 15px; color: #141414\">mdi-plus</v-icon>\n        <span>Add Visualization</span>\n      </p>\n      <span>\n        <v-icon class=\"arrow-right\">mdi-chevron-right</v-icon>\n      </span>\n    </div>\n    <div class=\"br row4 row5\" v-for=\"i in (4-allVisualization.length-1)>0?4-allVisualization.length-1:0\" :key=\"'r'+i\">\n      <p>None</p>\n    </div>\n    <div class=\"expand-panel\"></div>\n    \n    <!-- 编辑面板 -->\n    <div class=\"vm-row2-click-panel\" v-if=\"showEditClass\">\n      <v-row justify=\"space-between\">\n        <v-col cols=\"3\">\n          <h3 style=\"font-weight: 400; text-align: left\">Edit</h3>\n        </v-col>\n        <v-col cols=\"3\">\n          <v-icon class=\"icon-set icon10\" @click=\"showEditClass=!showEditClass\">mdi-close</v-icon>\n        </v-col>\n      </v-row>\n      <v-row>\n        <v-col cols=\"12\">\n          <p class=\"edit-title\">Dataset</p>\n          <v-autocomplete\n            v-model=\"selectedDataset\"\n            :items=\"datasetOptions\"\n            dense\n            clearable\n            item-text=\"text\"\n            item-value=\"value\"\n            @change=\"handleDatasetChange\"\n          ></v-autocomplete>\n          <p class=\"edit-title\">Visualization</p>\n          <v-autocomplete\n            v-model=\"selectVisual\"\n            :items=\"visualList\"\n            dense\n            clearable\n             item-text=\"label\"\n            item-value=\"value\"\n          ></v-autocomplete>\n          <div style=\"text-align: right\">\n            <v-btn text style=\"margin-right: 10px\" color=\"#334c67\">\n              duplicate\n            </v-btn>\n            <v-btn depressed disabled> remove </v-btn>\n          </div>\n        </v-col>\n      </v-row>\n      <v-row style=\"padding: 0 0 0 20px\">\n        <v-col cols=\"12\">\n          <v-subheader style=\"color: #000\">RESOLUTION / PERFORMANCE</v-subheader>\n          <v-slider\n            v-model=\"resulution\"\n            :tick-labels=\"ticksLabels\"\n            thumb-color=\"#334c67\"\n            track-color=\"#b1bbc5\"\n            track-fill-color=\"#334c67\"\n            :max=\"3\"\n            step=\"1\"\n            ticks=\"always\"\n            tick-size=\"2\"\n          ></v-slider>\n        </v-col>\n        <v-col cols=\"12\">\n          <v-subheader style=\"color: #000\">POINT SIZE</v-subheader>\n          <v-slider\n            v-model=\"pointSize\"\n            :tick-labels=\"['Small', '', 'Medium', '', 'Large']\"\n            thumb-color=\"#334c67\"\n            track-color=\"#b1bbc5\"\n            track-fill-color=\"#334c67\"\n            :max=\"4\"\n            step=\"1\"\n            ticks=\"always\"\n            tick-size=\"2\"\n          ></v-slider>\n        </v-col>\n        <v-col cols=\"12\">\n          <v-subheader style=\"color: #000\">FILTER</v-subheader>\n          <v-checkbox\n            v-model=\"checkbox\"\n            label=\"Transparent filtered cells\"\n          ></v-checkbox>\n           <v-slider\n           v-if=\"checkbox\"\n            v-model=\"filteredCell\"\n            :tick-labels=\"['0','','1']\"\n            thumb-color=\"#334c67\"\n            track-color=\"#b1bbc5\"\n            track-fill-color=\"#334c67\"\n            :max=\"2\"\n            step=\"1\"\n            ticks=\"always\"\n            tick-size=\"2\"\n          ></v-slider>\n        </v-col>\n      </v-row>\n    </div>\n    \n    <!-- 添加可视化面板 -->\n <div class=\"vm-row2-click-panel\" v-if=\"showAddVis\">\n      <v-row justify=\"space-between\">\n        <v-col cols=\"3\">\n          <h3 style=\"font-weight: 400; text-align: left\">Add</h3>\n        </v-col>\n        <v-col cols=\"3\">\n          <v-icon class=\"icon-set icon10\" @click=\"showAddVis=!showAddVis\">mdi-close</v-icon>\n        </v-col>\n      </v-row>\n      <v-row>\n        <v-col cols=\"12\">\n          <v-autocomplete\n            v-model=\"newSelectDataset\"\n            :items=\"datasetOptions\"\n            dense\n            placeholder=\"Search\"\n            label=\"Dataset\"\n            clearable\n            item-text=\"text\"\n            item-value=\"value\"\n             @change=\"changeAddDataset\"\n          ></v-autocomplete>\n        </v-col>\n        <v-col cols=\"12\">\n          <v-autocomplete\n            v-model=\"newSelectVisual\"\n            :items=\"newVisualList\"\n            dense\n            placeholder=\"Search\"\n            label=\"Visualization\"\n            clearable\n               item-text=\"label\"\n            item-value=\"value\"\n          ></v-autocomplete>\n        </v-col>\n         <v-col cols=\"12\">\n           <div style=\"text-align: right\">\n            <v-btn text style=\"margin-right: 10px\" color=\"#334c67\">\n              duplicate\n            </v-btn>\n            <v-btn depressed disabled> remove </v-btn>\n          </div>\n         </v-col>\n      </v-row>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex';\nimport { \n  setDataset, \n  getDataset, \n  buildDatasetPath, \n  loadDatasetsConfig,\n  getDatasetsConfig,\n  getDatasetInfo,\n  initializeDatasetConfig\n} from '@/api/config';\n\nexport default {\n  name: \"ViewManager\",\n  data: () => ({\n    seasons: [\"Winter\", \"Spring\", \"Summer\", \"Fall\"],\n    icons: [\"mdi-snowflake\", \"mdi-leaf\", \"mdi-fire\", \"mdi-water\"],\n    ticksLabels: [\"Low / Fast\", \"\", \"\", \"High / Show\"],\n    pointSize: 1,\n    resulution: 0,\n    filteredCell: 1,\n    checkbox: false,\n    showEditClass: false,\n    showAddVis: false,\n    selectDataset: \"single\",\n    \n    // 数据集切换配置\n    selectedDataset: null, // 将在mounted中初始化\n    isDatasetLoading: false,\n    isLoadingDatasetInfo: false,\n    datasetInfoCache: new Map(),\n    \n    // 动态数据集选项 - 将从配置文件加载\n    datasetOptions: [],\n    isConfigLoading: true,\n    \n    // 可视化选项 - 将从配置动态生成\n    visualList: [],\n    selectVisual: 'umap',\n    newSelectDataset: '', \n    newSelectVisual: '', \n    newVisualList: [],\n    allVisualization: [{\n      visual: 'umap'\n    }]\n  }),\n  \n  computed: {\n    ...mapState('cellData', [\n      'datasetList'\n    ]),\n    \n    /**\n     * 当前数据集信息 - 基于动态配置\n     */\n    currentDatasetInfo() {\n      const currentOption = this.datasetOptions.find(opt => opt.value === this.selectedDataset);\n      if (currentOption && currentOption.info) {\n        const config = currentOption.config;\n        const info = currentOption.info;\n        \n        return {\n          title: `${config.displayName || config.name}`,\n          description: config.description || `${config.name}`,\n          cellsDisplay: info ? this.formatNumber(info.total_cells) + ' cells' : \n                       config.metadata?.estimatedCells ? this.formatNumber(config.metadata.estimatedCells) + ' cells' : \n                       'Unknown cells',\n          colorField: 'Class'\n        };\n      }\n      \n      // 默认信息\n      return {\n      };\n    }\n  },\n  \n  async mounted() {\n    // 监听数据集切换事件\n    if (typeof window !== 'undefined') {\n      window.addEventListener('datasetChanged', this.handleDatasetChangedEvent);\n    }\n    \n    // 初始化动态配置\n    await this.initializeDynamicConfig();\n    \n    // 加载所有数据集信息\n    await this.loadAllDatasetInfo();\n  },\n  \n  beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('datasetChanged', this.handleDatasetChangedEvent);\n    }\n  },\n  \n  methods: {\n    ...mapActions('cellData', [\n      'loadFieldsInfo',\n      'switchDataSource'\n    ]),\n    \n    /**\n     * 初始化动态配置\n     */\n    async initializeDynamicConfig() {\n      try {\n        this.isConfigLoading = true;\n        \n        // 确保配置已初始化\n        await initializeDatasetConfig();\n        \n        // 获取配置\n        const config = getDatasetsConfig();\n        if (!config) {\n          throw new Error('无法获取数据集配置');\n        }\n        \n        // 构建数据集选项\n        this.datasetOptions = config.datasets.map(dataset => ({\n          text: dataset.displayName || dataset.name,\n          value: dataset.id,\n          config: dataset,\n          info: null // 将在loadAllDatasetInfo中填充\n        }));\n        \n        // 构建可视化选项\n        this.buildVisualizationOptions(config);\n        \n        // 更新当前选择的数据集\n        const currentDataset = getDataset();\n        // 确保当前数据集在可用选项中存在\n        if (currentDataset && this.datasetOptions.find(opt => opt.value === currentDataset)) {\n          this.selectedDataset = currentDataset;\n        } else {\n          // 如果当前数据集不在选项中，使用配置的默认数据集\n          this.selectedDataset = config.defaultDataset || (this.datasetOptions.length > 0 ? this.datasetOptions[0].value : null);\n        }\n        \n        console.log('动态配置初始化完成:', {\n          datasets: this.datasetOptions.length,\n          currentDataset: this.selectedDataset,\n          configDefault: config.defaultDataset,\n          availableDatasets: this.datasetOptions.map(opt => opt.value)\n        });\n        \n      } catch (error) {\n        console.error('动态配置初始化失败:', error);\n        \n        // 尝试直接加载配置文件作为回退\n        try {\n          console.warn('尝试直接加载datasets_config.json作为回退...');\n          const config = await loadDatasetsConfig();\n          \n          if (config && config.datasets) {\n            // 使用从配置文件加载的实际数据\n            this.datasetOptions = config.datasets.map(dataset => ({\n              text: dataset.displayName || dataset.name,\n              value: dataset.id,\n              config: dataset,\n              info: null\n            }));\n            \n            this.buildVisualizationOptions(config);\n            \n            // 设置默认数据集\n            this.selectedDataset = config.defaultDataset || (config.datasets.length > 0 ? config.datasets[0].id : null);\n            \n            console.log('使用配置文件回退方案成功:', {\n              datasets: this.datasetOptions.length,\n              defaultDataset: this.selectedDataset\n            });\n          } else {\n            throw new Error('配置文件格式无效');\n          }\n        } catch (fallbackError) {\n          console.error('回退方案也失败，使用硬编码配置:', fallbackError);\n          \n          // 最后的回退：使用硬编码配置\n          this.datasetOptions = [\n            {\n              text: 'Single Outputs scRNAseq',\n              value: 'Tumour',\n              config: {\n                id: 'Tumour',\n                name: 'Tumour',\n                displayName: 'Single Outputs scRNAseq',\n                description: 'Main single cell RNA-seq dataset',\n                supportedVisualizations: ['tsne', 'umap', 'pca']\n              },\n              info: null\n            },\n            {\n              text: 'Single Outputs1 scRNAseq',\n              value: 'mouse',\n              config: {\n                id: 'mouse',\n                name: 'mouse',\n                displayName: 'Single Outputs1 scRNAseq',\n                description: 'Alternative single cell RNA-seq dataset',\n                supportedVisualizations: ['tsne', 'umap', 'pca']\n              },\n              info: null\n            }\n          ];\n          \n          this.selectedDataset = 'Tumour'; // 与配置文件保持一致\n          \n          this.buildVisualizationOptions({\n            visualizations: {\n              tsne: { label: 't-SNE' },\n              umap: { label: 'UMAP' },\n              pca: { label: 'PCA' }\n            }\n          });\n        }\n        \n      } finally {\n        this.isConfigLoading = false;\n      }\n    },\n    \n    /**\n     * 构建可视化选项\n     */\n    buildVisualizationOptions(config) {\n      const visualizations = config.visualizations || {\n        tsne: { label: 't-SNE', description: 't-Distributed Stochastic Neighbor Embedding' },\n        umap: { label: 'UMAP', description: 'Uniform Manifold Approximation and Projection' },\n        pca: { label: 'PCA', description: 'Principal Component Analysis' }\n      };\n      \n      // 构建全局可视化列表\n      this.visualList = Object.entries(visualizations).map(([key, value]) => ({\n        label: value.label || key.toUpperCase(),\n        value: key\n      }));\n      \n      this.newVisualList = [...this.visualList];\n      \n      // 设置默认选择\n      if (!this.selectVisual && this.visualList.length > 0) {\n        this.selectVisual = this.visualList.find(v => v.value === 'umap')?.value || this.visualList[0].value;\n      }\n    },\n    \n         /**\n      * 处理数据集切换\n      */\n     async handleDatasetChange(newDataset) {\n       if (this.isDatasetLoading) {\n         console.log('数据集切换正在进行中，忽略重复请求');\n         return;\n       }\n       \n       const currentDataset = getDataset();\n       if (currentDataset === newDataset) {\n         console.log('数据集未发生变化，跳过切换');\n         return;\n       }\n       \n       this.showEditClass = false;\n       this.isDatasetLoading = true;\n       \n       try {\n         console.log(`ViewManager: 切换数据集从 ${currentDataset} 到 ${newDataset}`);\n         \n         // 更新全局数据集配置\n         setDataset(newDataset);\n         \n         // 通知父组件数据集已切换（避免重复的全局事件）\n         this.$emit('dataset-changed', {\n           dataset: newDataset,\n           oldDataset: currentDataset,\n           info: this.getDatasetInfo(newDataset)\n         });\n         \n         console.log(`已切换到数据集: ${this.getDatasetDisplayName(newDataset)}`);\n         \n       } catch (error) {\n         console.error('ViewManager: 切换数据集失败:', error);\n         // 恢复之前的选择\n         this.selectedDataset = currentDataset;\n       } finally {\n         // 延迟重置加载状态，给其他组件足够时间响应\n         setTimeout(() => {\n           this.isDatasetLoading = false;\n         }, 500);\n       }\n     },\n    \n    /**\n     * 处理数据集切换事件\n     */\n    handleDatasetChangedEvent(event) {\n      this.selectedDataset = event.detail.dataset;\n    },\n    \n    /**\n     * 加载所有数据集信息\n     */\n    async loadAllDatasetInfo() {\n      if (!this.datasetOptions || this.datasetOptions.length === 0) {\n        console.warn('没有可用的数据集选项');\n        return;\n      }\n      \n      // 避免重复加载\n      if (this.isLoadingDatasetInfo) {\n        console.log('数据集信息正在加载中，跳过重复请求');\n        return;\n      }\n      \n      this.isLoadingDatasetInfo = true;\n      console.log('开始加载数据集信息...');\n      \n      try {\n        const loadPromises = this.datasetOptions.map(async (option) => {\n          // 跳过已加载的数据集信息\n          if (option.info) {\n            console.log(`数据集 ${option.value} 信息已存在，跳过加载`);\n            return;\n          }\n          \n          try {\n            const info = await this.loadDatasetInfo(option.value);\n            option.info = info;\n            console.log(`数据集 ${option.value} 信息加载成功:`, info);\n          } catch (error) {\n            console.warn(`加载数据集信息失败: ${option.value}`, error);\n            // 使用配置中的估算值作为回退\n            if (option.config && option.config.metadata && option.config.metadata.estimatedCells) {\n              option.info = {\n                total_cells: option.config.metadata.estimatedCells,\n                estimated: true\n              };\n            }\n          }\n        });\n        \n        await Promise.all(loadPromises);\n        console.log('所有数据集信息加载完成');\n      } finally {\n        this.isLoadingDatasetInfo = false;\n      }\n    },\n    \n    /**\n     * 加载指定数据集信息\n     */\n    async loadDatasetInfo(datasetType) {\n      // 检查缓存\n      if (this.datasetInfoCache.has(datasetType)) {\n        return this.datasetInfoCache.get(datasetType);\n      }\n      \n      try {\n        const matrixInfoPath = buildDatasetPath('matrix_info.json', datasetType);\n        const response = await fetch(matrixInfoPath);\n        \n        if (response.ok) {\n          const info = await response.json();\n          this.datasetInfoCache.set(datasetType, info);\n          return info;\n        } else {\n          throw new Error(`HTTP ${response.status}`);\n        }\n      } catch (error) {\n        console.error(`加载数据集信息失败: ${datasetType}`, error);\n        return null;\n      }\n    },\n    \n    /**\n     * 获取数据集信息\n     */\n    getDatasetInfo(datasetType) {\n      const option = this.datasetOptions.find(opt => opt.value === datasetType);\n      return option ? option.info : null;\n    },\n    \n    /**\n     * 获取数据集显示名称\n     */\n    getDatasetDisplayName(datasetType) {\n      const option = this.datasetOptions.find(opt => opt.value === datasetType);\n      return option ? option.text : datasetType;\n    },\n    \n    /**\n     * 获取数据集支持的可视化选项\n     */\n    getDatasetVisualizationOptions(datasetType) {\n      const option = this.datasetOptions.find(opt => opt.value === datasetType);\n      if (option && option.config && option.config.supportedVisualizations) {\n        return this.visualList.filter(vis => \n          option.config.supportedVisualizations.includes(vis.value)\n        );\n      }\n      return this.visualList; // 返回所有选项作为默认\n    },\n    \n    /**\n     * 格式化数字显示\n     */\n    formatNumber(num) {\n      if (!num) return '0';\n      if (num >= 1000000) {\n        return (num / 1000000).toFixed(1) + 'M';\n      } else if (num >= 1000) {\n        return (num / 1000).toFixed(1) + 'K';\n      }\n      return num.toString();\n    },\n    \n         // 原有方法保持兼容性\n    season(val) {\n      return this.icons[val];\n    },\n    \n    /**\n     * 处理编辑面板中的数据集变更\n     */\n    changeDataset() {\n      // 获取当前数据集支持的可视化选项\n      const supportedVisualizations = this.getDatasetVisualizationOptions(this.selectedDataset);\n      this.visualList = supportedVisualizations;\n      \n      // 设置默认可视化选项\n      if (supportedVisualizations.length > 0) {\n        const currentDatasetOption = this.datasetOptions.find(opt => opt.value === this.selectedDataset);\n        const defaultVis = currentDatasetOption?.config?.defaultVisualization || 'umap';\n        \n        this.selectVisual = supportedVisualizations.find(v => v.value === defaultVis)?.value || \n                           supportedVisualizations[0].value;\n      }\n      \n      console.log('数据集变更:', {\n        dataset: this.selectedDataset,\n        supportedVisualizations: supportedVisualizations.map(v => v.value),\n        selectedVisualization: this.selectVisual\n      });\n    },\n    \n    /**\n     * 处理添加可视化面板中的数据集变更\n     */\n    changeAddDataset() {\n      // 获取新选择数据集支持的可视化选项\n      const supportedVisualizations = this.getDatasetVisualizationOptions(this.newSelectDataset);\n      this.newVisualList = supportedVisualizations;\n      \n      // 设置默认可视化选项\n      if (supportedVisualizations.length > 0) {\n        const newDatasetOption = this.datasetOptions.find(opt => opt.value === this.newSelectDataset);\n        const defaultVis = newDatasetOption?.config?.defaultVisualization || 'umap';\n        \n        this.newSelectVisual = supportedVisualizations.find(v => v.value === defaultVis)?.value || \n                               supportedVisualizations[0].value;\n      }\n      \n      // 添加到可视化列表\n      this.allVisualization.unshift({\n        dataset: this.newSelectDataset,\n        visual: this.newSelectVisual\n      });\n      \n      // 关闭面板并重置\n      this.showAddVis = false;\n      this.newSelectVisual = '';\n      this.newSelectDataset = '';\n      \n      this.$emit('changeLayout', this.allVisualization);\n    },\n    \n    openEdit() {\n      this.showEditClass = true;\n      this.showAddVis = false;\n  },\n    \n    openAdd() {\n      this.showAddVis = true;\n      this.showEditClass = false;\n  }\n  }\n};\n</script>\n\n<style scoped lang=\"scss\">\n.row2 {\n  padding: 10px;\n}\n.row3 {\n  display: flex;\n  align-items: center;\n  padding: 10px 0;\n}\n.row4 {\n  padding: 1rem 0.5rem;\n  min-height: 5rem;\n  display: flex;\n  align-items: center;\n}\n.color-main {\n  width: 2.5rem;\n  height: 2.5rem;\n  border: 1px solid #cecece;\n  border-radius: 4px;\n  background-color: #ebebeb;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.color-info {\n  display: flex;\n  width: 80%;\n  margin: 0 auto;\n  align-items: center;\n  .vm-color-text {\n    p {\n      margin-bottom: 0;\n    }\n  }\n}\n.hover-active {\n  cursor: pointer;\n  &:hover {\n    background-color: #ebebeb;\n    .arrow-right {\n      visibility: visible;\n    }\n  }\n}\n.arrow-right {\n  visibility: hidden;\n  font-size: 28px;\n  color: #000;\n}\n.row5 {\n  color: #d2d2d2;\n  p {\n    width: 80%;\n    margin: 0 auto;\n    text-align: left;\n    padding: 0 1.25rem;\n  }\n}\n.expand-panel {\n  position: absolute;\n  left: 200px;\n  height: 100%;\n  width: 400px;\n  top: 0;\n}\n.vm-row2-click-panel {\n  position: absolute;\n  overflow: auto;\n  height: 100vh;\n  width: 100%;\n  top: 0;\n  left: 100%;\n  border-right: 1px solid #eee;\n  padding: 20px;\n  z-index: 99999;\n  background-color: #fff;\n}\n.edit-title {\n  font-size: 12px;\n  color: #666;\n  text-align: left;\n  letter-spacing: 0.6px;\n}\np.slider-set-title {\n  font-size: 14px;\n  color: #000;\n  margin-bottom: 20px !important;\n  text-align: left;\n  letter-spacing: 0.5px;\n}\n:deep .v-subheader {\n  padding: 0 !important;\n}\n:deep .v-slider__tick-label {\n  margin-top: 10px !important;\n  font-size: 14px !important;\n  letter-spacing: 0.6px;\n}\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ViewManager.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ViewManager.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ViewManager.vue?vue&type=template&id=1fe99efc&scoped=true\"\nimport script from \"./ViewManager.vue?vue&type=script&lang=js\"\nexport * from \"./ViewManager.vue?vue&type=script&lang=js\"\nimport style0 from \"./ViewManager.vue?vue&type=style&index=0&id=1fe99efc&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1fe99efc\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"tab-panel\"},[_c('div',{staticClass:\"vm-header br cell-row1\"},[_vm._m(0),_c('p',{staticClass:\"dataset-title\"},[_vm._v(\" \"+_vm._s(_vm.datasetName)+\" \"),_c('v-icon',{staticClass:\"icon-set small-icon\",attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-information-outline\")])],1),_c('p',[_vm._v(_vm._s(_vm.datasetName))])]),_c('div',{staticClass:\"vm-header br cell-row1 cell-row2\"},[_c('p',{staticClass:\"properties-title\"},[_c('span',[_vm._v(\"Cell Properties\")]),_c('v-icon',{staticClass:\"icon-set small-icon\",attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-cog\")])],1),_c('p',{staticClass:\"cell-count\"},[_vm._v(_vm._s(_vm.formatFileSize(_vm.total))+\" cells\")])]),_c('div',{staticClass:\"panel-container\",staticStyle:{\"position\":\"relative\"}},[_c('v-overlay',{attrs:{\"value\":!_vm.cellInfoList.length,\"absolute\":\"\",\"opacity\":\"0.1\"}},[_c('v-progress-circular',{attrs:{\"indeterminate\":\"\",\"size\":\"64\"}})],1),_c('v-expansion-panels',{staticClass:\"expansion-panels\",attrs:{\"accordion\":\"\"}},_vm._l((_vm.cellInfoList),function(item,i){return _c('v-expansion-panel',{key:i},[_c('v-expansion-panel-header',{staticClass:\"panel-header\",attrs:{\"expand-icon\":\"\"},scopedSlots:_vm._u([{key:\"default\",fn:function({ open }){return [_c('v-row',{staticClass:\"panel-row\",attrs:{\"no-gutters\":\"\"}},[_c('v-col',{staticClass:\"panel-col-left\",attrs:{\"cols\":12,\"sm\":6}},[(!open)?_c('v-icon',[_vm._v(\"mdi-chevron-right\")]):_c('v-icon',[_vm._v(\"mdi-chevron-down\")]),_c('span',{staticClass:\"item-name\"},[_vm._v(_vm._s(item.name))]),(_vm.getFilterNum(item.name))?_c('span',{staticClass:\"filter-style\"},[_vm._v(_vm._s(_vm.getFilterNum(item.name))+\" filters\")]):_vm._e()],1),_c('v-col',{staticClass:\"panel-col-right\",attrs:{\"cols\":12,\"sm\":6}},[_c('v-fade-transition',{attrs:{\"leave-absolute\":\"\"}},[_c('span',{key:\"0\",staticClass:\"action-icons\"},[(open)?_c('v-icon',{staticClass:\"icon-set\"},[_vm._v(\"mdi-plus\")]):_vm._e(),(open)?_c('v-icon',{staticClass:\"icon-set\"},[_vm._v(\"mdi-minus\")]):_vm._e(),(open)?_c('v-icon',{staticClass:\"icon-set\"},[_vm._v(\"mdi-magnify\")]):_vm._e(),_c('span',{staticClass:\"icon-set icon10\",on:{\"click\":function($event){$event.stopPropagation();return _vm.changeByColor(item.name)}}},[_c('svg',{staticClass:\"v-icon__svg\",style:({'fill':_vm.currentColorBy===item.name?'#297aba':'#6c6c6c'}),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"enable-background\":\"new 0 0 24 24\",\"height\":\"24px\",\"viewBox\":\"0 0 24 24\",\"width\":\"24px\",\"fill\":\"#5f6368\"}},[_c('rect',{attrs:{\"fill\":\"none\",\"height\":\"24\",\"width\":\"24\"}}),_c('path',{attrs:{\"d\":\"M12,2c-5.33,4.55-8,8.48-8,11.8c0,4.98,3.8,8.2,8,8.2s8-3.22,8-8.2C20,10.48,17.33,6.55,12,2z M12,20c-3.35,0-6-2.57-6-6.2 c0-2.34,1.95-5.44,6-9.14c4.05,3.7,6,6.79,6,9.14C18,17.43,15.35,20,12,20z M7.83,14c0.37,0,0.67,0.26,0.74,0.62 c0.41,2.22,2.28,2.98,3.64,2.87c0.43-0.02,0.79,0.32,0.79,0.75c0,0.4-0.32,0.73-0.72,0.75c-2.13,0.13-4.62-1.09-5.19-4.12 C7.01,14.42,7.37,14,7.83,14z\"}})])])],1)])],1)],1)]}}],null,true)}),_c('v-expansion-panel-content',[(item.name !== 'Class')?_c(_vm.currentComponent,{tag:\"component\",attrs:{\"typeName\":item.name,\"typeList\":item.children,\"field\":_vm.field,\"fieldValue\":_vm.fieldValue,\"currentColorBy\":_vm.currentColorBy},on:{\"getCheckList\":_vm.getCheckList,\"getHoverItem\":_vm.getHoverItem},nativeOn:{\"mouseenter\":function($event){return _vm.handleAttributeMouseEnter.apply(null, arguments)},\"mouseleave\":function($event){return _vm.handleAttributeMouseLeave.apply(null, arguments)}}}):_c('v-treeview',{staticClass:\"tree-view\",attrs:{\"items\":item.children,\"selected-color\":\"indigo\",\"selectable\":\"\",\"hoverable\":\"\",\"expand-icon\":\"mdi-chevron-down\"},on:{\"input\":_vm.getTreeSelected},scopedSlots:_vm._u([{key:\"label\",fn:function({ item }){return [_c('div',{staticClass:\"tree-item\",on:{\"mouseover\":function($event){return _vm.handleMouseOver(item)},\"mouseleave\":function($event){return _vm.handleMouseOut(item)}}},[_c('span',{staticClass:\"tree-item-name\"},[_vm._v(\" \"+_vm._s(item.name))]),_c('div',{staticClass:\"color-list\"},[(_vm.currentColorBy==='Class')?_c('span',{staticClass:\"color-item\",style:({backgroundColor:_vm.getColor(item.name)})}):_c('div',{staticClass:\"color-list-container\"},_vm._l((_vm.getColorList()),function(color,i){return _c('span',{key:i,staticClass:\"color-item\",style:({backgroundColor:color})})}),0)])])]}}],null,true),model:{value:(_vm.treeSelection),callback:function ($$v) {_vm.treeSelection=$$v},expression:\"treeSelection\"}})],1)],1)}),1)],1)])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('p',[_c('span',{staticClass:\"color-block\"}),_c('span',{staticClass:\"cell-row1-text\"},[_vm._v(\"SELECTED VIEW\")])])\n}]\n\nexport { render, staticRenderFns }","export function stringToNumberSum(str) {\n    let sum = 0;\n    for (let i = 0; i < str.length; i++) {\n      sum += str.charCodeAt(i);\n    }\n    return sum;\n  }\n  export function createMultiColorInterpolator(colors) {\n    // 检查输入是否有效\n    if (!Array.isArray(colors) || colors.length < 2) {\n        throw new Error('At least two colors are required.');\n    }\n\n    // 将颜色转换为数组格式 [r, g, b, a]\n    const colorStops = colors.map(color => {\n        if (color.length === 3) { // 如果是 RGB 格式，则添加默认 alpha 值 255\n            return [...color, 255];\n        }\n        return color;\n    });\n\n    // 创建插值函数\n    return function interpolateColor(value, min, max) {\n        // 确保 value 在 min 和 max 范围内\n        value = Math.max(min, Math.min(max, value));\n\n        // 计算总的颜色间隔数\n        const totalStops = colorStops.length - 1;\n\n        // 找出当前值对应的颜色区间\n        const ratio = (value - min) / (max - min);\n        const index = Math.floor(ratio * totalStops);\n\n        // 计算在该区间内的相对位置\n        const subRatio = (ratio * totalStops - index) * (colorStops[index + 1].length - 1);\n\n        // 对每个颜色通道进行插值\n        const interpolatedColor = colorStops[index].map((channel, i) => {\n            return Math.round(channel * (1 - subRatio) + colorStops[index + 1][i] * subRatio);\n        });\n\n        // 返回 WebGL 需要的 0-1 范围的 RGBA\n        return interpolatedColor.map(c => c / 255);\n    };\n}\n\nexport function  hsv2rgb(h, s, v) {\n    let rgb = [0, 0, 0];\n    let i = Math.floor(h * 6);\n    let f = h * 6 - i;\n    let p = v * (1 - s);\n    let q = v * (1 - f * s);\n    let t = v * (1 - (1 - f) * s);\n\n    switch (i % 6) {\n      case 0:\n        rgb = [v, t, p];\n        break;\n      case 1:\n        rgb = [q, v, p];\n        break;\n      case 2:\n        rgb = [p, v, t];\n        break;\n      case 3:\n        rgb = [p, q, v];\n        break;\n      case 4:\n        rgb = [t, p, v];\n        break;\n      case 5:\n        rgb = [v, p, q];\n        break;\n    }\n\n    return rgb;\n  }\n\nexport function getColorFromValue(value, colorIndex) {\n    if (value < 0) {\n      return [0.4, 0.4, 0.4, 1.0]; // 更深的灰色，确保在白色背景上可见\n    }\n\n    // 多层次颜色算法，用于生成1万种可区分颜色\n    \n    // 1. 主色相 - 使用黄金比例散列\n    const baseHue = (value * 0.618033988749895) % 1.0;\n    \n    // 2. 二级色相偏移 - 基于值和索引\n    const colorGroup = Math.floor(value % 5);\n    const secondaryShift = colorGroup * 0.2 + ((colorIndex * 0.1) % 0.2);\n    \n    // 3. 组合色相\n    const hue = (baseHue + secondaryShift) % 1.0;\n    \n    // 4. 动态饱和度 - 基于值的小数部分\n    const saturation = 0.6 + ((value % 1) * 0.3);\n    \n    // 5. 动态亮度 - 使用不同的调制因子\n    const brightness = 0.7 + ((value * 7) % 1) * 0.2;\n    \n    // 转换为RGB\n    const rgb = hsv2rgb(hue, saturation, brightness);\n\n    // 返回RGBA\n    return [...rgb, 0.8];\n}","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{on:{\"mouseenter\":_vm.onComponentEnter,\"mouseleave\":_vm.onComponentLeave}},[_c('v-virtual-scroll',{attrs:{\"height\":300,\"items\":_vm.typeList,\"item-height\":\"48\"},scopedSlots:_vm._u([{key:\"default\",fn:function({ item }){return [_c('div',{staticClass:\"type-item\",staticStyle:{\"display\":\"flex\",\"justify-content\":\"space-between\",\"padding\":\"5px 0px 0px 10px\"},attrs:{\"title\":item.name},on:{\"mouseenter\":function($event){return _vm.onMouseEnter(item)},\"mouseleave\":function($event){return _vm.onMouseLeave(item)}}},[_c('v-checkbox',{staticClass:\"shrink mt-0 long-label-checkbox\",attrs:{\"hide-details\":\"\",\"label\":item.name,\"value\":item.id},on:{\"change\":_vm.getCheckList},model:{value:(_vm.checkList),callback:function ($$v) {_vm.checkList=$$v},expression:\"checkList\"}}),_c('div',{staticClass:\"check-info shrink\"},[(_vm.currentColorBy===_vm.typeName)?_c('div',{staticClass:\"color-bar\"},[_c('div',{staticClass:\"color-item\",style:({ backgroundColor: _vm.getColor(item.name), width: '100%' })})]):_c('div',{staticClass:\"color-bar\"},_vm._l((_vm.colors),function(color,i){return _c('div',{key:i,staticClass:\"color-item\",style:({ backgroundColor: color, width: '20%' })})}),0),_c('span',{staticStyle:{\"font-size\":\"14px\"}},[_vm._v(\"2.05M\")])])],1)]}}])})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div @mouseenter=\"onComponentEnter\" @mouseleave=\"onComponentLeave\">\n    <v-virtual-scroll :height=\"300\" :items=\"typeList\" item-height=\"48\">\n      <template v-slot:default=\"{ item }\">\n        <div \n          :title=\"item.name\" \n          style=\"display:flex;justify-content:space-between;padding:5px 0px 0px 10px;\" \n          @mouseenter=\"onMouseEnter(item)\" \n          @mouseleave=\"onMouseLeave(item)\"\n          class=\"type-item\"\n        >\n          <v-checkbox\n            v-model=\"checkList\"\n            hide-details\n            :label=\"item.name\"\n            :value=\"item.id\"\n            class=\"shrink mt-0 long-label-checkbox\"\n            @change=\"getCheckList\"\n          ></v-checkbox>\n          <div class=\"check-info shrink\">\n              <div class=\"color-bar\" v-if=\"currentColorBy===typeName\">\n              <div\n                class=\"color-item\"\n                :style=\"{ backgroundColor: getColor(item.name), width: '100%' }\"\n              ></div>\n            </div>\n            <div class=\"color-bar\" v-else>\n              <div\n                class=\"color-item\"\n                v-for=\"(color, i) in colors\"\n                :key=\"i\"\n                :style=\"{ backgroundColor: color, width: '20%' }\"\n              ></div>\n            </div>\n            <span style=\"font-size: 14px\">2.05M</span>\n          </div>\n        </div>\n      </template>\n    </v-virtual-scroll>\n    <!-- <v-row align=\"center\" v-for=\"(item,index) in classes\" :key=\"index\" justify=\"space-between\" style=\"min-height:2.5rem;\" class=\"type-item\" @mouseover=\"onOver(item)\" @mouseleave=\"onLeave(item)\">\n        <v-checkbox\n          v-model=\"checkList\"\n          hide-details\n          :label=\"item.label\"\n          :value=\"item.value\"\n          class=\"shrink  mt-0  long-label-checkbox\"\n          @change=\"getCheckList\"\n        ></v-checkbox>\n        <div class=\"check-info shrink\">\n            <div class=\"color-bar\">\n                <div class=\"color-item\" v-for=\"(color ,i) in colors \" :key=\"i\" :style=\"{backgroundColor:color,width:'20%'}\"></div>\n            </div>\n            <span style=\"font-size:14px;\">2.05M</span>\n        </div>\n    </v-row> -->\n  </div>\n</template>\n\n<script>\nimport _ from \"lodash\";\nimport { getColorFromValue } from '@/utils/tool';\nimport { mapState, mapGetters } from 'vuex';\n\nexport default {\n  data() {\n    return {\n      checkList: [],\n      colors: [],\n      classes: [],\n      highlightTimeout: null,\n      componentHovered: false\n    };\n  },\n  props: {\n    typeList: {\n      type: Array,\n      default: () => [],\n    },\n    typeName: {\n      type: String,\n      default: () => \"\",\n    },\n    currentColorBy:{\n      type:String,\n      default:'Class'\n    }\n  },\n  computed: {\n    ...mapState('cellData', [\n      'field'\n    ]),\n    ...mapGetters('cellData', [\n      'getFieldValue'\n    ]),\n    \n    // 使用 getter 获取 fieldValue，确保从 nonReactiveDataStore 获取\n    fieldValue() {\n      const data = this.getFieldValue || {};\n      // 添加调试信息\n      if (Object.keys(data).length > 0) {\n        console.log('📊 typeListItem fieldValue loaded:', {\n          keys: Object.keys(data),\n          typeName: this.typeName,\n          hasCurrentType: !!data[this.typeName],\n          currentTypeLength: data[this.typeName] ? data[this.typeName].length : 0\n        });\n      }\n      return data;\n    },\n    \n    // 安全访问 fieldValue，确保不为 undefined\n    safeFieldValue() {\n      return this.fieldValue || {};\n    },\n    \n    // 安全访问 field，确保不为 undefined\n    safeField() {\n      return this.field || [];\n    }\n  },\n  watch:{\n    currentColorBy:{\n      handler(val){\n        console.log(val,83);\n        this.colors = []; // 清空颜色数组，避免重复添加\n        \n        // 安全检查：确保 field 和 fieldValue 已经加载\n        if (!this.safeField.length || !Object.keys(this.safeFieldValue).length) {\n          console.warn('Field 或 fieldValue 尚未加载，跳过颜色初始化');\n          return;\n        }\n        \n        let key=this.currentColorBy==='Class'?'Siletti_modf_SCANVI_L1':this.currentColorBy;\n        let typeIndex=this.safeField.indexOf(key);\n        let items=this.safeFieldValue[key];\n        \n        // 安全检查：确保 items 存在且为数组\n        if (!items || !Array.isArray(items)) {\n          console.warn(`字段 ${key} 的数据不存在或不是数组，跳过颜色初始化`);\n          return;\n        }\n      \n        for(let i=0;i<10;i++){\n          let color=getColorFromValue(i,typeIndex);\n          this.colors.push(`rgba(${color[0] * 255}, ${color[1] * 255}, ${\n            color[2] * 255\n          }, ${color[3]})`);\n        }\n      },\n      immediate:true\n    },\n  },\n  mounted() {\n    this.classes = this.typeList.map((item) => {\n      return {\n        label: item.id,\n        value: item.id,\n      };\n    });\n  },\n  methods: {\n    getCheckList() {\n      console.log(`=== 勾选状态变更开始 ===`);\n      console.log(`属性: ${this.typeName}`);\n      console.log(`当前勾选数量: ${this.checkList.length}`);\n      console.log(`勾选项: [${this.checkList.join(', ')}]`);\n      \n      this.$emit(\"getCheckList\", {\n        key: this.typeName,\n        value: this.checkList,\n        mode: \"check\",\n      });\n      \n      console.log(`勾选状态变更: ${this.typeName}, 当前勾选数量: ${this.checkList.length}, 勾选项: [${this.checkList.join(', ')}]`);\n      \n      // 根据勾选列表状态处理高亮\n      if (this.checkList.length > 0) {\n        // 有勾选项时，收集对应的值索引\n        const valueIndices = [];\n        \n        // 🔧 修复：遍历所有勾选项，收集对应的值索引\n        for (const checkItem of this.checkList) {\n          const selectedItem = this.typeList.find(item => item.id === checkItem);\n          if (selectedItem) {\n            // 🔧 修复：找到属性值在属性值数组中的索引\n            // 注意：fieldValue中的顺序可能与实际二进制数据中的索引顺序不同\n            let valueIndex = -1;\n            if (this.safeFieldValue[this.typeName] && Array.isArray(this.safeFieldValue[this.typeName])) {\n              valueIndex = this.safeFieldValue[this.typeName].indexOf(selectedItem.name);\n              if (valueIndex >= 0) {\n                valueIndices.push(valueIndex);\n                console.log(`勾选项: ${selectedItem.name}, 索引: ${valueIndex}`);\n              }\n            }\n          }\n        }\n        \n        console.log(`收集到的值索引: [${valueIndices.join(', ')}]`);\n        \n        if (valueIndices.length > 0) {\n          // 触发多属性交集高亮事件（而不是单属性多值高亮）\n          const event = new CustomEvent('highlight-multi-attribute-intersection', {\n            bubbles: true,\n            detail: {\n              attributeName: this.typeName,\n              attributeValueIndices: valueIndices\n            }\n          });\n          this.$el.dispatchEvent(event);\n          \n          console.log(`已触发多属性交集高亮事件: ${this.typeName}, 索引: [${valueIndices.join(', ')}]`);\n        }\n      } else {\n        // 没有勾选项时，清除该属性的高亮（但保留其他属性的高亮）\n        console.log(`没有勾选项，清除${this.typeName}的高亮`);\n        const clearEvent = new CustomEvent('highlight-multi-attribute-intersection', {\n          bubbles: true,\n          detail: {\n            attributeName: this.typeName,\n            attributeValueIndices: [] // 空数组表示清除该属性的勾选\n          }\n        });\n        this.$el.dispatchEvent(clearEvent);\n      }\n      \n      console.log(`=== 勾选状态变更结束 ===`);\n    },\n    \n    // 当鼠标进入整个组件区域\n    onComponentEnter() {\n      console.log('进入列表区域');\n      this.componentHovered = true;\n      \n      // 创建自定义事件，通知渲染器鼠标进入列表区域\n      const event = new CustomEvent('mouse-enter-list-area', {\n        bubbles: true\n      });\n      this.$el.dispatchEvent(event);\n      \n      // 如果有勾选项，确保勾选高亮状态得到恢复\n      if (this.checkList.length > 0) {\n        console.log(`重新进入组件，恢复${this.checkList.length}个勾选项的高亮`);\n        // 重新触发勾选高亮\n        this.getCheckList();\n      }\n    },\n    \n    // 当鼠标离开整个组件区域\n    onComponentLeave() {\n      console.log('离开列表区域');\n      this.componentHovered = false;\n      \n      // 使用延迟机制，确保不是在组件内部移动\n      setTimeout(() => {\n        // 再次检查鼠标是否真的离开了组件\n        if (!this.componentHovered) {\n          // 创建自定义事件，通知渲染器鼠标离开列表区域\n          const event = new CustomEvent('mouse-leave-list-area', {\n            bubbles: true\n          });\n          this.$el.dispatchEvent(event);\n          \n          // 只触发悬停的清除，不触发选中高亮的清除\n          const clearHoverEvent = new CustomEvent('cell-property-item-mouseleave', {\n            bubbles: true\n          });\n          this.$el.dispatchEvent(clearHoverEvent);\n          \n          // 重要：不要触发 clear-highlight 事件，因为这会清除勾选高亮\n          // 只有在没有勾选项时才清除高亮\n          if (this.checkList.length === 0) {\n            console.log('没有勾选项，可以清除高亮');\n            const clearHighlightEvent = new CustomEvent('clear-highlight', {\n              bubbles: true,\n              detail: {\n                attributeName: this.typeName,\n                reason: 'no-checked-items'\n              }\n            });\n            this.$el.dispatchEvent(clearHighlightEvent);\n          } else {\n            console.log(`有${this.checkList.length}个勾选项，保留勾选高亮`);\n          }\n          \n          console.log('确认离开组件区域，清除悬停高亮，保留勾选高亮');\n        }\n      }, 100); // 100ms延迟，足够检测是否是组件内部移动\n    },\n    \n    // 鼠标进入项目，带节流的悬停处理\n    onMouseEnter(item) {\n      // 清除上一个延迟操作\n      if (this.highlightTimeout) {\n        clearTimeout(this.highlightTimeout);\n      }\n      \n      // 🔧 修复：找到属性值在属性值数组中的索引\n      // 注意：fieldValue中的顺序可能与实际二进制数据中的索引顺序不同\n      let valueIndex = -1;\n      if (this.safeFieldValue[this.typeName] && Array.isArray(this.safeFieldValue[this.typeName])) {\n        valueIndex = this.safeFieldValue[this.typeName].indexOf(item.name);\n      }\n\n      // 详细的调试日志\n      console.log(`鼠标进入: ${this.typeName} - ${item.name}, 索引: ${valueIndex}`);\n      \n      // 向父组件发送悬停事件\n      this.$emit(\"getHoverItem\", {\n        key: this.typeName,\n        value: item.id,\n        mode: \"over\",\n        valueIndex: valueIndex // 显式传递索引值\n      });\n      \n      // 确保索引有效\n      if (valueIndex >= 0) {\n        // 创建自定义事件并分发，通知渲染组件处理鼠标悬停高亮\n        const event = new CustomEvent('cell-property-item-mouseenter', {\n          bubbles: true,\n          detail: {\n            attributeName: this.typeName,\n            attributeValue: item.name,\n            valueIndex: valueIndex\n          }\n        });\n        \n        // 分发事件\n        this.$el.dispatchEvent(event);\n      } else {\n        console.warn(`无法找到属性 ${this.typeName} 值 ${item.name} 的索引`);\n      }\n    },\n    \n    // 鼠标离开项目，带节流的取消悬停处理\n    onMouseLeave(item) {\n      // 清除上一个延迟操作\n      if (this.highlightTimeout) {\n        clearTimeout(this.highlightTimeout);\n      }\n      \n      // 立即向父组件发送离开事件\n      this.$emit(\"getHoverItem\", {\n        key: this.typeName,\n        value: item.id,\n        mode: \"leave\",\n      });\n      \n      // 注意：这里不应该触发清除悬停事件，因为这会清除勾选高亮\n      // 悬停的清除应该由组件级别的onComponentLeave来处理\n      console.log('鼠标离开项目，但保留勾选高亮，当前勾选项数量：', this.checkList.length);\n    },\n    \n    // 保留旧的onOver方法，但不使用\n    onOver: _.debounce(function(item) {\n      this.$emit(\"getHoverItem\", {\n        key: this.typeName,\n        value: item.value,\n        mode: \"over\",\n      });\n    }),\n    \n    // 保留旧的onLeave方法，但不使用\n    onLeave: _.debounce(function(item) {\n      this.$emit(\"getHoverItem\", {\n        key: this.typeName,\n        value: item.value,\n        mode: \"leave\",\n      });\n    }),\n    \n    getColor(label){\n      console.log(this.safeField, this.safeFieldValue, label, 137);\n      \n      // 安全检查：确保数据已加载\n      if (!this.safeField.length || !Object.keys(this.safeFieldValue).length) {\n        console.warn('Field 或 fieldValue 尚未加载，返回默认颜色');\n        return 'rgba(128, 128, 128, 1)'; // 返回灰色作为默认颜色\n      }\n      \n      let typeIndex = this.safeField.indexOf(this.typeName);\n      \n      // 安全检查：确保 typeName 对应的数据存在\n      if (!this.safeFieldValue[this.typeName] || !Array.isArray(this.safeFieldValue[this.typeName])) {\n        console.warn(`字段 ${this.typeName} 的数据不存在或不是数组，返回默认颜色`);\n        return 'rgba(128, 128, 128, 1)'; // 返回灰色作为默认颜色\n      }\n     \n      let typeItemIndex = this.safeFieldValue[this.typeName].indexOf(label);\n      \n      // 安全检查：确保找到了对应的索引\n      if (typeItemIndex === -1) {\n        console.warn(`在字段 ${this.typeName} 中未找到标签 ${label}，返回默认颜色`);\n        return 'rgba(128, 128, 128, 1)'; // 返回灰色作为默认颜色\n      }\n      \n      let color = getColorFromValue(typeItemIndex, typeIndex);\n      console.log(color, 344, typeItemIndex, typeIndex);\n      return `rgba(${color[0] * 255}, ${color[1] * 255}, ${\n          color[2] * 255\n        }, ${color[3]})`;\n    },\n    \n    clearAllHighlights() {\n      console.log('清除所有高亮状态');\n      \n      // 清除任何现有的超时\n      if (this.highlightTimeout) {\n        clearTimeout(this.highlightTimeout);\n        this.highlightTimeout = null;\n      }\n      \n      // 立即触发清除悬停事件\n      const clearEvent = new CustomEvent('cell-property-item-mouseleave', {\n        bubbles: true\n      });\n      \n      // 分发事件\n      this.$el.dispatchEvent(clearEvent);\n      \n      // 重要：只有当前没有勾选项时，才清除属性高亮\n      if (this.checkList.length === 0) {\n        console.log('没有勾选项，清除所有高亮');\n        const clearHighlightEvent = new CustomEvent('clear-highlight', {\n          bubbles: true,\n          detail: {\n            attributeName: this.typeName,\n            reason: 'component-destroy'\n          }\n        });\n        this.$el.dispatchEvent(clearHighlightEvent);\n      } else {\n        console.log(`有${this.checkList.length}个勾选项，保留勾选高亮`);\n        // 不触发 clear-highlight 事件，保留勾选高亮\n      }\n    },\n  },\n  beforeDestroy() {\n    // 清除组件销毁前的所有高亮状态\n    this.clearAllHighlights();\n    \n    // 清除任何定时器\n    if (this.highlightTimeout) {\n      clearTimeout(this.highlightTimeout);\n      this.highlightTimeout = null;\n    }\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.check-info {\n  display: flex;\n}\n.color-bar {\n  margin-right: 10px;\n  display: flex;\n  height: 15px;\n  width: 6.25rem;\n}\n.type-item {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  cursor: pointer;\n  padding: 0 5px;\n  white-space: nowrap;\n  flex-wrap: nowrap;\n\n  &:hover {\n    background-color: #ebebeb;\n  }\n}\n.long-label-checkbox .v-label {\n  width: 30%;\n  white-space: nowrap; /* 防止文本换行 */\n  overflow: hidden; /* 隐藏溢出的文本 */\n  text-overflow: ellipsis; /* 用省略号表示溢出的文本 */\n  max-width: 200px; /* 设置最大宽度，可以根据需要调整 */\n}\n:deep .v-input--selection-controls .v-input__slot > .v-label {\n  height: auto;\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 80px;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./typeListItem.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./typeListItem.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./typeListItem.vue?vue&type=template&id=32ca75a4&scoped=true\"\nimport script from \"./typeListItem.vue?vue&type=script&lang=js\"\nexport * from \"./typeListItem.vue?vue&type=script&lang=js\"\nimport style0 from \"./typeListItem.vue?vue&type=style&index=0&id=32ca75a4&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"32ca75a4\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div class=\"tab-panel\">\n    <div class=\"vm-header br cell-row1\">\n      <p>\n        <span class=\"color-block\"></span>\n        <span class=\"cell-row1-text\">SELECTED VIEW</span>\n      </p>\n      <p class=\"dataset-title\">\n        {{datasetName}}\n        <v-icon dense class=\"icon-set small-icon\"\n          >mdi-information-outline</v-icon\n        >\n      </p>\n      <p>{{datasetName}}</p>\n    </div>\n    <div\n      class=\"vm-header br cell-row1 cell-row2\"\n    >\n      <p class=\"properties-title\">\n        <span>Cell Properties</span>\n        <v-icon class=\"icon-set small-icon\" dense>mdi-cog</v-icon>\n      </p>\n      <p class=\"cell-count\">{{formatFileSize(total)}} cells</p>\n    </div>\n    <div class=\"panel-container\" style=\"position: relative;\">\n     <v-overlay\n      :value=\"!cellInfoList.length\"\n      absolute\n      opacity=\"0.1\"\n    >\n      <v-progress-circular\n        indeterminate\n        size=\"64\"\n      ></v-progress-circular>\n    </v-overlay>\n      <v-expansion-panels class=\"expansion-panels\" accordion>\n        <v-expansion-panel v-for=\"(item, i) in cellInfoList\" :key=\"i\">\n          <v-expansion-panel-header\n            expand-icon=\"\"\n            class=\"panel-header\"\n          >\n            <template v-slot:default=\"{ open }\">\n              <v-row no-gutters class=\"panel-row\">\n                <v-col\n                  :cols=\"12\"\n                  :sm=\"6\"\n                  class=\"panel-col-left\"\n                >\n                  <v-icon v-if=\"!open\">mdi-chevron-right</v-icon>\n                  <v-icon v-else>mdi-chevron-down</v-icon> \n                  <span class=\"item-name\">{{ item.name }}</span>\n                  <span class=\"filter-style\" v-if=\"getFilterNum(item.name)\"\n                    >{{ getFilterNum(item.name) }} filters</span\n                  >\n                </v-col>\n                <v-col :cols=\"12\" :sm=\"6\" class=\"panel-col-right\">\n                  <v-fade-transition leave-absolute>\n                    <span\n                      class=\"action-icons\"\n                      key=\"0\"\n                    >\n                      <v-icon v-if=\"open\" class=\"icon-set\">mdi-plus</v-icon>\n                      <v-icon v-if=\"open\" class=\"icon-set\">mdi-minus</v-icon>\n                      <v-icon v-if=\"open\" class=\"icon-set\">mdi-magnify</v-icon>\n                      <span\n                        @click.stop=\"changeByColor(item.name)\"\n                        class=\"icon-set icon10\"\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          enable-background=\"new 0 0 24 24\"\n                          height=\"24px\"\n                          viewBox=\"0 0 24 24\"\n                          width=\"24px\"\n                          fill=\"#5f6368\"\n                          class=\"v-icon__svg\"\n                          :style=\"{'fill':currentColorBy===item.name?'#297aba':'#6c6c6c'}\"\n                        >\n                          <rect fill=\"none\" height=\"24\" width=\"24\" />\n                          <path\n                            d=\"M12,2c-5.33,4.55-8,8.48-8,11.8c0,4.98,3.8,8.2,8,8.2s8-3.22,8-8.2C20,10.48,17.33,6.55,12,2z M12,20c-3.35,0-6-2.57-6-6.2 c0-2.34,1.95-5.44,6-9.14c4.05,3.7,6,6.79,6,9.14C18,17.43,15.35,20,12,20z M7.83,14c0.37,0,0.67,0.26,0.74,0.62 c0.41,2.22,2.28,2.98,3.64,2.87c0.43-0.02,0.79,0.32,0.79,0.75c0,0.4-0.32,0.73-0.72,0.75c-2.13,0.13-4.62-1.09-5.19-4.12 C7.01,14.42,7.37,14,7.83,14z\"\n                          />\n                        </svg>\n                      </span>\n                    </span>\n                  </v-fade-transition>\n                </v-col>\n              </v-row>\n            </template>\n          </v-expansion-panel-header>\n          <v-expansion-panel-content>\n            <component\n              v-bind:is=\"currentComponent\"\n              :typeName=\"item.name\"\n              :typeList=\"item.children\"\n              :field=\"field\"\n              :fieldValue=\"fieldValue\"\n              :currentColorBy=\"currentColorBy\"\n              @getCheckList=\"getCheckList\"\n              @getHoverItem=\"getHoverItem\"\n              v-if=\"item.name !== 'Class'\"\n              @mouseenter.native=\"handleAttributeMouseEnter\"\n              @mouseleave.native=\"handleAttributeMouseLeave\"\n            ></component>\n            <v-treeview\n              v-else\n              v-model=\"treeSelection\"\n              :items=\"item.children\"\n              selected-color=\"indigo\"\n              selectable\n              hoverable\n              expand-icon=\"mdi-chevron-down\"\n              @input=\"getTreeSelected\"\n              class=\"tree-view\"\n            >\n              <template v-slot:label=\"{ item }\">\n                <div\n                  class=\"tree-item\"\n                  @mouseover=\"handleMouseOver(item)\"\n                  @mouseleave=\"handleMouseOut(item)\"\n                >\n                 <span class=\"tree-item-name\"> {{ item.name }}</span>\n                 <div class=\"color-list\">\n                   <span class=\"color-item\" v-if=\"currentColorBy==='Class'\" :style=\"{backgroundColor:getColor(item.name)}\"></span>\n                   <div class=\"color-list-container\" v-else>\n                     <span class=\"color-item\" v-for=\"(color,i) in getColorList()\" :key='i' :style=\"{backgroundColor:color}\"></span>\n                   </div>\n                 </div>\n                </div>\n              </template>\n            </v-treeview>\n          </v-expansion-panel-content>\n        </v-expansion-panel>\n      </v-expansion-panels>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getColorFromValue } from '@/utils/tool';\nimport typeListItem from \"../components/typeListItem.vue\";\nimport { mapState, mapGetters, mapActions } from 'vuex';\nimport { nonReactiveDataMixin } from '@/utils/nonReactiveDataStore';\nimport { buildDatasetPath, getDataset } from '@/api/config';\n\nexport default {\n  name: \"CellProperties\",\n  mixins: [nonReactiveDataMixin], // 🔄 添加非响应式数据mixin\n  components: {\n    typeListItem,\n  },\n  data() {\n    return {\n      expandPanelList: [],\n      items: [],\n      currentComponent: \"typeListItem\",\n      treeSelection: [],\n      currentColorBy: \"Class\",\n      highlightedAttribute: null,\n      highlightedValue: -1,\n    };\n  },\n  computed: {\n    // 🔄 修改computed以使用新的getters（从nonReactiveDataStore获取大数据）\n    ...mapState('cellData', [\n      // 'cellInfoList', // 已迁移到nonReactiveDataStore\n      // 'fieldValue',   // 已迁移到nonReactiveDataStore\n      'typeInfo',\n      'total',\n      'field',\n      'datasetName'\n    ]),\n    ...mapGetters('cellData', [\n      'getCellInfoList',\n      'getFieldValue'\n    ]),\n    \n    // 使用getters获取大数据（自动从nonReactiveDataStore获取）\n    cellInfoList() {\n      return this.getCellInfoList;\n    },\n    fieldValue() {\n      return this.getFieldValue;\n    }\n  },\n  watch:{\n   field:{\n    handler(val){\n      this.currentColorBy=val[0]\n    }\n   }\n  },\n  mounted() {\n    // 添加全局事件监听\n    this.addGlobalEventListeners();\n    \n    // 监听数据集切换事件\n    if (typeof window !== 'undefined') {\n      window.addEventListener('datasetChanged', this.handleDatasetChange);\n    }\n  },\n  beforeDestroy() {\n    // 移除全局事件监听\n    this.removeGlobalEventListeners();\n    \n    // 移除数据集切换事件监听\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('datasetChanged', this.handleDatasetChange);\n    }\n  },\n  methods: {\n    ...mapActions('cellData', [\n      'loadFieldsInfo',\n      'loadCellTypeValues'\n    ]),\n    \n    /**\n     * 处理数据集切换事件\n     */\n    async handleDatasetChange(event) {\n      console.log('CellProperties组件: 数据集切换到', event.detail.dataset);\n      \n      try {\n        \n        // 重置当前状态\n        this.currentColorBy = \"Class\";\n        this.highlightedAttribute = null;\n        this.highlightedValue = -1;\n        this.treeSelection = [];\n        \n        // 🔥 添加短暂延迟，确保缓存清除完成\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        // 重新加载数据，添加重试机制\n        console.log('CellProperties: 重新加载字段信息...');\n        await this.loadDataWithRetry('loadFieldsInfo', 3);\n        \n        console.log('CellProperties: 重新加载细胞类型值...');\n        await this.loadDataWithRetry('loadCellTypeValues', 3);\n        \n        console.log('CellProperties: 数据重新加载完成');\n        \n        // 通知父组件数据集已切换\n        this.$emit('dataset-changed', {\n          dataset: event.detail.dataset\n        });\n        \n      } catch (error) {\n        console.error('CellProperties: 数据集切换时重新加载数据失败:', error);\n        // 不再显示错误消息给用户，因为通常重试会成功\n        // 只在控制台记录错误信息用于调试\n      } \n    },\n    \n    /**\n     * 带重试机制的数据加载\n     * @param {string} actionName - action名称\n     * @param {number} maxRetries - 最大重试次数\n     * @param {number} delay - 重试延迟(ms)\n     */\n    async loadDataWithRetry(actionName, maxRetries = 3, delay = 200) {\n      let lastError = null;\n      \n      for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n          await this[actionName]();\n          return; // 成功则退出\n        } catch (error) {\n          lastError = error;\n          console.warn(`CellProperties: ${actionName} 第${attempt}次尝试失败:`, error.message);\n          \n          if (attempt < maxRetries) {\n            // 指数退避：每次重试延迟时间翻倍\n            const retryDelay = delay * Math.pow(2, attempt - 1);\n            console.log(`CellProperties: ${retryDelay}ms后进行第${attempt + 1}次重试...`);\n            await new Promise(resolve => setTimeout(resolve, retryDelay));\n          }\n        }\n      }\n      \n      // 所有重试都失败了\n      console.error(`CellProperties: ${actionName} 经过${maxRetries}次重试后仍然失败:`, lastError);\n      throw lastError;\n    },\n    getFilterNum(key) {\n      if (this.typeInfo.hasOwnProperty(key)) {\n        return key === \"Class\"\n          ? Object.keys(this.typeInfo[key]).length\n          : this.typeInfo[key].length;\n      } else {\n        return 0;\n      }\n    },\n    getCheckList(val) {\n      this.$emit(\"getType\", { type: \"plain\", data: val });\n    },\n    getTreeSelected(val) {\n      console.log(val, 197);\n      let categoryData = this.categorizedData(val);\n      this.$emit(\"getType\", {\n        type: \"treeView\",\n        data: { key: \"Class\", value: categoryData, mode: \"selected\" },\n      });\n      \n      // 🔧 修复：添加Class类型勾选高亮事件触发\n      if (val && val.length > 0) {\n        // 收集所有勾选项对应的值索引\n        const valueIndices = [];\n        // Class勾选的实际上是L2级别的子节点，应该使用Siletti_modf_SCANVI_L2字段\n        const actualAttributeName = 'Siletti_modf_SCANVI_L2'; \n        \n        // 遍历所有勾选的项\n        for (const selectedItemName of val) {\n          // 找到对应属性值的索引\n          if (this.fieldValue && this.fieldValue[actualAttributeName] && Array.isArray(this.fieldValue[actualAttributeName])) {\n            const valueIndex = this.fieldValue[actualAttributeName].indexOf(selectedItemName);\n            if (valueIndex >= 0) {\n              valueIndices.push(valueIndex);\n              console.log(`Class勾选项: ${selectedItemName}, 索引: ${valueIndex}`);\n            } else {\n              console.warn(`无法找到Class项 ${selectedItemName} 在属性 ${actualAttributeName} 中的索引`);\n            }\n          }\n        }\n        \n        console.log(`Class收集到的值索引: [${valueIndices.join(', ')}]`);\n        \n        if (valueIndices.length > 0) {\n          // 触发多值高亮事件\n          const event = new CustomEvent('highlight-multiple-attributes', {\n            bubbles: true,\n            detail: {\n              attributeName: actualAttributeName,\n              attributeValueIndices: valueIndices,\n              isCheckHighlight: true // 标记为勾选高亮\n            }\n          });\n          this.$el.dispatchEvent(event);\n          \n          console.log(`已触发Class多值高亮事件: ${actualAttributeName}, 索引: [${valueIndices.join(', ')}]`);\n        }\n      } else {\n        // 没有勾选项时，清除Class的高亮\n        console.log('没有Class勾选项，清除高亮');\n        const clearEvent = new CustomEvent('clear-highlight', {\n          bubbles: true,\n          detail: {\n            attributeName: 'Siletti_modf_SCANVI_L2',\n            force: true,\n            reason: 'class-uncheck'\n          }\n        });\n        this.$el.dispatchEvent(clearEvent);\n      }\n    },\n    categorizedData(treeData = []) {\n      const categorizedData = {};\n\n      treeData.forEach((item) => {\n        // 提取类别前缀\n        // const prefix = item.split(\"-\")[0];\n        const prefix = item\n          .match(/^([A-Za-z0-9\\s-]+(?: and [A-Za-z0-9\\s-]+)?)-\\d+$/)[1]\n          .trim();\n\n        // 如果没有此类别则创建新数组\n        if (!categorizedData[prefix]) {\n          categorizedData[prefix] = [];\n        }\n\n        // 添加数据项到对应的类别\n        categorizedData[prefix].push(item);\n      });\n      return categorizedData;\n    },\n    handleMouseOver(item) {\n      console.log(item, 209);\n      this.$emit(\"getHover\", { type: \"treeView\", data: item, mode: \"over\" });\n      \n      // 🔧 修复：正确处理Class类型的悬浮高亮\n      if (!item.children && item.parent) {\n        // 如果是叶子节点（子项），应该在Siletti_modf_SCANVI_L2字段中查找\n        this.highlightTreeItem('Siletti_modf_SCANVI_L2', item.name);\n      } else {\n        // 如果是父节点，应该在Siletti_modf_SCANVI_L1字段中查找\n        this.highlightTreeItem('Siletti_modf_SCANVI_L1', item.name);\n      }\n    },\n    handleMouseOut(item) {\n      console.log(item, 215);\n      this.$emit(\"getHover\", { type: \"treeView\", data: item, mode: \"leave\" });\n      \n      // 清除高亮\n      this.clearHighlight();\n    },\n    getHoverItem(hoverItem) {\n      console.log('🖱️ CellProperties getHoverItem:', hoverItem);\n      \n      // 向 HomeView 发送悬浮事件\n      this.$emit(\"getHover\", { type: \"plain\", data: hoverItem });\n      \n      // 注意：原来的高亮处理方法不存在，暂时移除调用避免错误\n      // TODO: 如果需要在 CellProperties 层级处理高亮，需要实现相应的方法\n      console.log('✅ 悬浮事件已发送到 HomeView');\n    },\n    changeByColor(colorKey) {\n      this.currentColorBy = colorKey\n      let colorField = colorKey === 'Class' ? 'Siletti_modf_SCANVI_L1' : colorKey\n\n      this.$emit(\"getColorBy\", colorField);\n    },\n    formatFileSize(bytes) {\n      if (bytes >= 1024 * 1024 * 1024) {\n        return (bytes / (1024 * 1024 * 1024)).toFixed(2) + ' GB';\n      }\n      if (bytes >= 1024 * 1024) {\n        return (bytes / (1024 * 1024)).toFixed(2) + ' MB';\n      }\n      return bytes\n    },\n    getColor(label){\n      console.log(this.field,this.fieldValue,label,339)\n      let key=this.currentColorBy==='Class'?'Siletti_modf_SCANVI_L1':this.currentColorBy\n      let typeIndex=this.field.indexOf(key)\n     \n      let typeItemIndex=this.fieldValue[key].indexOf(label)\n      let color=getColorFromValue(typeItemIndex,typeIndex)\n      console.log(color,344,typeItemIndex,typeIndex)\n      return  `rgba(${color[0] * 255}, ${color[1] * 255}, ${\n          color[2] * 255\n        }, ${color[3]})`;\n    },\n    getColorList(){\n      let key=this.currentColorBy==='Class'?'Siletti_modf_SCANVI_L1':this.currentColorBy\n      let typeIndex=this.field.indexOf(key)\n      let items=this.fieldValue[key]\n      let colors=[]\n      for(let i=0;i<10;i++){\n        let color=getColorFromValue(i,typeIndex)\n        colors.push(`rgba(${color[0] * 255}, ${color[1] * 255}, ${\n        color[2] * 255\n      }, ${color[3]})`)\n      }\n      return colors;\n    },\n    async loadCellAttribute(attrPath) {\n      try {\n        console.log(`CellProperties: 开始加载属性数据: ${attrPath}`);\n        \n        // 从路径中提取字段名\n        const fieldName = attrPath.split('/').pop().replace('.bin', '');\n        \n        // 使用统一的dataLoader，享受去重机制\n        const { dataLoader } = await import('@/render/dataLoader');\n        const floatArray = await dataLoader.loadCellAttribute(fieldName);\n        \n        console.log(`CellProperties: 成功加载Float32Array，长度: ${floatArray.length}`);\n        return floatArray;\n      } catch (error) {\n        console.error(`CellProperties: 加载属性数据失败:`, error);\n        return new Float32Array(0);\n      }\n    },\n\n    // 添加全局事件监听\n    addGlobalEventListeners() {\n      // 监听属性项的鼠标事件\n      document.addEventListener('cell-property-item-mouseenter', this.handlePropertyItemMouseEnter);\n      document.addEventListener('cell-property-item-mouseleave', this.handlePropertyItemMouseLeave);\n    },\n\n    // 移除全局事件监听\n    removeGlobalEventListeners() {\n      document.removeEventListener('cell-property-item-mouseenter', this.handlePropertyItemMouseEnter);\n      document.removeEventListener('cell-property-item-mouseleave', this.handlePropertyItemMouseLeave);\n    },\n\n    // 处理属性项的鼠标进入事件\n    handlePropertyItemMouseEnter(event) {\n      if (event.detail) {\n        const { attributeName, attributeValue, valueIndex } = event.detail;\n\n        // 确保attributeName和valueIndex有效\n        if (!attributeName || valueIndex === undefined || valueIndex < 0) {\n          console.warn(`无效的悬停属性信息: ${attributeName}:${valueIndex}`);\n          return;\n        }\n\n        console.log(`🖱️ 属性项悬停: ${attributeName}, 值索引: ${valueIndex}`);\n\n        // 🔧 修复：直接向 HomeView 发送悬浮事件，而不是调用不存在的方法\n        this.$emit(\"getHover\", { \n          type: \"plain\", \n          data: { \n            key: attributeName, \n            value: attributeValue,\n            valueIndex: valueIndex,\n            mode: \"over\" \n          } \n        });\n        \n        console.log('✅ 直接悬浮事件已发送到 HomeView');\n      }\n    },\n\n    // 处理属性项的鼠标离开事件\n    handlePropertyItemMouseLeave() {\n      // 清除悬停高亮\n      this.clearHoverCategory();\n    },\n    \n    // 设置悬停高亮 - 使用 hoverCategory 而不是 highlightAttribute\n    setHoverCategory(attributeName, valueIndex) {\n      // 发送悬停事件到 Vuex store 或直接到渲染组件\n      this.$store.dispatch('cellData/setHoverInfo', {\n        key: attributeName,\n        value: valueIndex,\n        type: 'hover'\n      });\n    },\n    \n    // 清除悬停高亮\n    clearHoverCategory() {\n      // 🔧 修复：直接调用store方法，不要重复分发事件\n      this.$store.dispatch('cellData/clearHoverInfo');\n    },\n\n    // 高亮属性 - 仅用于勾选高亮\n    highlightAttribute(attributeName, valueIndex) {\n      // 如果索引无效，则不处理\n      if (valueIndex < 0) {\n        console.warn(`属性值索引无效: ${valueIndex}`);\n        return;\n      }\n      \n      // 如果属性名为Class，需要转换\n      const actualAttributeName = attributeName === 'Class' ? 'Siletti_modf_SCANVI_L1' : attributeName;\n      \n      // 检查属性名是否有效\n      if (!this.field.includes(actualAttributeName)) {\n        console.warn(`属性名无效: ${actualAttributeName}`);\n        return;\n      }\n      \n      // 保存当前高亮状态\n      this.highlightedAttribute = actualAttributeName;\n      this.highlightedValue = valueIndex;\n      \n      // 创建自定义事件，通知渲染组件\n      const highlightEvent = new CustomEvent('highlight-attribute', {\n        detail: {\n          attributeName: actualAttributeName,\n          attributeValue: valueIndex\n        },\n        bubbles: true\n      });\n      \n      // 分发事件\n      this.$el.dispatchEvent(highlightEvent);\n    },\n\n    // 高亮树形结构中的项\n    highlightTreeItem(attributeName, itemName) {\n      // 检查属性名是否有效\n      if (!this.fieldValue || !this.fieldValue[attributeName]) {\n        console.warn(`无效的属性名: ${attributeName}`);\n        return;\n      }\n      \n      // 找到对应属性值的索引\n      const attributeValues = this.fieldValue[attributeName];\n      if (!attributeValues || !Array.isArray(attributeValues)) {\n        console.warn(`属性值数组无效: ${attributeName}`);\n        return;\n      }\n      \n      const valueIndex = attributeValues.indexOf(itemName);\n      if (valueIndex >= 0) {\n        this.highlightAttribute(attributeName, valueIndex);\n      } else {\n        console.warn(`无法找到项 ${itemName} 在属性 ${attributeName} 中的索引`);\n      }\n    },\n\n    // 清除高亮\n    clearHighlight(force = false) {\n      if (!this.highlightedAttribute && !force) return;\n      \n      // 如果不是强制清除，检查是否有勾选的项目\n      if (!force) {\n        // 这里需要检查当前是否有勾选项，但由于这是父组件，\n        // 我们无法直接访问子组件的勾选状态\n        // 所以我们添加一个标记来判断是否应该清除\n        console.log('尝试清除高亮，但需要检查是否有勾选项');\n        \n        // 创建一个带有检查标记的清除事件\n        const clearEvent = new CustomEvent('clear-highlight', {\n          bubbles: true,\n          detail: {\n            attributeName: this.highlightedAttribute,\n            checkForCheckedItems: true, // 标记需要检查勾选项\n            reason: 'parent-clear-request'\n          }\n        });\n        \n        // 分发事件\n        this.$el.dispatchEvent(clearEvent);\n        return;\n      }\n      \n      // 强制清除的情况\n      this.highlightedAttribute = null;\n      this.highlightedValue = -1;\n      \n      // 创建自定义事件，通知渲染组件清除高亮\n      const clearEvent = new CustomEvent('clear-highlight', {\n        bubbles: true,\n        detail: {\n          force: true,\n          reason: 'force-clear'\n        }\n      });\n      \n      // 分发事件\n      this.$el.dispatchEvent(clearEvent);\n    },\n\n    // 处理属性列表的鼠标进入事件\n    handleAttributeMouseEnter(event) {\n      // 此事件添加在整个组件上，不做任何处理\n      // 具体的处理放在子组件item级别\n    },\n\n    // 处理属性列表的鼠标离开事件\n    handleAttributeMouseLeave() {\n      // 只清除悬停状态，不清除勾选高亮\n      this.clearHoverCategory();\n      \n      // 为整个组件创建清除悬停事件\n      const event = new CustomEvent('cell-property-item-mouseleave', {\n        bubbles: true\n      });\n      \n      // 分发事件\n      this.$el.dispatchEvent(event);\n      \n      // 注意：不调用 clearHighlight()，因为这会清除勾选高亮\n      // 勾选高亮应该只在用户主动取消勾选时才清除\n    }\n  }\n};\n</script>\n\n<style scoped lang=\"scss\">\n.tab-panel {\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.vm-header {\n  padding: 10px;\n  \n  &.cell-row2 {\n    background-color: #fff;\n  }\n}\n\n.dataset-title {\n  font-size: 20px;\n  margin: 10px 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.properties-title {\n  font-size: 20px;\n  \n  span {\n    margin-right: 5px;\n  }\n}\n\n.cell-count {\n  color: #666;\n}\n\n.panel-container {\n  flex: 1;\n  overflow: auto;\n  width: 100%;\n}\n\n.expansion-panels {\n  width: 100%;\n  margin-bottom: 6px;\n}\n\n.panel-header {\n  display: flex;\n  justify-content: space-between;\n}\n\n.panel-row {\n  width: 100%;\n}\n\n.panel-col-left {\n  text-align: left;\n  display: flex;\n  align-items: center;\n  \n  .item-name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n}\n\n.panel-col-right {\n  text-align: right;\n}\n\n.action-icons {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.icon10 {\n  margin-right: 10px;\n}\n\n.tree-view {\n  text-align: left;\n}\n\n.tree-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n}\n\n.tree-item-name {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  flex: 1;\n}\n\n.color-list {\n  width: 20%;\n  min-width: 50px;\n  margin-left: 10px;\n  \n  .color-item {\n    display: block;\n    height: 15px;\n    width: 100%;\n  }\n  \n  .color-list-container {\n    display: flex;\n    width: 100%;\n    \n    .color-item {\n      flex: 1;\n    }\n  }\n}\n\n.v-icon__svg {\n  width: 20px;\n  height: 20px;\n  fill: #6c6c6c;\n}\n\n:deep .v-expansion-panel-header {\n  padding: 16px 0 !important;\n}\n\n.filter-style {\n  margin-left: 5px;\n  display: inline-block;\n  background-color: #297aba;\n  color: #fff;\n  border-radius: 3px;\n  padding: 2px 4px;\n  white-space: nowrap;\n  font-size: 0.8rem;\n}\n\n@media (max-width: 600px) {\n  .panel-row {\n    flex-direction: column;\n  }\n  \n  .panel-col-left, .panel-col-right {\n    width: 100%;\n    max-width: 100%;\n    flex-basis: 100%;\n  }\n  \n  .dataset-title, .properties-title {\n    font-size: 16px;\n  }\n  \n  .tree-item {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .color-list {\n    width: 100%;\n    margin-left: 0;\n    margin-top: 5px;\n  }\n}\n\n@media (max-width: 768px) {\n  .dataset-title {\n    font-size: 18px;\n  }\n  \n  .properties-title {\n    font-size: 18px;\n  }\n}\n\n/* 直方图容器自适应 */\n.histogram-container {\n  width: 100%;\n  height: 120px;\n  max-height: 30vh;\n}\n\n/* 基因表达面板优化 */\n.gene-expression-panel {\n  width: 100%;\n  padding: 10px 2%;\n}\n\n/* 移动设备优化 */\n@media (max-width: 768px) {\n  .gene-symbol-btn {\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n  \n  .gene-symbol-icon {\n    margin-right: 5px;\n  }\n  \n  .histogram-header {\n    flex-direction: column;\n  }\n  \n  .selection-range {\n    margin-bottom: 5px;\n    font-size: 11px;\n  }\n}\n\n/* 更小屏幕优化 */\n@media (max-width: 480px) {\n  .v-expansion-panel-header {\n    padding: 10px 0 !important;\n  }\n  \n  .histogram-svg text {\n    font-size: 10px;\n  }\n  \n  .gene-avg-expression {\n    font-size: 11px;\n  }\n}\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CellProperties.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CellProperties.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./CellProperties.vue?vue&type=template&id=5998154a&scoped=true\"\nimport script from \"./CellProperties.vue?vue&type=script&lang=js\"\nexport * from \"./CellProperties.vue?vue&type=script&lang=js\"\nimport style0 from \"./CellProperties.vue?vue&type=style&index=0&id=5998154a&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5998154a\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"tab-panel\"},[_c('div',{staticClass:\"vm-header br cell-row1\"},[_vm._m(0),_c('p',{staticStyle:{\"font-size\":\"20px\",\"margin\":\"10px 0\"}},[_vm._v(\" \"+_vm._s(_vm.datasetName)+\" \"),_c('v-icon',{staticClass:\"icon-set small-icon\",attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-information-outline\")])],1),_c('p',[_vm._v(_vm._s(_vm.datasetName))])]),_c('div',{staticClass:\"vm-header br cell-row1 cell-row2\",staticStyle:{\"background-color\":\"#fff\"}},[_vm._m(1),_c('p',{staticStyle:{\"color\":\"#666\",\"margin-bottom\":\"15px !important\"}},[_vm._v(_vm._s(_vm.geneList.length)+\" in dataset\")]),_c('div',[(!_vm.showBatchInput)?_c('v-autocomplete',{attrs:{\"items\":_vm.geneList,\"outlined\":\"\",\"chips\":\"\",\"clearable\":\"\",\"label\":\"Search by gene symbol\",\"item-text\":\"label\",\"item-value\":\"value\",\"multiple\":\"\",\"dense\":\"\"},on:{\"change\":_vm.selectGene},scopedSlots:_vm._u([{key:\"selection\",fn:function(data){return [_c('v-chip',_vm._b({attrs:{\"input-value\":data.selected,\"close\":\"\",\"label\":\"\",\"outlined\":\"\",\"small\":\"\"},on:{\"click\":data.select,\"click:close\":function($event){return _vm.remove(data.item)}}},'v-chip',data.attrs,false),[_vm._v(\" \"+_vm._s(data.item.label)+\" \")])]}},{key:\"item\",fn:function(data){return [[_c('v-list-item-content',[_vm._v(_vm._s(data.item.label))])]]}}],null,false,1221483296),model:{value:(_vm.geneSelected),callback:function ($$v) {_vm.geneSelected=$$v},expression:\"geneSelected\"}}):_c('v-textarea',{attrs:{\"outlined\":\"\",\"dense\":\"\",\"auto-grow\":\"\",\"rows\":\"3\",\"label\":\"Enter gene symbols separated by commas\",\"placeholder\":\"e.g. Gad1, Slc17a7, Aqp4\"},on:{\"keydown\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"esc\",27,$event.key,[\"Esc\",\"Escape\"]))return null;_vm.showBatchInput = false}},model:{value:(_vm.batchInput),callback:function ($$v) {_vm.batchInput=$$v},expression:\"batchInput\"}}),_c('div',{staticClass:\"gene-symbol-btn\"},[_c('v-btn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":_vm.clearGenes}},[_vm._v(\" CLEAR\")]),(!_vm.showBatchInput)?_c('v-btn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":function($event){_vm.showBatchInput = true}}},[_vm._v(\" ADD BATCH \")]):_c('v-btn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":_vm.addBatchGenes}},[_vm._v(\" SUBMIT \")]),(_vm.showBatchInput)?_c('v-btn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"error\"},on:{\"click\":function($event){_vm.showBatchInput = false}}},[_vm._v(\" CANCEL \")]):_vm._e()],1)],1)]),_c('div',{staticStyle:{\"display\":\"flex\"}},[_c('v-expansion-panels',{staticClass:\"mb-6\",attrs:{\"accordion\":\"\"}},_vm._l((_vm.geneSelected),function(item,i){return _c('v-expansion-panel',{key:i},[_c('v-expansion-panel-header',{staticStyle:{\"display\":\"flex\",\"justify-content\":\"space-between\"},attrs:{\"hide-actions\":\"\"},on:{\"click\":function($event){return _vm.handlePanelClick(item)}},scopedSlots:_vm._u([{key:\"default\",fn:function({ open }){return [_c('v-row',{attrs:{\"no-gutters\":\"\",\"justify\":\"space-between\"}},[_c('v-col',{staticStyle:{\"text-align\":\"left\",\"display\":\"flex\",\"align-items\":\"center\"},attrs:{\"cols\":\"4\"}},[(!open)?_c('v-icon',[_vm._v(\"mdi-chevron-right\")]):_c('v-icon',[_vm._v(\"mdi-chevron-down\")]),_vm._v(\" \"+_vm._s(item)+\" \")],1),_c('v-col',{staticClass:\"gene-symbol-icon\",attrs:{\"cols\":\"4\"}},[_c('v-icon',{staticClass:\"icon-set icon10\",staticStyle:{\"font-size\":\"20px\"}},[_vm._v(\"mdi-cog\")]),_c('span',{staticClass:\"icon-set icon10 color-icon\",class:{ 'active-gene': _vm.activeGeneForRendering === item },attrs:{\"title\":_vm.activeGeneForRendering === item ? '当前用于渲染的基因' : '点击使用此基因进行渲染'},on:{\"click\":function($event){$event.stopPropagation();return _vm.handleColorIconClick(item)}}},[_c('svg',{staticClass:\"v-icon__svg\",attrs:{\"viewBox\":\"0 0 24 24\",\"role\":\"img\",\"aria-hidden\":\"true\"}},[_c('path',{attrs:{\"d\":\"M12,19.58V19.58C10.4,19.58 8.89,18.96 7.76,17.83C6.62,16.69 6,15.19 6,13.58C6,12 6.62,10.47 7.76,9.34L12,5.1M17.66,7.93L12,2.27V2.27L6.34,7.93C3.22,11.05 3.22,16.12 6.34,19.24C7.9,20.8 9.95,21.58 12,21.58C14.05,21.58 16.1,20.8 17.66,19.24C20.78,16.12 20.78,11.05 17.66,7.93Z\"}})])]),_c('v-icon',{staticClass:\"icon-set icon10\",staticStyle:{\"font-size\":\"20px\"},on:{\"click\":function($event){$event.stopPropagation();return _vm.removeItem(item)}}},[_vm._v(\"mdi-window-close\")])],1)],1)]}}],null,true)}),_c('v-expansion-panel-content',[_c('div',{staticClass:\"gene-expression-panel\"},[_c('div',{staticClass:\"gene-expression-stats\"},[_c('div',{staticClass:\"expression-histogram\"},[_c('div',{staticClass:\"histogram-header\"},[(_vm.selectedRange[item])?_c('span',{staticClass:\"selection-range\"},[_vm._v(\" Selection Range: \"+_vm._s(_vm.formatExpression(_vm.selectedRange[item].start))+\" - \"+_vm._s(_vm.formatExpression(_vm.selectedRange[item].end))+\" \"),(_vm.getSelectionStats(item))?_c('span',{staticClass:\"selection-stats\"},[_vm._v(\" (\"+_vm._s(_vm.getSelectionStats(item).count)+\" cells, \"+_vm._s(_vm.getSelectionStats(item).percentage)+\"%) \")]):_vm._e()]):_vm._e(),_c('span',{staticClass:\"expression-percentage\"},[_vm._v(_vm._s(_vm.getExpressionPercentage(item))+\"%\")])]),_c('div',{ref:\"histogramContainer\",refInFor:true,staticClass:\"histogram-container\"},[_c('svg',{ref:\"histogramSvg\",refInFor:true,staticClass:\"histogram-svg\",attrs:{\"id\":`histogram-${item}`,\"preserveAspectRatio\":\"none\"},on:{\"mousedown\":function($event){return _vm.startSelection($event, item)},\"mousemove\":function($event){return _vm.updateSelection($event, item)},\"mouseup\":function($event){return _vm.endSelection(item)},\"mouseleave\":_vm.cancelSelection}},[_c('g',{staticClass:\"axis x-axis\"},[_c('text',{attrs:{\"x\":\"2%\",\"y\":\"120\"}},[_vm._v(_vm._s(_vm.getExpressionRange(item).min.toFixed(1)))]),_c('text',{attrs:{\"x\":\"25%\",\"y\":\"120\"}},[_vm._v(_vm._s(_vm.getAxisTickValue(item, 0.25).toFixed(1)))]),_c('text',{attrs:{\"x\":\"50%\",\"y\":\"120\"}},[_vm._v(_vm._s(_vm.getAxisTickValue(item, 0.5).toFixed(1)))]),_c('text',{attrs:{\"x\":\"75%\",\"y\":\"120\"}},[_vm._v(_vm._s(_vm.getAxisTickValue(item, 0.75).toFixed(1)))]),_c('text',{attrs:{\"x\":\"98%\",\"y\":\"120\",\"text-anchor\":\"end\"}},[_vm._v(_vm._s(_vm.getExpressionRange(item).max.toFixed(1)))])]),(_vm.currentSelectedGeneInfo[item])?_c('g',{key:`bars-${item}-${Object.keys(_vm.currentSelectedGeneInfo).length}`,staticClass:\"bars\"},_vm._l((_vm.generateHistogramData(item)),function(bar,index){return _c('rect',{key:`${item}-bar-${index}-${bar.count}`,attrs:{\"x\":`${4 + (index * 92 / 50)}%`,\"y\":100 - bar.height,\"width\":`${92 / 50}%`,\"height\":bar.height,\"fill\":_vm.getBarColor(bar, item, index),\"stroke\":_vm.isInSelectionRange(bar, item) ? '#0D47A1' : 'none',\"stroke-width\":_vm.isInSelectionRange(bar, item) ? 0.5 : 0}})}),0):_vm._e(),(_vm.selectionActive && _vm.currentSelectionGene === item)?_c('rect',{attrs:{\"x\":_vm.selectionStart.x,\"y\":0,\"width\":_vm.getSelectionWidth(item),\"height\":100,\"fill\":\"rgba(66, 133, 244, 0.2)\",\"stroke\":\"#4285F4\",\"stroke-width\":\"1\"}}):_vm._e(),(!_vm.selectionActive && _vm.selectedRange[item] && !isNaN(_vm.getSelectionRangePosition(item).start) && !isNaN(_vm.getSelectionRangePosition(item).width))?_c('rect',{attrs:{\"x\":_vm.getSelectionRangePosition(item).start,\"y\":0,\"width\":_vm.getSelectionRangePosition(item).width,\"height\":100,\"fill\":\"rgba(66, 133, 244, 0.2)\",\"stroke\":\"#4285F4\",\"stroke-width\":\"1\"}}):_vm._e()])])]),_c('div',{staticClass:\"gene-info\"},[_c('div',{staticClass:\"gene-avg-expression\"},[_vm._v(_vm._s(_vm.getAverageExpression(item)))]),(_vm.selectedRange[item])?_c('v-btn',{staticClass:\"ml-2\",attrs:{\"x-small\":\"\",\"text\":\"\",\"color\":\"error\"},on:{\"click\":function($event){return _vm.clearSelection(item)}}},[_c('v-icon',{attrs:{\"x-small\":\"\",\"left\":\"\"}},[_vm._v(\"mdi-close\")]),_vm._v(\"Clear Selection \")],1):_vm._e()],1)]),_c('div',{staticClass:\"expression-controls\"},[_c('v-btn',{staticClass:\"download-btn\",attrs:{\"small\":\"\",\"icon\":\"\",\"color\":\"primary\"}},[_c('v-icon',{attrs:{\"small\":\"\"}},[_vm._v(\"mdi-download\")])],1)],1)])])],1)}),1)],1)])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('p',[_c('span',{staticClass:\"color-block\"}),_c('span',{staticClass:\"cell-row1-text\"},[_vm._v(\"SELECTED VIEW\")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('p',{staticStyle:{\"font-size\":\"20px\"}},[_c('span',{staticStyle:{\"margin-right\":\"5px\"}},[_vm._v(\"Genes\")])])\n}]\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"tab-panel\">\n    <div class=\"vm-header br cell-row1\">\n      <p>\n        <span class=\"color-block\"></span>\n        <span class=\"cell-row1-text\">SELECTED VIEW</span>\n      </p>\n      <p style=\"font-size: 20px; margin: 10px 0\">\n        {{datasetName}}\n        <v-icon dense class=\"icon-set small-icon\"\n          >mdi-information-outline</v-icon\n        >\n      </p>\n      <p>{{datasetName}}</p>\n    </div>\n    <div\n      class=\"vm-header br cell-row1 cell-row2\"\n      style=\"background-color: #fff\"\n    >\n      <p style=\"font-size: 20px\">\n        <span style=\"margin-right: 5px\">Genes</span>\n      </p>\n      <p style=\"color: #666;margin-bottom:15px !important;\">{{geneList.length}} in dataset</p>\n      <div>\n        <v-autocomplete\n          v-if=\"!showBatchInput\"\n          v-model=\"geneSelected\"\n          :items=\"geneList\"\n          outlined\n          chips\n          clearable\n          label=\"Search by gene symbol\"\n          item-text=\"label\"\n          item-value=\"value\"\n          multiple\n          dense\n          @change=\"selectGene\"\n        >\n          <template v-slot:selection=\"data\">\n            <v-chip\n              v-bind=\"data.attrs\"\n              :input-value=\"data.selected\"\n              close\n              label\n              outlined\n              small\n              @click=\"data.select\"\n              @click:close=\"remove(data.item)\"\n            >\n              {{ data.item.label}}\n            </v-chip>\n          </template>\n          <template v-slot:item=\"data\">\n            <template>\n              <v-list-item-content\n                >{{ data.item.label }}</v-list-item-content>\n            </template>\n          </template>\n        </v-autocomplete>\n        <v-textarea\n          v-else\n          v-model=\"batchInput\"\n          outlined\n          dense\n          auto-grow\n          rows=\"3\"\n          label=\"Enter gene symbols separated by commas\"\n          placeholder=\"e.g. Gad1, Slc17a7, Aqp4\"\n          @keydown.esc=\"showBatchInput = false\"\n        ></v-textarea>\n        <div class=\"gene-symbol-btn\">\n          <v-btn class=\"ma-2\" outlined color=\"indigo\" @click=\"clearGenes\"> CLEAR</v-btn>\n          <v-btn v-if=\"!showBatchInput\" class=\"ma-2\" outlined color=\"indigo\" @click=\"showBatchInput = true\"> ADD BATCH </v-btn>\n          <v-btn v-else class=\"ma-2\" outlined color=\"indigo\" @click=\"addBatchGenes\"> SUBMIT </v-btn>\n          <v-btn v-if=\"showBatchInput\" class=\"ma-2\" outlined color=\"error\" @click=\"showBatchInput = false\"> CANCEL </v-btn>\n        </div>\n      </div>\n    </div>\n    <div style=\"display: flex\">\n      <v-expansion-panels class=\"mb-6\" accordion>\n        <v-expansion-panel v-for=\"(item, i) in geneSelected\" :key=\"i\">\n          <v-expansion-panel-header\n            hide-actions\n            style=\"display: flex; justify-content: space-between\"\n            @click=\"handlePanelClick(item)\"\n          >\n            <template v-slot:default=\"{ open }\">\n              <v-row no-gutters justify=\"space-between\">\n                <v-col\n                  cols=\"4\"\n                  style=\"text-align: left; display: flex; align-items: center\"\n                >\n                  <v-icon v-if=\"!open\">mdi-chevron-right</v-icon>\n                  <v-icon v-else>mdi-chevron-down</v-icon> {{item}}\n                </v-col>\n                <v-col cols=\"4\" class=\"gene-symbol-icon\">\n                  <v-icon style=\"font-size:20px;\" class=\"icon-set icon10\">mdi-cog</v-icon>\n                  <span @click.stop=\"handleColorIconClick(item)\" \n                        class=\"icon-set icon10 color-icon\" \n                        :class=\"{ 'active-gene': activeGeneForRendering === item }\"\n                        :title=\"activeGeneForRendering === item ? '当前用于渲染的基因' : '点击使用此基因进行渲染'\">\n                    <svg\n                      viewBox=\"0 0 24 24\"\n                      role=\"img\"\n                      aria-hidden=\"true\"\n                      class=\"v-icon__svg\"\n                    >\n                      <path\n                        d=\"M12,19.58V19.58C10.4,19.58 8.89,18.96 7.76,17.83C6.62,16.69 6,15.19 6,13.58C6,12 6.62,10.47 7.76,9.34L12,5.1M17.66,7.93L12,2.27V2.27L6.34,7.93C3.22,11.05 3.22,16.12 6.34,19.24C7.9,20.8 9.95,21.58 12,21.58C14.05,21.58 16.1,20.8 17.66,19.24C20.78,16.12 20.78,11.05 17.66,7.93Z\"\n                      ></path>\n                    </svg>\n                  </span>\n                  <v-icon style=\"font-size:20px;\" class=\"icon-set icon10\" @click.stop=\"removeItem(item)\">mdi-window-close</v-icon>\n                </v-col>\n              </v-row>\n            </template>\n          </v-expansion-panel-header>\n          <v-expansion-panel-content>\n            <div class=\"gene-expression-panel\">\n              <div class=\"gene-expression-stats\">\n                <div class=\"expression-histogram\">\n                  <div class=\"histogram-header\">\n                    <span v-if=\"selectedRange[item]\" class=\"selection-range\">\n                      Selection Range: {{ formatExpression(selectedRange[item].start) }} - {{ formatExpression(selectedRange[item].end) }}\n                      <span class=\"selection-stats\" v-if=\"getSelectionStats(item)\">\n                        ({{ getSelectionStats(item).count }} cells, {{ getSelectionStats(item).percentage }}%)\n                      </span>\n                    </span>\n                    <span class=\"expression-percentage\">{{ getExpressionPercentage(item) }}%</span>\n                  </div>\n                  \n                  <div class=\"histogram-container\" ref=\"histogramContainer\">\n                    <svg class=\"histogram-svg\" :id=\"`histogram-${item}`\" \n                         @mousedown=\"startSelection($event, item)\" \n                         @mousemove=\"updateSelection($event, item)\"\n                         @mouseup=\"endSelection(item)\"\n                         @mouseleave=\"cancelSelection\"\n                         ref=\"histogramSvg\"\n                         preserveAspectRatio=\"none\">\n                      <g class=\"axis x-axis\">\n                        <text x=\"2%\" y=\"120\">{{ getExpressionRange(item).min.toFixed(1) }}</text>\n                        <text x=\"25%\" y=\"120\">{{ getAxisTickValue(item, 0.25).toFixed(1) }}</text>\n                        <text x=\"50%\" y=\"120\">{{ getAxisTickValue(item, 0.5).toFixed(1) }}</text>\n                        <text x=\"75%\" y=\"120\">{{ getAxisTickValue(item, 0.75).toFixed(1) }}</text>\n                        <text x=\"98%\" y=\"120\" text-anchor=\"end\">{{ getExpressionRange(item).max.toFixed(1) }}</text>\n                      </g>\n                      <!-- 动态生成的柱状图 -->\n                      <g class=\"bars\" v-if=\"currentSelectedGeneInfo[item]\" :key=\"`bars-${item}-${Object.keys(currentSelectedGeneInfo).length}`\">\n                        <rect v-for=\"(bar, index) in generateHistogramData(item)\" \n                              :key=\"`${item}-bar-${index}-${bar.count}`\"\n                              :x=\"`${4 + (index * 92 / 50)}%`\"\n                              :y=\"100 - bar.height\"\n                              :width=\"`${92 / 50}%`\"\n                              :height=\"bar.height\"\n                              :fill=\"getBarColor(bar, item, index)\"\n                              :stroke=\"isInSelectionRange(bar, item) ? '#0D47A1' : 'none'\"\n                              :stroke-width=\"isInSelectionRange(bar, item) ? 0.5 : 0\"\n                              ></rect>\n                      </g>\n                      \n                      <!-- 选择区域 -->\n                      <rect v-if=\"selectionActive && currentSelectionGene === item\"\n                            :x=\"selectionStart.x\"\n                            :y=\"0\"\n                            :width=\"getSelectionWidth(item)\"\n                            :height=\"100\"\n                            fill=\"rgba(66, 133, 244, 0.2)\"\n                            stroke=\"#4285F4\"\n                            stroke-width=\"1\"></rect>\n                      \n                      <!-- 非活动状态下的选中区域 -->\n                      <rect v-if=\"!selectionActive && selectedRange[item] && !isNaN(getSelectionRangePosition(item).start) && !isNaN(getSelectionRangePosition(item).width)\"\n                            :x=\"getSelectionRangePosition(item).start\"\n                            :y=\"0\"\n                            :width=\"getSelectionRangePosition(item).width\"\n                            :height=\"100\"\n                            fill=\"rgba(66, 133, 244, 0.2)\"\n                            stroke=\"#4285F4\"\n                            stroke-width=\"1\"></rect>\n                    </svg>\n                  </div>\n                </div>\n                \n                <div class=\"gene-info\">\n                  <div class=\"gene-avg-expression\">{{ getAverageExpression(item) }}</div>\n                  <v-btn v-if=\"selectedRange[item]\" x-small text color=\"error\" class=\"ml-2\" @click=\"clearSelection(item)\">\n                    <v-icon x-small left>mdi-close</v-icon>Clear Selection\n                  </v-btn>\n                </div>\n              </div>\n              \n              <div class=\"expression-controls\">\n                <v-btn small icon color=\"primary\" class=\"download-btn\">\n                  <v-icon small>mdi-download</v-icon>\n                </v-btn>\n              </div>\n            </div>\n          </v-expansion-panel-content>\n        </v-expansion-panel>\n      </v-expansion-panels>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions, mapGetters } from 'vuex';\nimport { nonReactiveDataMixin } from '@/utils/nonReactiveDataStore';\nimport { buildDatasetPath, getDataset } from '@/api/config';\n\nexport default {\n  name: \"Genes\",\n  mixins: [nonReactiveDataMixin], // 🔄 添加非响应式数据mixin\n  data() {\n    return {\n      showBatchInput: false,\n      batchInput: \"\",\n      geneSelected: [],\n      histogramData: {},\n      selectionActive: false,\n      selectionStart: { x: 0, y: 0 },\n      selectionEnd: { x: 0, y: 0 },\n      currentSelectionGene: null,\n      selectedRange: {},\n      currentSelectedGeneInfo: {},\n      isUpdating: false, // 防止递归调用的标志\n      name: \"Midnight Crew\",\n      title: \"The summer breeze\",\n      geneTotal: 0,\n      geneData: null,\n      chunkCache: {}, // 用于缓存已加载的chunk数据\n      selectionStats: {}, // 存储选择区域的统计信息\n      currentOpenPanel: null, // 当前打开的面板\n      geneColor: '',\n      activeGeneForRendering: null, // 当前用于渲染的活跃基因\n    };\n  },\n  computed: {\n    // 🔄 修改computed以使用新的getters（从nonReactiveDataStore获取大数据）\n    ...mapState('cellData', [\n      'geneList',\n      'datasetName',\n      // 'geneExp',      // 已迁移到nonReactiveDataStore\n      'geneExpRange'\n    ]),\n    // 移除 getGeneExp getter，因为它与 HomeView 中的方法冲突\n    \n    // 使用nonReactiveDataStore直接获取基因表达数据\n    geneExp() {\n      return this.getNonReactiveData('geneExp') || {};\n    }\n  },\n  async mounted() {\n    // 监听数据集切换事件\n    if (typeof window !== 'undefined') {\n      window.addEventListener('datasetChanged', this.handleDatasetChange);\n    }\n    \n    // 加载基因列表\n    await this.loadGeneList();\n\n    // 尝试获取基因矩阵信息\n    await this.loadMatrixInfo();\n    \n    // 自动选择第一个基因 0610007P14Rik\n    await this.autoSelectFirstGene();\n    \n    // 加载保存的选择范围\n    this.loadSavedRanges();\n  },\n  \n  beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('datasetChanged', this.handleDatasetChange);\n    }\n  },\n  \n  methods: {\n    ...mapActions('cellData', [\n      'loadGeneExpression',\n      'loadGeneList'\n    ]),\n    \n    /**\n     * 处理数据集切换事件\n     */\n    async handleDatasetChange(event) {\n      console.log('Genes组件: 数据集切换到', event.detail.dataset);\n      \n      try {\n        // 🔥 清除所有缓存和状态\n        this.chunkCache = {};\n        this.currentSelectedGeneInfo = {};\n        this.selectedRange = {};\n        this.selectionStats = {};\n        this.activeGeneForRendering = null;\n        this.geneSelected = [];\n        this.geneData = null;\n        this.geneTotal = 0;\n        \n        console.log('Genes: 已清除所有缓存和状态');\n        \n        // 🔥 重新加载基因列表\n        console.log('Genes: 重新加载基因列表...');\n        await this.loadGeneList();\n        \n        // 🔥 重新加载矩阵信息\n        console.log('Genes: 重新加载矩阵信息...');\n        await this.loadMatrixInfo();\n        \n        // 🔥 发送空的基因数据，恢复默认颜色状态\n        this.$emit(\"getGeneExp\", {});\n        this.$emit(\"currentRangeSelected\", {\n          gene: null,\n          range: null,\n          stats: null,\n          geneData: null\n        });\n        \n        console.log('Genes: 数据集切换完成');\n        \n      } catch (error) {\n        console.error('Genes: 数据集切换失败:', error);\n      }\n    },\n    \n    /**\n     * 自动选择第一个基因 0610007P14Rik\n     */\n    async autoSelectFirstGene() {\n      try {\n        console.log('开始自动选择第一个基因...');\n        \n        // 检查基因列表是否已加载\n        if (!this.geneList || this.geneList.length === 0) {\n          console.warn('基因列表未加载，无法自动选择基因');\n          return;\n        }\n        \n        // 查找第一个基因 0610007P14Rik\n        const firstGene = this.geneList.find(gene => gene.value === '0610007P14Rik');\n        \n        if (!firstGene) {\n          console.warn('未找到基因 0610007P14Rik，尝试使用列表中的第一个基因');\n          if (this.geneList.length > 0) {\n            this.geneSelected = [this.geneList[0].value];\n            console.log(`自动选择了第一个可用基因: ${this.geneList[0].value}`);\n          }\n        } else {\n          this.geneSelected = [firstGene.value];\n          console.log(`成功自动选择基因: ${firstGene.value}`);\n        }\n        \n        // 如果成功选择了基因，调用 selectGene 方法加载数据\n        if (this.geneSelected.length > 0) {\n          await this.selectGene();\n        }\n        \n      } catch (error) {\n        console.error('自动选择第一个基因失败:', error);\n      }\n    },\n    \n    /**\n     * 加载矩阵信息\n     */\n    async loadMatrixInfo() {\n      try {\n        console.log('Genes: 开始加载矩阵信息...');\n        const matrixInfoPath = buildDatasetPath('matrix_info.json');\n        console.log('Genes: 矩阵信息路径:', matrixInfoPath);\n        \n        let geneInfo = await fetch(matrixInfoPath);\n        if (!geneInfo.ok) {\n          throw new Error(`HTTP ${geneInfo.status}: ${geneInfo.statusText}`);\n        }\n        \n        this.geneData = await geneInfo.json();\n        this.geneTotal = this.geneData.total_genes || (this.geneList ? this.geneList.length : 0);\n        \n        console.log('Genes: 矩阵信息加载成功');\n        console.log('Genes: 总基因数:', this.geneTotal);\n        console.log('Genes: 总细胞数:', this.geneData.total_cells);\n        console.log('Genes: 每个chunk的基因数:', this.geneData.genes_per_chunk);\n        \n      } catch (error) {\n        console.error('Genes: 加载基因矩阵信息失败:', error);\n        this.geneTotal = this.geneList ? this.geneList.length : 0;\n        \n        // 设置默认的geneData以防止后续错误\n        this.geneData = {\n          total_genes: this.geneTotal,\n          total_cells: 0,\n          genes_per_chunk: 100 // 默认值\n        };\n      }\n    },\n    clearGenes() {\n      console.log('清除所有基因');\n      this.geneSelected = [];\n      this.currentSelectedGeneInfo = {};\n      this.selectedRange = {};\n      this.selectionStats = {};\n      this.activeGeneForRendering = null; // 清除活跃基因\n      \n      // 发送空的基因数据，恢复默认颜色状态\n      this.$emit(\"getGeneExp\", {});\n      \n      // 清除基因表达范围过滤\n      this.$emit(\"currentRangeSelected\", {\n        gene: null,\n        range: null,\n        stats: null,\n        geneData: null\n      });\n    },\n    addBatchGenes() {\n      if (!this.batchInput.trim()) {\n        this.showBatchInput = false;\n        return;\n      }\n      \n      // 解析逗号分隔的基因名称\n      const geneNames = this.batchInput.split(',').map(name => name.trim()).filter(name => name);\n      \n      // 找到有效的基因名称（存在于基因列表中的）\n      const validGenes = [];\n      for (const geneName of geneNames) {\n        const found = this.geneList.find(gene => gene.value.toLowerCase() === geneName.toLowerCase());\n        if (found && !this.geneSelected.includes(found.value)) {\n          validGenes.push(found.value);\n        }\n      }\n      \n      // 将有效基因添加到选中列表\n      if (validGenes.length > 0) {\n        this.geneSelected = [...this.geneSelected, ...validGenes];\n        // 不直接调用 selectGene()，让 Vue 的 @change 事件处理器自动触发\n        // this.selectGene(); // 移除这行，防止递归调用\n      }\n      \n      // 重置状态\n      this.batchInput = \"\";\n      this.showBatchInput = false;\n    },\n    remove(item) {\n      const index = this.geneSelected.indexOf(item.value);\n      if (index >= 0) {\n        const geneName = this.geneSelected[index];\n        \n        // 删除基因数据\n        delete this.currentSelectedGeneInfo[geneName];\n        // 同时删除选择范围\n        delete this.selectedRange[geneName];\n        delete this.selectionStats[geneName];\n        \n        // 如果删除的是当前活跃基因，需要重新设置活跃基因\n        if (this.activeGeneForRendering === geneName) {\n          // 从剩余基因中选择一个作为新的活跃基因\n          const remainingGenes = this.geneSelected.filter(gene => gene !== geneName);\n          this.activeGeneForRendering = remainingGenes.length > 0 ? remainingGenes[0] : null;\n          \n          console.log(`删除了活跃基因 ${geneName}，新的活跃基因: ${this.activeGeneForRendering}`);\n        }\n        \n        this.geneSelected.splice(index, 1);\n        \n        // 检查是否还有剩余基因\n        if (this.geneSelected.length === 0) {\n          // 没有基因了，清除所有基因相关状态\n          console.log('删除了最后一个基因，清除所有基因状态');\n          this.activeGeneForRendering = null;\n          this.currentSelectedGeneInfo = {};\n          this.selectedRange = {};\n          this.selectionStats = {};\n          \n          // 发送空的基因数据，恢复默认颜色状态\n          this.$emit(\"getGeneExp\", {});\n          \n          // 清除基因表达范围过滤\n          this.$emit(\"currentRangeSelected\", {\n            gene: null,\n            range: null,\n            stats: null,\n            geneData: null\n          });\n        } else {\n          // 还有其他基因，发送当前活跃基因的数据\n          if (this.activeGeneForRendering && this.currentSelectedGeneInfo[this.activeGeneForRendering]) {\n            const activeGeneData = {\n              [this.activeGeneForRendering]: this.currentSelectedGeneInfo[this.activeGeneForRendering]\n            };\n            this.$emit(\"getGeneExp\", activeGeneData);\n        \n            // 发送活跃基因的选择范围\n            if (this.selectedRange[this.activeGeneForRendering] && this.selectionStats[this.activeGeneForRendering]) {\n              this.$emit(\"currentRangeSelected\", {\n                gene: this.activeGeneForRendering,\n                range: this.selectedRange[this.activeGeneForRendering],\n                stats: this.selectionStats[this.activeGeneForRendering],\n                geneData: this.currentSelectedGeneInfo[this.activeGeneForRendering],\n                color: true\n              });\n            }\n          } else {\n            this.$emit(\"getGeneExp\", {});\n          }\n        }\n      }\n    },\n    removeItem(item) {\n      // 处理从面板中删除项的情况\n      const index = this.geneSelected.indexOf(item);\n      if (index >= 0) {\n        // 删除基因数据\n        delete this.currentSelectedGeneInfo[item];\n        // 同时删除选择范围\n        delete this.selectedRange[item];\n        delete this.selectionStats[item];\n        \n        // 如果删除的是当前活跃基因，需要重新设置活跃基因\n        if (this.activeGeneForRendering === item) {\n          // 从剩余基因中选择一个作为新的活跃基因\n          const remainingGenes = this.geneSelected.filter(gene => gene !== item);\n          this.activeGeneForRendering = remainingGenes.length > 0 ? remainingGenes[0] : null;\n          \n          console.log(`删除了活跃基因 ${item}，新的活跃基因: ${this.activeGeneForRendering}`);\n        }\n        \n        this.geneSelected.splice(index, 1);\n        \n        // 检查是否还有剩余基因\n        if (this.geneSelected.length === 0) {\n          // 没有基因了，清除所有基因相关状态\n          console.log('删除了最后一个基因，清除所有基因状态');\n          this.activeGeneForRendering = null;\n          this.currentSelectedGeneInfo = {};\n          this.selectedRange = {};\n          this.selectionStats = {};\n          \n          // 发送空的基因数据，恢复默认颜色状态\n          this.$emit(\"getGeneExp\", {});\n          \n          // 清除基因表达范围过滤\n          this.$emit(\"currentRangeSelected\", {\n            gene: null,\n            range: null,\n            stats: null,\n            geneData: null\n          });\n        } else {\n          // 还有其他基因，发送当前活跃基因的数据\n        if (this.activeGeneForRendering && this.currentSelectedGeneInfo[this.activeGeneForRendering]) {\n          const activeGeneData = {\n            [this.activeGeneForRendering]: this.currentSelectedGeneInfo[this.activeGeneForRendering]\n          };\n          this.$emit(\"getGeneExp\", activeGeneData);\n            \n            // 发送活跃基因的选择范围\n            if (this.selectedRange[this.activeGeneForRendering] && this.selectionStats[this.activeGeneForRendering]) {\n              this.$emit(\"currentRangeSelected\", {\n                gene: this.activeGeneForRendering,\n                range: this.selectedRange[this.activeGeneForRendering],\n                stats: this.selectionStats[this.activeGeneForRendering],\n                geneData: this.currentSelectedGeneInfo[this.activeGeneForRendering],\n                color: true\n              });\n            }\n        } else {\n          this.$emit(\"getGeneExp\", {});\n        }\n        }\n      }\n    },\n    async selectGene(val){\n      // 防止递归调用的保护机制\n      if (this.isUpdating) {\n        console.log('selectGene: 正在更新中，跳过递归调用');\n        return;\n      }\n      \n      // 如果没有选中的基因，直接返回\n      if (!this.geneSelected || this.geneSelected.length === 0) {\n        console.log('selectGene: 没有选中的基因，清空状态');\n        this.currentSelectedGeneInfo = {};\n        this.selectedRange = {};\n        this.selectionStats = {};\n        this.activeGeneForRendering = null;\n        this.$emit(\"getGeneExp\", {});\n        this.$emit(\"currentRangeSelected\", {\n          gene: null,\n          range: null,\n          stats: null,\n          geneData: null\n        });\n        return;\n      }\n      \n      // 设置更新标志，防止递归\n      this.isUpdating = true;\n      \n      try {\n        console.log(`开始加载 ${this.geneSelected.length} 个基因的数据`);\n        \n        let selectedGeneInfo = {};\n        \n        // 获取所有选定基因的chunk索引\n        const chunksToLoad = new Set();\n        const geneIndexMap = new Map();\n        \n        for(let i = 0; i < this.geneSelected.length; i++) {\n          const geneName = this.geneSelected[i];\n          const index = this.geneList.findIndex(item => item.value === geneName);\n          \n          if (index === -1) {\n            console.warn(`基因 ${geneName} 在基因列表中未找到`);\n            continue;\n          }\n          \n          // 确保 geneData 已正确初始化\n          if (!this.geneData || !this.geneData.genes_per_chunk) {\n            console.error('geneData 未正确初始化，无法计算chunk索引');\n            continue;\n          }\n          \n          const chunkIndex = Math.floor(index / this.geneData.genes_per_chunk);\n          const geneIndex = index % this.geneData.genes_per_chunk;\n          \n          console.log(`基因 ${geneName}: 索引=${index}, chunk=${chunkIndex}, geneIndex=${geneIndex}`);\n          \n          chunksToLoad.add(chunkIndex);\n          geneIndexMap.set(geneName, {chunkIndex, geneIndex});\n        }\n        \n        // 批量加载所需的chunk数据\n        const loadPromises = [];\n        for(const chunkIndex of chunksToLoad) {\n          if(!this.chunkCache[chunkIndex]) {\n            console.log(`需要加载chunk ${chunkIndex}`);\n            loadPromises.push(this.loadChunkData(chunkIndex));\n          } else {\n            console.log(`chunk ${chunkIndex} 已在缓存中`);\n          }\n        }\n        \n        if(loadPromises.length > 0) {\n          console.log(`等待加载 ${loadPromises.length} 个chunk`);\n          await Promise.all(loadPromises);\n        }\n        \n        // 从缓存中获取所有基因数据\n        for(let i = 0; i < this.geneSelected.length; i++) {\n          const geneName = this.geneSelected[i];\n          const geneInfo = geneIndexMap.get(geneName);\n          \n          if (!geneInfo) {\n            console.warn(`基因 ${geneName} 的索引信息未找到`);\n            continue;\n          }\n          \n          const {chunkIndex, geneIndex} = geneInfo;\n          \n          if (!this.chunkCache[chunkIndex] || !this.chunkCache[chunkIndex][geneIndex]) {\n            console.warn(`基因 ${geneName} 的数据未找到 (chunk: ${chunkIndex}, index: ${geneIndex})`);\n            continue;\n          }\n          \n          const geneData = this.chunkCache[chunkIndex][geneIndex];\n          selectedGeneInfo[geneName] = geneData;\n          \n          // 添加调试信息\n          console.log(`基因 ${geneName} 数据加载完成: 长度=${geneData.length}, 前5个值=[${geneData.slice(0, 5).join(', ')}]`);\n          \n          // 检查数据的统计信息\n          const nonZeroCount = geneData.filter(val => val > 0).length;\n          const maxVal = Math.max(...geneData);\n          const minVal = Math.min(...geneData.filter(val => val > 0));\n          console.log(`基因 ${geneName} 统计: 非零值=${nonZeroCount}, 最大值=${maxVal.toFixed(3)}, 最小非零值=${minVal.toFixed(3)}`);\n        }\n        \n        this.currentSelectedGeneInfo = selectedGeneInfo;\n        console.log('所有基因数据加载完成:', Object.keys(this.currentSelectedGeneInfo));\n        \n        // 验证基因数据是否不同\n        this.validateGeneDataDifferences();\n        \n        // 如果没有活跃基因，自动设置第一个基因为活跃基因\n        if (!this.activeGeneForRendering && this.geneSelected.length > 0) {\n          this.activeGeneForRendering = this.geneSelected[0];\n          console.log(`自动设置第一个基因 ${this.activeGeneForRendering} 为活跃基因`);\n        }\n        \n        // 发送当前活跃基因的数据，而不是所有基因的数据\n        if (this.activeGeneForRendering && selectedGeneInfo[this.activeGeneForRendering]) {\n          const activeGeneData = {\n            [this.activeGeneForRendering]: selectedGeneInfo[this.activeGeneForRendering]\n          };\n          this.$emit(\"getGeneExp\", activeGeneData);\n        } else {\n          // 如果没有活跃基因，发送所有基因数据（保持向后兼容）\n          this.$emit(\"getGeneExp\", this.currentSelectedGeneInfo);\n        }\n        \n        // 为每个新选择的基因设置默认选择全部范围\n        for(const geneName of this.geneSelected) {\n          if (!this.selectedRange[geneName]) {\n            const range = this.getExpressionRange(geneName);\n            this.selectedRange[geneName] = {\n              start: range.min,\n              end: range.max\n            };\n            \n            // 计算选择范围内的细胞数量\n            this.calculateSelectionStats(geneName);\n          }\n        }\n        \n        // 保存选择范围\n        this.saveSelectedRanges();\n        \n        // 如果有活跃基因且有选择范围，自动发送选择范围信息\n        if (this.activeGeneForRendering && this.selectedRange[this.activeGeneForRendering]) {\n          console.log(`自动发送活跃基因 ${this.activeGeneForRendering} 的默认选择范围`);\n          this.$emit(\"currentRangeSelected\", {\n            gene: this.activeGeneForRendering,\n            range: this.selectedRange[this.activeGeneForRendering],\n            stats: this.selectionStats[this.activeGeneForRendering],\n            geneData: selectedGeneInfo[this.activeGeneForRendering],\n            color: true // 标记为染色模式\n          });\n        }\n        \n        // 强制更新组件以确保直方图正确渲染\n        this.$nextTick(() => {\n          this.$forceUpdate();\n          console.log('强制更新组件完成，直方图应该已重新渲染');\n        });\n        \n      } catch (error) {\n        console.error('selectGene 执行出错:', error);\n      } finally {\n        // 确保在任何情况下都清除更新标志\n        this.isUpdating = false;\n      }\n    },\n    \n    async loadChunkData(chunkIndex) {\n      console.log(`Loading chunk ${chunkIndex}`);\n      const chunkPath = buildDatasetPath(`genes/chunk_${chunkIndex}.bin`);\n      console.log(`Genes: 加载chunk路径: ${chunkPath}`);\n      let response = await fetch(chunkPath);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      let chunkData = await response.arrayBuffer();\n      console.log(chunkData,38666)\n      let dataView = new DataView(chunkData);\n      let allExps = [];\n      const rowLength = this.geneData.total_cells; // 每个一维数组的长度\n      // 将二进制数据转换为二维数组\n      let rowCount = dataView.byteLength / (4 * rowLength); // 计算有多少行\n      \n      for(let i = 0; i < rowCount; i++) {\n        let row = [];\n        for(let j = 0; j < rowLength; j++) {\n          let offset = (i * rowLength + j) * 4; // 每个Float32占用4字节\n          row.push(dataView.getFloat32(offset, true));\n        }\n        allExps.push(row);\n      }\n      \n      // 存入缓存\n      this.chunkCache[chunkIndex] = allExps;\n      return allExps;\n    },\n    \n    async getGeneData(geneName) {\n      let index = this.geneList.findIndex(item=>item.value===geneName);\n      // console.log(index, 180);\n      let chunkIndex = Math.floor(index/this.geneData.genes_per_chunk);\n      // console.log(chunkIndex, 182, this.geneData.genes_per_chunk);\n      let geneIndex = index % this.geneData.genes_per_chunk;\n      \n      // 检查缓存中是否已有数据\n      if(!this.chunkCache[chunkIndex]) {\n        await this.loadChunkData(chunkIndex);\n      }\n      \n      // console.log(Math.max(...this.chunkCache[chunkIndex][geneIndex]), 183);\n      // 从缓存中获取该基因的表达数据\n      // console.log(`Getting expression data for gene ${geneName} at index ${geneIndex}`);\n      return {exps: this.chunkCache[chunkIndex][geneIndex]};\n    },\n    \n    // 生成直方图数据\n    generateHistogramData(geneName) {\n      // 添加调试信息\n      console.log(`生成基因 ${geneName} 的直方图数据`);\n      \n      if (!this.currentSelectedGeneInfo[geneName]) {\n        console.warn(`基因 ${geneName} 的表达数据不存在`);\n        return [];\n      }\n      \n      const expressionData = this.currentSelectedGeneInfo[geneName];\n      console.log(`基因 ${geneName} 的表达数据长度: ${expressionData.length}`);\n      console.log(`基因 ${geneName} 的前10个表达值:`, expressionData.slice(0, 10));\n      \n      // 过滤掉0值和异常值\n      const nonZeroValues = expressionData.filter(val => val > 0);\n      console.log(`基因 ${geneName} 的非零值数量: ${nonZeroValues.length}`);\n      \n      if (nonZeroValues.length === 0) {\n        console.warn(`基因 ${geneName} 没有非零表达值`);\n        return []; // 如果没有非零值，返回空数组\n      }\n      \n      // 获取表达范围（使用与getExpressionRange一致的方法）\n      const range = this.getExpressionRange(geneName);\n      const min = range.min;\n      const max = range.max;\n      console.log(`基因 ${geneName} 的表达范围: min=${min.toFixed(3)}, max=${max.toFixed(3)}`);\n      \n      // 创建柱状图数据\n      const bins = 50; // 柱子数量\n      const binWidth = (max - min) / bins;\n      \n      // 初始化柱状图数据，确保每个柱子有确切的值范围\n      const histogramData = Array(bins).fill(0).map((_, i) => {\n        const binStart = min + i * binWidth;\n        const binEnd = min + (i + 1) * binWidth;\n        return {\n          value: binStart, // 使用区间起始值作为柱子的代表值\n          binStart: binStart,\n          binEnd: binEnd,\n          count: 0,\n          height: 0\n        };\n      });\n      \n      // 统计每个区间的值\n      nonZeroValues.forEach(val => {\n        const binIndex = Math.min(Math.floor((val - min) / binWidth), bins - 1);\n        if (binIndex >= 0) {\n          histogramData[binIndex].count++;\n        }\n      });\n      \n      // 计算柱高\n      const maxCount = Math.max(...histogramData.map(d => d.count));\n      histogramData.forEach(bin => {\n        bin.height = bin.count > 0 ? (bin.count / maxCount) * 90 : 0; // 最高90px\n      });\n      \n      // 添加调试信息\n      const totalCounts = histogramData.reduce((sum, bin) => sum + bin.count, 0);\n      const nonEmptyBins = histogramData.filter(bin => bin.count > 0).length;\n      console.log(`基因 ${geneName} 直方图统计: 总计数=${totalCounts}, 非空柱子=${nonEmptyBins}, 最大计数=${maxCount}`);\n      \n      return histogramData;\n    },\n    \n    // 计算基因的表达百分比\n    getExpressionPercentage(geneName) {\n      if (!this.currentSelectedGeneInfo[geneName]) return \"0.0\";\n      \n      const expressionData = this.currentSelectedGeneInfo[geneName];\n      const nonZeroCount = expressionData.filter(val => val > 0).length;\n      const percentage = (nonZeroCount / expressionData.length) * 100;\n      return percentage.toFixed(1);\n    },\n    \n    // 计算平均表达值\n    getAverageExpression(geneName) {\n      if (!this.currentSelectedGeneInfo[geneName]) return \"\";\n      \n      const expressionData = this.currentSelectedGeneInfo[geneName];\n      const sum = expressionData.reduce((acc, val) => acc + val, 0);\n      const avg = sum / expressionData.length;\n      \n      return avg.toExponential(5);\n    },\n    \n    // 获取基因的表达范围\n    getExpressionRange(geneName) {\n      if (!this.currentSelectedGeneInfo[geneName]) {\n        return { min: 0, max: 0 };\n      }\n      \n      // 直接从基因表达数据中获取范围\n      const expressionData = this.currentSelectedGeneInfo[geneName];\n      // 过滤掉0值和异常值\n      const nonZeroValues = expressionData.filter(val => val > 0);\n      \n      if (nonZeroValues.length === 0) {\n        return { min: 0, max: 1 }; // 防止没有非零值的情况\n      }\n      \n      // 不再使用对数转换，直接使用原始表达值\n      const min = Math.min(...nonZeroValues);\n      const max = Math.max(...nonZeroValues);\n      \n      return { min, max };\n    },\n    \n    // 从像素位置计算表达值\n    calculateExpressionValue(x, svgWidth, geneName) {\n      const range = this.getExpressionRange(geneName);\n      const min = range.min;\n      const max = range.max;\n      \n      // 考虑直方图的实际绘制区域（4%的左边距，96%的右边界）\n      const leftMargin = svgWidth * 0.04; // 4%左边距\n      const rightMargin = svgWidth * 0.04; // 4%右边距\n      const effectiveWidth = svgWidth - leftMargin - rightMargin; // 92%的有效宽度\n      \n      // 调整x位置，减去左边距\n      const adjustedX = Math.max(0, Math.min(x - leftMargin, effectiveWidth));\n      \n      // 将调整后的像素位置归一化到[0,1]范围\n      const normalizedPos = effectiveWidth > 0 ? adjustedX / effectiveWidth : 0;\n      \n      // 转换为表达值\n      return min + normalizedPos * (max - min);\n    },\n    \n    // 选择区域相关方法\n    startSelection(event, geneName) {\n      // 阻止浏览器默认的选择行为\n      event.preventDefault();\n      \n      // 检查是否有基因数据\n      if (!this.currentSelectedGeneInfo[geneName]) return;\n      \n      this.selectionActive = true;\n      this.currentSelectionGene = geneName;\n      \n      // 获取SVG元素相对于视口的位置\n      const svgElement = event.currentTarget;\n      const rect = svgElement.getBoundingClientRect();\n      \n      // 鼠标相对于SVG的位置\n      const x = event.clientX - rect.left;\n      \n      // 保存选择开始位置（相对于SVG）\n      this.selectionStart = { x: x };\n      this.selectionEnd = { x: x };\n      \n      // 初始化选择范围\n      this.selectedRange[geneName] = {\n        start: this.calculateExpressionValue(x, rect.width, geneName),\n        end: this.calculateExpressionValue(x, rect.width, geneName)\n      };\n      \n      // 保存选择范围\n      this.saveSelectedRanges();\n    },\n    \n    updateSelection(event, geneName) {\n      // 阻止浏览器默认的选择行为\n      event.preventDefault();\n      \n      if (!this.selectionActive || this.currentSelectionGene !== geneName) return;\n      \n      // 获取SVG元素相对于视口的位置\n      const svgElement = event.currentTarget;\n      const rect = svgElement.getBoundingClientRect();\n      \n      // 鼠标相对于SVG的位置\n      const x = Math.max(0, Math.min(event.clientX - rect.left, rect.width));\n      \n      // 更新结束位置\n      this.selectionEnd = { x: x };\n      \n      // 计算表达值范围\n      const startVal = this.calculateExpressionValue(this.selectionStart.x, rect.width, geneName);\n      const endVal = this.calculateExpressionValue(x, rect.width, geneName);\n      \n      // 更新选择范围，确保起始值小于结束值\n      this.selectedRange[geneName] = {\n        start: Math.min(startVal, endVal),\n        end: Math.max(startVal, endVal)\n      };\n      \n      // 不需要每次鼠标移动都保存\n      // this.saveSelectedRanges();\n    },\n    \n    endSelection(geneName) {\n      if (!this.selectionActive || this.currentSelectionGene !== geneName) return;\n      \n      this.selectionActive = false;\n      \n      // 如果选择区域太小，取消选择\n      if (Math.abs(this.selectionEnd.x - this.selectionStart.x) < 5) {\n        delete this.selectedRange[geneName];\n        delete this.selectionStats[geneName];\n        this.saveSelectedRanges();\n        \n        // 发送清除范围选择的事件\n        this.$emit(\"currentRangeSelected\", {\n          gene: geneName,\n          range: null,\n          stats: null,\n          geneData: null\n        });\n        return;\n      }\n      \n      // 计算选择区域内的细胞数量\n      this.calculateSelectionStats(geneName);\n      \n      // 改善选择精度，对齐到柱子边界\n      this.improveSelectionAccuracy(geneName);\n      \n      // 获取当前基因的表达数据\n      const geneExpressionData = this.currentSelectedGeneInfo[geneName];\n      \n      // 发送当前基因的选择范围和表达数据\n      this.$emit(\"currentRangeSelected\", {\n        gene: geneName,\n        range: this.selectedRange[geneName],\n        stats: this.selectionStats[geneName],\n        geneData: geneExpressionData, // 添加基因表达数据\n        color: this.geneColor\n      });\n      \n      // 保存选择范围\n      this.saveSelectedRanges();\n      \n      // 触发重绘\n      this.$forceUpdate();\n    },\n    \n    cancelSelection(event) {\n      if (event) {\n        event.preventDefault();\n      }\n      this.selectionActive = false;\n    },\n    \n    // 判断柱状图是否在选择范围内\n    isInSelectionRange(bar, geneName) {\n      const range = this.selectedRange[geneName];\n      if (!range) return false;\n      \n      // 检查范围是否正确设置\n      if (range.start === range.end) return false;\n      \n      // 确保使用正确的范围比较\n      const minVal = Math.min(range.start, range.end);\n      const maxVal = Math.max(range.start, range.end);\n      \n      // 判断柱子的范围是否与选择范围有重叠\n      // 只要柱子的起点或终点在选择范围内，或者柱子完全包含选择范围，就认为该柱子被选中\n      return (bar.binStart <= maxVal && bar.binEnd >= minVal);\n    },\n    \n    // 计算选择区域宽度 - 用于拖动选择时的实时显示\n    getSelectionWidth(geneName) {\n      if (!this.selectionActive || this.currentSelectionGene !== geneName) {\n        return 0;\n      }\n      \n      return Math.abs(this.selectionEnd.x - this.selectionStart.x);\n    },\n    \n    scaledX(index) {\n      return `${4 + (index * 92 / 50)}%`;\n    },\n    \n    // 保存选择范围到本地存储\n    saveSelectedRanges() {\n      try {\n        localStorage.setItem('geneSelectionRanges', JSON.stringify(this.selectedRange));\n        localStorage.setItem('geneSelectionStats', JSON.stringify(this.selectionStats));\n      } catch (error) {\n        console.error('Failed to save selection ranges:', error);\n      }\n    },\n    \n    // 从本地存储加载选择范围\n    loadSavedRanges() {\n      try {\n        const savedRanges = localStorage.getItem('geneSelectionRanges');\n        const savedStats = localStorage.getItem('geneSelectionStats');\n        \n        if (savedRanges) {\n          this.selectedRange = JSON.parse(savedRanges);\n        }\n        \n        if (savedStats) {\n          this.selectionStats = JSON.parse(savedStats);\n        }\n      } catch (error) {\n        console.error('Failed to load selection ranges:', error);\n      }\n    },\n    \n    // 计算选择区域内的细胞数量和占比\n    calculateSelectionStats(geneName) {\n      if (!this.selectedRange[geneName] || !this.currentSelectedGeneInfo[geneName]) return;\n      \n      const range = this.selectedRange[geneName];\n      const expressionData = this.currentSelectedGeneInfo[geneName];\n      \n      // 直接使用原始表达值，不做对数转换\n      \n      // 确保使用正确的范围界限\n      const minRange = Math.min(range.start, range.end);\n      const maxRange = Math.max(range.start, range.end);\n      \n      // 计算在选择范围内的细胞数量，使用略微放宽的比较\n      const cellsInRange = expressionData.filter(val => val >= (minRange - 0.0001) && val <= (maxRange + 0.0001)).length;\n      const totalCells = expressionData.length;\n      const percentage = (cellsInRange / totalCells * 100).toFixed(1);\n      \n      // 保存统计信息\n      this.selectionStats[geneName] = {\n        count: cellsInRange,\n        percentage: percentage\n      };\n    },\n    \n    // 获取选择区域统计信息\n    getSelectionStats(geneName) {\n      return this.selectionStats[geneName];\n    },\n    \n    // 清除特定基因的选择范围\n    clearSelection(geneName) {\n      delete this.selectedRange[geneName];\n      delete this.selectionStats[geneName];\n      this.saveSelectedRanges();\n      \n      // 将更新后的选择范围传递给父组件（空选择）\n      this.$emit(\"currentRangeSelected\", {\n        gene: geneName,\n        range: null,\n        stats: null,\n        geneData: null // 清除基因数据过滤\n      });\n      \n      // 触发重绘\n      this.$forceUpdate();\n    },\n    \n    // 格式化表达值\n    formatExpression(value) {\n      return value.toFixed(2);\n    },\n    \n    // 获取选择范围在SVG中的位置 - 用于选择后的显示\n    getSelectionRangePosition(geneName) {\n      if (!this.selectedRange[geneName]) return { start: 0, width: 0 };\n      \n      const range = this.selectedRange[geneName];\n      const svg = document.getElementById(`histogram-${geneName}`);\n      if (!svg) return { start: 0, width: 0 };\n      \n      const svgWidth = svg.getBoundingClientRect().width;\n      \n      // 使用当前基因的表达范围\n      const exprRange = this.getExpressionRange(geneName);\n      const min = exprRange.min;\n      const max = exprRange.max;\n      const totalRange = max - min;\n      \n      // 如果范围无效，返回默认值\n      if (totalRange <= 0) return { start: 0, width: 0 };\n      \n      // 考虑直方图的实际绘制区域（4%的左边距，92%的有效宽度）\n      const leftMargin = svgWidth * 0.04; // 4%左边距\n      const effectiveWidth = svgWidth * 0.92; // 92%的有效宽度\n      \n      // 将表达值转换为相对于有效区域的位置\n      const startRatio = (range.start - min) / totalRange;\n      const endRatio = (range.end - min) / totalRange;\n      \n      // 转换为SVG中的实际像素位置（加上左边距）\n      const startX = leftMargin + startRatio * effectiveWidth;\n      const endX = leftMargin + endRatio * effectiveWidth;\n      \n      return {\n        start: Math.min(startX, endX),\n        width: Math.max(1, Math.abs(endX - startX))\n      };\n    },\n    \n    // 计算X轴刻度值\n    getAxisTickValue(geneName, position) {\n      const range = this.getExpressionRange(geneName);\n      const min = range.min;\n      const max = range.max;\n      \n      // 根据位置插值计算对应的表达值\n      return min + position * (max - min);\n    },\n    \n    // 将所有选择范围传递给父组件\n    emitAllSelectionRanges() {\n      // 构造选择范围信息\n      const allRanges = {};\n      \n      for (const geneName in this.selectedRange) {\n        if (this.selectedRange[geneName] && this.selectionStats[geneName]) {\n          allRanges[geneName] = {\n            gene: geneName,\n            range: this.selectedRange[geneName],\n            stats: this.selectionStats[geneName]\n          };\n        }\n      }\n      \n      // 发送所有选择范围给父组件\n      this.$emit(\"currentRangeSelected\", allRanges[this.currentSelectionGene]||[]);\n    },\n    \n    // 处理面板点击事件\n    handlePanelClick(geneName,color=false) {\n      this.currentOpenPanel = geneName;\n      this.geneColor=color?color:this.geneColor\n      // 如果该基因有选择范围，发送给父组件\n      if (this.selectedRange[geneName] && this.selectionStats[geneName]) {\n        this.$emit(\"currentRangeSelected\", {\n          gene: geneName,\n          range: this.selectedRange[geneName],\n          stats: this.selectionStats[geneName],\n          geneData: this.currentSelectedGeneInfo[geneName], // 添加基因表达数据\n          color:this.geneColor\n        });\n      }\n    },\n    \n    // 将当前打开面板的选择范围传递给父组件\n    emitCurrentSelectionRange() {\n      if (!this.currentOpenPanel) return;\n      \n      const geneName = this.currentOpenPanel;\n      \n      if (this.selectedRange[geneName] && this.selectionStats[geneName]) {\n        this.$emit(\"currentRangeSelected\", {\n          gene: geneName,\n          range: this.selectedRange[geneName],\n          stats: this.selectionStats[geneName],\n          geneData: this.currentSelectedGeneInfo[geneName] // 添加基因表达数据\n        });\n      }\n    },\n    handleColorClicked(item){\n      this.geneColor=item\n      this.$emit(\"getGeneColor\",this.geneColor)\n    },\n    // 获取柱状图颜色\n    getBarColor(bar, geneName, index) {\n      // 如果在选择范围内，使用不同的颜色\n      if (this.isInSelectionRange(bar, geneName)) {\n        return '#1976D2'; // 选中的颜色\n      }\n      \n      // 如果开启了geneColor（同色系）模式\n      if (this.geneColor) {\n        // 获取表达范围\n        const range = this.getExpressionRange(geneName);\n        const { min, max } = range;\n        const totalRange = max - min;\n        \n        // 计算颜色深度（0-1之间）基于柱子在数据范围中的位置\n        const position = (bar.value - min) / totalRange;\n        \n        // 创建深浅不同但同色系的颜色\n        // 使用蓝色系列 - 从浅到深\n        const intensity = Math.round(160 + position * 90); // 范围从160-250 (浅蓝到深蓝)\n        return `rgb(25, ${intensity}, 210)`;\n      }\n      \n      // 默认颜色\n      return '#E0E0E0';\n    },\n    handleColorIconClick(geneName) {\n      console.log(`切换活跃基因为: ${geneName}`);\n      \n      // 设置当前活跃基因\n      this.activeGeneForRendering = geneName;\n      \n      // 发送单个基因的表达数据给父组件进行渲染\n      if (this.currentSelectedGeneInfo[geneName]) {\n        const singleGeneData = {\n          [geneName]: this.currentSelectedGeneInfo[geneName]\n        };\n        \n        console.log(`发送基因 ${geneName} 的表达数据用于渲染`);\n        this.$emit(\"getGeneExp\", singleGeneData);\n        \n        // 同时发送基因的选择范围信息\n        if (this.selectedRange[geneName] && this.selectionStats[geneName]) {\n          this.$emit(\"currentRangeSelected\", {\n            gene: geneName,\n            range: this.selectedRange[geneName],\n            stats: this.selectionStats[geneName],\n            geneData: this.currentSelectedGeneInfo[geneName], // 添加基因表达数据\n            color: true // 标记为染色模式\n          });\n        }\n      }\n    },\n    /**\n     * 验证基因数据是否不同\n     * 用于调试直方图显示相同的问题\n     */\n    validateGeneDataDifferences() {\n      console.log('=== 验证基因数据差异 ===');\n      const geneNames = Object.keys(this.currentSelectedGeneInfo);\n      \n      if (geneNames.length < 2) {\n        console.log('基因数量少于2个，无法比较差异');\n        return;\n      }\n      \n      for (let i = 0; i < geneNames.length; i++) {\n        for (let j = i + 1; j < geneNames.length; j++) {\n          const gene1 = geneNames[i];\n          const gene2 = geneNames[j];\n          const data1 = this.currentSelectedGeneInfo[gene1];\n          const data2 = this.currentSelectedGeneInfo[gene2];\n          \n          // 比较前10个值\n          const sample1 = data1.slice(0, 10);\n          const sample2 = data2.slice(0, 10);\n          const areSame = JSON.stringify(sample1) === JSON.stringify(sample2);\n          \n          console.log(`比较 ${gene1} vs ${gene2}:`);\n          console.log(`  ${gene1} 前10个值: [${sample1.join(', ')}]`);\n          console.log(`  ${gene2} 前10个值: [${sample2.join(', ')}]`);\n          console.log(`  前10个值是否相同: ${areSame}`);\n          \n          // 比较统计信息\n          const stats1 = this.getGeneStats(gene1);\n          const stats2 = this.getGeneStats(gene2);\n          console.log(`  ${gene1} 统计: ${JSON.stringify(stats1)}`);\n          console.log(`  ${gene2} 统计: ${JSON.stringify(stats2)}`);\n        }\n      }\n      console.log('=== 验证完成 ===');\n    },\n    \n    /**\n     * 获取基因的统计信息\n     */\n    getGeneStats(geneName) {\n      const data = this.currentSelectedGeneInfo[geneName];\n      if (!data) return null;\n      \n      const nonZeroValues = data.filter(val => val > 0);\n      return {\n        total: data.length,\n        nonZero: nonZeroValues.length,\n        min: nonZeroValues.length > 0 ? Math.min(...nonZeroValues).toFixed(3) : 0,\n        max: nonZeroValues.length > 0 ? Math.max(...nonZeroValues).toFixed(3) : 0,\n        avg: nonZeroValues.length > 0 ? (nonZeroValues.reduce((a, b) => a + b, 0) / nonZeroValues.length).toFixed(3) : 0\n      };\n    },\n    \n    /**\n     * 改善直方图选择精度的辅助方法\n     * 确保选择区域与柱子位置精确对齐\n     */\n    improveSelectionAccuracy(geneName) {\n      if (!this.selectedRange[geneName]) return;\n      \n      const range = this.selectedRange[geneName];\n      const histogramData = this.generateHistogramData(geneName);\n      \n      if (!histogramData || histogramData.length === 0) return;\n      \n      // 找到与选择范围最接近的柱子边界\n      let adjustedStart = range.start;\n      let adjustedEnd = range.end;\n      \n      // 寻找最接近选择起点的柱子边界\n      let minStartDiff = Infinity;\n      let minEndDiff = Infinity;\n      \n      histogramData.forEach(bar => {\n        const startDiff = Math.abs(bar.binStart - range.start);\n        const endDiff = Math.abs(bar.binEnd - range.end);\n        \n        if (startDiff < minStartDiff) {\n          minStartDiff = startDiff;\n          adjustedStart = bar.binStart;\n        }\n        \n        if (endDiff < minEndDiff) {\n          minEndDiff = endDiff;\n          adjustedEnd = bar.binEnd;\n        }\n      });\n      \n      // 如果调整幅度不大，应用调整\n      const startAdjustmentRatio = Math.abs(adjustedStart - range.start) / (range.end - range.start);\n      const endAdjustmentRatio = Math.abs(adjustedEnd - range.end) / (range.end - range.start);\n      \n      console.log(`基因 ${geneName} 选择精度调整:`);\n      console.log(`  原始范围: ${range.start.toFixed(3)} - ${range.end.toFixed(3)}`);\n      console.log(`  调整后范围: ${adjustedStart.toFixed(3)} - ${adjustedEnd.toFixed(3)}`);\n      console.log(`  调整比例: 起点=${(startAdjustmentRatio * 100).toFixed(1)}%, 终点=${(endAdjustmentRatio * 100).toFixed(1)}%`);\n      \n      if (startAdjustmentRatio < 0.1 && endAdjustmentRatio < 0.1) {\n        this.selectedRange[geneName] = {\n          start: Math.min(adjustedStart, adjustedEnd),\n          end: Math.max(adjustedStart, adjustedEnd)\n        };\n        \n        console.log(`  应用了精度调整`);\n        \n        // 重新计算统计信息\n        this.calculateSelectionStats(geneName);\n      } else {\n        console.log(`  调整幅度过大，保持原始选择`);\n      }\n    },\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.gene-symbol-btn {\n  display: flex;\n  justify-content: flex-end;\n}\n:deep .v-expansion-panel-header {\n  padding: 16px 0 !important;\n}\n.v-icon__svg {\n  width: 20px;\n  height: 20px;\n  fill: #6c6c6c;\n}\n.gene-symbol-icon {\n  justify-content: flex-end;\n  margin-right: 20px;\n  display: flex;\n  align-items: center;\n}\n\n/* 基因表达直方图样式 */\n.gene-expression-panel {\n  padding: 10px;\n  width: 100%;\n}\n\n.gene-expression-stats {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.expression-histogram {\n  margin-bottom: 10px;\n  width: 100%;\n}\n\n.histogram-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 5px;\n  width: 100%;\n}\n\n.selection-range {\n  font-size: 12px;\n  color: #1976D2;\n  font-weight: bold;\n}\n\n.selection-stats {\n  color: #555;\n  font-weight: normal;\n  margin-left: 4px;\n}\n\n.expression-percentage {\n  font-weight: bold;\n  color: #333;\n}\n\n.histogram-container {\n  width: 100%;\n  height: 120px;\n  position: relative;\n  overflow: visible;\n  user-select: none; /* 禁止文本选择 */\n  -webkit-user-select: none; /* Chrome, Safari, Opera */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* IE 10+ */\n}\n\n.histogram-svg {\n  width: 100%;\n  height: 100%;\n  cursor: crosshair; /* 使用十字光标提示可选择 */\n}\n\n.axis text {\n  font-size: 12px;\n  fill: #666;\n}\n\n.gene-info {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 5px;\n}\n\n.gene-avg-expression {\n  font-family: monospace;\n  color: #333;\n  background-color: #f0f0f0;\n  padding: 2px 5px;\n  border-radius: 3px;\n}\n\n.expression-controls {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n/* 使柱状图适配整个面板宽度 */\n.v-expansion-panel-content :deep .v-expansion-panel-content__wrap {\n  padding: 0 12px;\n}\n\n/* 强化选择区域的视觉效果 */\nrect[fill=\"rgba(66, 133, 244, 0.2)\"] {\n  stroke-dasharray: 2, 1;\n  animation: pulse 2s infinite;\n}\n\n/* 染色图标样式 */\n.color-icon {\n  cursor: pointer;\n  transition: all 0.3s ease;\n  border-radius: 50%;\n  padding: 2px;\n}\n\n.color-icon:hover {\n  background-color: rgba(25, 118, 210, 0.1);\n  transform: scale(1.1);\n}\n\n.color-icon.active-gene {\n  background-color: rgba(25, 118, 210, 0.2);\n  box-shadow: 0 0 8px rgba(25, 118, 210, 0.5);\n}\n\n.color-icon.active-gene .v-icon__svg {\n  fill: #1976D2 !important;\n}\n\n@keyframes pulse {\n  0% {\n    stroke-opacity: 0.5;\n  }\n  50% {\n    stroke-opacity: 1;\n  }\n  100% {\n    stroke-opacity: 0.5;\n  }\n}\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Genes.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Genes.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Genes.vue?vue&type=template&id=569a8cbd&scoped=true\"\nimport script from \"./Genes.vue?vue&type=script&lang=js\"\nexport * from \"./Genes.vue?vue&type=script&lang=js\"\nimport style0 from \"./Genes.vue?vue&type=style&index=0&id=569a8cbd&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"569a8cbd\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('v-row',{staticClass:\"single-cell-graph\",staticStyle:{\"height\":\"100%\"}},[_vm._l((_vm.graphNum),function(i){return _c('v-col',{key:i,staticStyle:{\"height\":\"100%\"},attrs:{\"cols\":_vm.drawer ? 9 : 12 / _vm.graphNum}},[_c('v-progress-linear',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.loading),expression:\"loading\"}],attrs:{\"indeterminate\":\"\",\"color\":\"yellow darken-2\"}}),_c('div',{staticClass:\"graph-brain\"},[_c('GraphControls',{attrs:{\"datasetName\":_vm.datasetName,\"colorBy\":_vm.colorBy,\"filterNum\":_vm.filterNum,\"operateActive\":_vm.operateActive,\"graphNum\":_vm.graphNum},on:{\"changeOperator\":_vm.changeOperator,\"openSelectDrawer\":_vm.openSelectDrawer,\"separateGraph\":_vm.separateGraph,\"deleteSeparateGraph\":_vm.deleteSeparateGraph,\"downloadImage\":_vm.downloadImage}}),_c('v-row',{staticStyle:{\"flex-shrink\":\"0\",\"flex\":\"1\"}},[_c('v-col',{attrs:{\"cols\":\"12\"}},[(_vm.datasetType==='single')?_c('ScatterBrainSingle',{key:_vm.refKey,ref:\"singleChart\",refInFor:true,attrs:{\"operate\":_vm.operateActive,\"typeInfo\":_vm.typeInfo,\"colorData\":_vm.colorData,\"umapData\":_vm.partialData,\"dataRange\":_vm.dataRange,\"colorRange\":_vm.colorRange,\"total\":_vm.total,\"quadTree\":_vm.quadTree,\"hoverVal\":_vm.hoverCategory,\"nodeMap\":_vm.nodeMap,\"sizeData\":_vm.sizeData,\"colorBy\":_vm.colorBy,\"selectedTypes\":_vm.selectedTypes,\"typeClass\":_vm.typeClass,\"typeItem\":_vm.typeItem,\"typeValue\":_vm.typeValue,\"operatorType\":_vm.operatorType,\"filterNum\":_vm.filterNum,\"field\":_vm.field,\"fieldValue\":_vm.fieldValue,\"geneData\":_vm.geneData,\"geneExpRange\":_vm.geneExpRange},on:{\"selectArea\":_vm.selectArea}}):_c('ScatterBrainMultiple',{key:_vm.refKey,ref:\"multipleChart\",refInFor:true,attrs:{\"operate\":_vm.operateActive,\"typeInfo\":_vm.typeInfo,\"colorData\":_vm.colorData,\"umapData\":_vm.partialData,\"dataRange\":_vm.dataRange,\"colorRange\":_vm.colorRange,\"total\":_vm.total,\"quadTree\":_vm.quadTree,\"hoverVal\":_vm.hoverCategory,\"nodeMap\":_vm.nodeMap,\"sizeData\":_vm.sizeData,\"colorBy\":_vm.colorBy,\"selectedTypes\":_vm.selectedTypes,\"typeClass\":_vm.typeClass,\"typeItem\":_vm.typeItem,\"typeValue\":_vm.typeValue,\"operatorType\":_vm.operatorType,\"filterNum\":_vm.filterNum,\"field\":_vm.field,\"fieldValue\":_vm.fieldValue,\"summaryData\":_vm.summaryData},on:{\"selectArea\":_vm.selectArea}})],1)],1)],1)],1)}),(_vm.drawer)?_c('v-col',{staticStyle:{\"height\":\"100vh\",\"border-left\":\"1px solid #eee\"},attrs:{\"cols\":3}},[_c('div',{staticClass:\"drawer-title\"},[_c('h3',[_vm._v(\"Selected Cells\")]),_c('v-icon',{on:{\"click\":_vm.handleCloseDrawer}},[_vm._v(\"mdi-close\")])],1),_c('v-list',{staticStyle:{\"overflow-y\":\"auto\"},attrs:{\"height\":\"30vh\"}},[_c('v-list-item-group',{attrs:{\"color\":\"primary\"},model:{value:(_vm.selectedItem),callback:function ($$v) {_vm.selectedItem=$$v},expression:\"selectedItem\"}},_vm._l((_vm.selectNodes),function(item,index){return _c('v-list-item',{key:index,on:{\"click\":function($event){return _vm.changeCellItem(index)}}},[_c('v-list-item-avatar',[_c('span',{staticClass:\"color-circle\",style:({ backgroundColor: _vm._.get(item, 'key', '#fff') })})]),_c('v-list-item-content',[_c('v-list-item-title',[_vm._v(\" \"+_vm._s(_vm._.get(item, ['value', 0, 'node', _vm.colorBy], ''))+\" \")])],1),_c('v-list-item-action',[_c('span',[_vm._v(_vm._s(_vm._.get(item, [\"value\", \"length\"], \"\")))])])],1)}),1)],1),_c('div',{staticStyle:{\"border-top\":\"2px solid #eee\",\"height\":\"60vh\",\"overflow-y\":\"auto\"}},[_c('div',{staticClass:\"drawer-title ml-2\"},[_c('div',{staticStyle:{\"display\":\"flex\",\"align-items\":\"center\",\"width\":\"60%\"}},[_c('span',{staticClass:\"color-circle\",style:({ backgroundColor: _vm._.get(_vm.selectInfo, 'key', '#fff') })}),_c('span',{staticClass:\"ml-3 text-hidden\",staticStyle:{\"width\":\"50%\"}},[_vm._v(_vm._s(_vm._.get( _vm.selectInfo, [\"value\", 0, \"node\", \"Siletti_modf_SCANVI_L1\"], \"\" )))])]),_c('v-icon',{staticStyle:{\"flex\":\"1\"}},[_vm._v(\"mdi-download\")])],1),_c('virtual-list',{attrs:{\"data-key\":'id',\"data-sources\":_vm._.get(_vm.selectInfo, 'value', []),\"data-component\":_vm.itemComponent,\"keeps\":_vm._.get(_vm.selectInfo, ['value', 'length'], 0)}})],1)],1):_vm._e()],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticStyle:{\"height\":\"100%\"}},[_c('div',{ref:\"scatterBrain\",staticStyle:{\"height\":\"100%\"},attrs:{\"id\":\"canvasContainer\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","class QuadNode {\r\n    constructor(data) {\r\n      this.id = data.id;\r\n      this.boundary = data.boundary; \r\n      this.pointsCount = data.points_count || 0;\r\n      this.hasFile = data.has_file || false;\r\n      this.children = null;\r\n      this.points = null;\r\n      \r\n      // 递归构建子节点\r\n      if (data.children) {\r\n        this.children = {\r\n          nw: data.children.nw ? new QuadNode(data.children.nw) : null,\r\n          ne: data.children.ne ? new QuadNode(data.children.ne) : null,\r\n          sw: data.children.sw ? new QuadNode(data.children.sw) : null,\r\n          se: data.children.se ? new QuadNode(data.children.se) : null\r\n        };\r\n      }\r\n    }\r\n\r\n    // 判断节点是否包含指定点\r\n    containsPoint(x, y) {\r\n      if (!this.boundary) return false;\r\n      const [minX, minY, maxX, maxY] = this.boundary;\r\n      return x >= minX && x <= maxX && y >= minY && y <= maxY;\r\n    }\r\n\r\n    // 计算节点的面积\r\n    getArea() {\r\n      if (!this.boundary) return 0;\r\n      const [minX, minY, maxX, maxY] = this.boundary;\r\n      return (maxX - minX) * (maxY - minY);\r\n    }\r\n\r\n    // 检查节点边界是否与搜索边界相交\r\n    intersectsBounds(searchBounds) {\r\n      if (!this.boundary) return false;\r\n      const [nodeMinX, nodeMinY, nodeMaxX, nodeMaxY] = this.boundary;\r\n      return !(\r\n        nodeMaxX < searchBounds.minX || \r\n        nodeMinX > searchBounds.maxX ||\r\n        nodeMaxY < searchBounds.minY || \r\n        nodeMinY > searchBounds.maxY\r\n      );\r\n    }\r\n  }\r\n  \r\n  class QuadTree {\r\n    constructor(jsonData) {\r\n      if (!jsonData || !jsonData.root) {\r\n        throw new Error('无效的四叉树数据');\r\n      }\r\n      this.blocksCount = jsonData.total_blocks || 0;\r\n      this.root = new QuadNode(jsonData.root);\r\n      this.nodeCache = new Map(); // 添加节点缓存\r\n      this.cacheLimit = 1000; // 设置缓存大小限制\r\n      \r\n      // 初始化搜索性能追踪\r\n      this.stats = {\r\n        cacheHits: 0,\r\n        cacheMisses: 0,\r\n        totalSearches: 0\r\n      };\r\n    }\r\n  \r\n    // 计算节点的面积\r\n    getNodeArea(node) {\r\n      return node ? node.getArea() : 0;\r\n    }\r\n\r\n    // 查找包含指定点的最小节点\r\n    findNodeByPoint(x, y) {\r\n      this.stats.totalSearches++;\r\n      \r\n      // 缓存查找，提高性能\r\n      const cacheKey = `point_${x.toFixed(3)}_${y.toFixed(3)}`;\r\n      if (this.nodeCache.has(cacheKey)) {\r\n        this.stats.cacheHits++;\r\n        return this.nodeCache.get(cacheKey);\r\n      }\r\n      \r\n      this.stats.cacheMisses++;\r\n      const result = this._findNodeByPointInternal(this.root, x, y);\r\n      \r\n      // 缓存结果，避免缓存过大\r\n      if (this.nodeCache.size >= this.cacheLimit) {\r\n        // 简单的LRU缓存策略：删除最早添加的项\r\n        const firstKey = this.nodeCache.keys().next().value;\r\n        this.nodeCache.delete(firstKey);\r\n      }\r\n      this.nodeCache.set(cacheKey, result);\r\n      return result;\r\n    }\r\n    \r\n    // 内部递归实现\r\n    _findNodeByPointInternal(node, x, y, depth = 0) {\r\n      if (!node || !node.containsPoint(x, y)) return null;\r\n\r\n      // 如果是叶子节点或没有子节点\r\n      if (!node.children) {\r\n        return node;\r\n      }\r\n      \r\n      // 尝试在子节点中寻找\r\n      let smallestNode = null;\r\n      let smallestArea = Infinity;\r\n      \r\n      for (const child of Object.values(node.children)) {\r\n        if (!child || !child.containsPoint(x, y)) continue;\r\n        \r\n        const result = this._findNodeByPointInternal(child, x, y, depth + 1);\r\n        if (result) {\r\n          const area = this.getNodeArea(result);\r\n          if (!smallestNode || area < smallestArea) {\r\n            smallestNode = result;\r\n            smallestArea = area;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // 如果在小区域没找到数据，返回当前节点\r\n      return (smallestNode && smallestNode.pointsCount > 0) ? smallestNode : node;\r\n    }\r\n\r\n    // 批量查询多个点，返回点到节点的映射\r\n    findMultiplePoints(points) {\r\n      const results = new Map();\r\n      for (const point of points) {\r\n        results.set(point, this.findNodeByPoint(point[0], point[1]));\r\n      }\r\n      return results;\r\n    }\r\n\r\n    // 查找与指定范围相交的所有节点\r\n    findNodesInRange(node, searchBounds) {\r\n      if (!node) return [];\r\n      \r\n      // 如果节点边界与搜索边界不相交，直接返回空数组\r\n      if (!node.intersectsBounds(searchBounds)) {\r\n        return [];\r\n      }\r\n      \r\n      let nodes = [];\r\n      \r\n      // 收集有数据文件的节点\r\n      if (node.hasFile) {\r\n        nodes.push(node);\r\n      }\r\n\r\n      // 递归搜索子节点\r\n      if (node.children) {\r\n        for (const child of Object.values(node.children)) {\r\n          if (child) {\r\n            // 使用 push(...) 代替 concat 以提高性能\r\n            nodes.push(...this.findNodesInRange(child, searchBounds));\r\n          }\r\n        }\r\n      }\r\n      \r\n      return nodes;\r\n    }\r\n\r\n    // 获取性能统计信息\r\n    getPerformanceStats() {\r\n      const cacheHitRate = this.stats.totalSearches > 0 \r\n        ? (this.stats.cacheHits / this.stats.totalSearches * 100).toFixed(2) \r\n        : 0;\r\n      \r\n      return {\r\n        ...this.stats,\r\n        cacheHitRate: `${cacheHitRate}%`,\r\n        cacheSize: this.nodeCache.size\r\n      };\r\n    }\r\n\r\n    // 清除缓存\r\n    clearCache() {\r\n      this.nodeCache.clear();\r\n      // 重置统计信息\r\n      this.stats = {\r\n        cacheHits: 0,\r\n        cacheMisses: 0,\r\n        totalSearches: 0\r\n      };\r\n    }\r\n  }\r\n  export {QuadNode,QuadTree}","/**\n * ScatterRenderer.js\n * 用于管理和处理WebGL散点图渲染的类\n */\n\nimport createREGL from \"regl\";\nimport { mat4 } from \"gl-matrix\";\nimport { QuadTree } from \"./quadTree.js\";\nimport { storeMapData, getMapData, resetDatabase, clearDatasetCache } from \"./indexDB\";\nimport { perfTracker, perfWatcher, fpsCounter } from \"./performance\";\nimport { createCoordinateTransformer, cleanupWebGLResources } from \"./webglHelpers\";\nimport { generateVertexShader, generateFragmentShader, generateSelectionBoxVertexShader, generateSelectionBoxFragmentShader, generateMaskLayerFragmentShader } from \"./shaderFactory\";\nimport { getColorFromValue } from \"../utils/tool.js\";\nimport webgl2 from \"./regl-webgl2-compat\";\nimport { dataLoader } from \"./dataLoader\";\nimport { buildDatasetPath, getDataset } from \"../api/config\";\n\nexport class ScatterRenderer {\n  constructor(container, options = {}) {\n    this.container = container;\n    this.options = {\n      pointSize: 2.0, // 减小默认点大小从3.0到2.0\n      defaultZoom: 1,\n      defaultOffset: [0, 0],\n      antialiasing: true,  // 开启抗锯齿\n      responderActive: true, // 启用交互响应\n      selectionEnabled: true, // 是否启用选区功能\n      hoverThrottleTime: 50, // 悬停检测的节流时间（毫秒）\n      highlightSize: 1.3, // 减小高亮点的大小倍数从1.5到1.3\n      ...options\n    };\n    \n    // 状态变量\n    this.state = {\n      zoom: this.options.defaultZoom,\n      offsetX: this.options.defaultOffset[0],\n      offsetY: this.options.defaultOffset[1],\n      isPanning: false,\n      isSelecting: false,\n      selectionMode: false, // 新增：是否处于选择模式\n      selectionStart: null,\n      selectionEnd: null,\n      selectionVisible: false, // 新增：是否显示选区框\n      selectedIndices: [],\n      hoverCategory: -1,\n      isZooming: false,\n      targetZoom: this.options.defaultZoom,\n      velocity: { x: 0, y: 0 },\n      inertiaEnabled: true,\n      lastMousePosition: null,\n      lastTime: 0,\n      isChunkLoading: false,\n      renderPending: false,\n      lastRenderTime: 0,\n      renderInterval: 16, // 约60fps\n      animationFrameId: null,\n      viewportRatio: 1, // 用于适配渲染分辨率\n      isDirty: true,  // 标记是否需要重新渲染\n      selectionStartData: null,\n      selectionEndData: null,\n      lastHoverTime: 0, // 上次悬停检测的时间\n      highlightAttributeName: null, // 高亮属性名称\n      highlightAttributeValues: [], // 修改：高亮属性值数组，支持多个值的并集\n      highlightFilter: null, // 高亮过滤数据\n      isTransitioning: false, // 新增：是否处于过渡状态\n      transitionTimer: null, // 新增：过渡状态计时器\n      isMouseInListArea: false, // 鼠标是否在列表区域内\n      hoverAttributeName: null, // 新增：当前悬停属性名称\n      hoverValueIndex: -1, // 新增：当前悬停属性值索引\n      highlightByAttribute: false, // 新增：是否通过其他属性高亮\n      isCheckHighlight: false, // 标记是否是勾选高亮\n      // 新增：多属性交集高亮状态\n      multiAttributeHighlight: {\n        enabled: false, // 是否启用多属性交集高亮\n        attributes: new Map(), // 存储多个属性的勾选状态 Map<attributeName, valueIndices[]>\n        isCheckHighlight: false // 是否是勾选高亮模式\n      }\n    };\n    \n    // 渲染资源\n    this.resources = {\n      canvas: null,\n      regl: null,\n      drawScatter: null,\n      positionBuffer: null,\n      geneBuffer: null,\n      vertexIdBuffer: null,\n      filterTexture: null,\n      textureSize: [0, 0],\n      colorTexture: null,\n      highlightTexture: null,\n      hoverTexture: null,\n      geneColorTexture: null\n    };\n    \n    // 数据相关\n    this.data = {\n      dataRange: {},\n      colorIndex: 0,\n      textureIndex: 0,\n      treeMap: new Map(),\n      total: 0,\n      count: 0,\n      quadTree: null,\n      field: [],\n      filterNum: 0,\n      nodeIndices: new Map(),\n      geneData: null,\n      geneExpressionRange: null\n    };\n    \n    // 事件回调\n    this.callbacks = {\n      onDataLoaded: null,\n      onPointSelected: null,\n      onPointHovered: null\n    };\n    \n    // 绑定方法到实例\n    this.renderFrame = this.renderFrame.bind(this);\n    \n    // 创建节流版本的悬停检测函数\n    this.throttledHoverPoint = this.throttle(this.hoverPoint.bind(this), this.options.hoverThrottleTime);\n  }\n  \n  /**\n   * 创建节流函数\n   * @param {Function} func - 要节流的函数\n   * @param {number} limit - 节流时间间隔（毫秒）\n   * @returns {Function} 节流后的函数\n   */\n  throttle(func, limit) {\n    return async (...args) => {\n      const now = Date.now();\n      if (now - this.state.lastHoverTime >= limit) {\n        this.state.lastHoverTime = now;\n        return await func(...args);\n      }\n    };\n  }\n  \n  /**\n   * 初始化渲染环境\n   */\n  async initialize() {\n    try {\n      perfTracker.startMark('initializeRenderer');\n      \n      // 创建画布\n      const canvas = document.createElement(\"canvas\");\n      this.resources.canvas = canvas;\n      this.container.appendChild(canvas);\n      \n      // 设置画布尺寸\n      const pixelRatio = window.devicePixelRatio || 1;\n      this.state.viewportRatio = pixelRatio;\n      canvas.width = this.container.offsetWidth * pixelRatio;\n      canvas.height = this.container.offsetHeight * pixelRatio;\n      canvas.style.width = '100%';\n      canvas.style.height = '100%';\n      \n      // 创建REGL上下文\n      const requiredExtensions = [\n        \"OES_texture_float\",\n        \"EXT_color_buffer_float\", \n        \"OES_texture_float_linear\",\n        \"OES_standard_derivatives\" // 用于抗锯齿\n      ];\n      \n      // 使用regl-webgl2-compat确保兼容性\n      this.resources.regl = webgl2.overrideContextType(() =>\n        createREGL({\n          canvas,\n          extensions: requiredExtensions,\n          attributes: { \n            alpha: true,\n            antialias: this.options.antialiasing,\n            depth: true,\n            preserveDrawingBuffer: true\n          },\n          onDone: (err) => {\n            if (err) {\n              console.error(\"REGL初始化失败:\", err);\n              return;\n            }\n            console.log(\"REGL初始化成功\");\n          }\n        })\n      );\n      \n      // 设置事件监听器\n      this.setupEventListeners();\n      \n      // 初始化过滤纹理\n      this.resources.filterTexture = this.resources.regl.texture({\n        width: 1000,\n        height: 1,\n        format: \"rgba\",\n        type: \"float32\",\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrapS: \"clamp\",\n        wrapT: \"clamp\"\n      });\n      \n      // 启动渲染循环\n      this.startRenderLoop();\n      \n      const duration = perfTracker.endMark('initializeRenderer');\n      console.log(`渲染器初始化完成，耗时: ${duration.toFixed(2)}ms`);\n      \n      return true;\n    } catch (error) {\n      console.error(\"初始化渲染器失败:\", error);\n      this.handleError(\"初始化渲染器时\", error);\n      return false;\n    }\n  }\n  \n  /**\n   * 设置事件监听器\n   */\n  setupEventListeners() {\n    const canvas = this.resources.canvas;\n    \n    // 滚轮缩放 - 移除选区模式下的限制，允许在选区模式下缩放\n    canvas.addEventListener(\"wheel\", (event) => {\n      event.preventDefault();\n      // 允许在任何模式下缩放\n      this.smoothZoom(event.deltaY);\n    });\n    \n    // 根据操作模式（平移或选择）设置相应的事件\n    this.setPanningMode();\n    \n    // 监听窗口大小变化\n    window.addEventListener(\"resize\", this.handleResize.bind(this));\n    \n    // 使用ResizeObserver监听容器尺寸变化\n    if (window.ResizeObserver) {\n      // 创建一个更强的防抖函数，防止ResizeObserver循环\n      const debouncedResize = this.createDebouncedResize();\n      \n      this.resizeObserver = new ResizeObserver((entries) => {\n        // 使用try-catch包装，防止ResizeObserver循环错误\n        try {\n          for (const entry of entries) {\n            if (entry.target === this.container) {\n              console.log('ResizeObserver: 容器尺寸变化');\n              debouncedResize();\n              break;\n            }\n          }\n        } catch (error) {\n          // 忽略ResizeObserver循环错误，这是浏览器的已知问题\n          if (error.message && error.message.includes('ResizeObserver loop')) {\n            console.warn('ResizeObserver循环检测，已忽略:', error.message);\n          } else {\n            console.error('ResizeObserver错误:', error);\n          }\n        }\n      });\n      \n      this.resizeObserver.observe(this.container);\n      console.log('ResizeObserver已设置，监听容器尺寸变化');\n    } else {\n      console.warn('ResizeObserver不可用，仅使用window resize事件');\n    }\n  }\n  \n  /**\n   * 创建防抖的resize处理函数\n   * 使用更强的防抖机制，防止在DOM快速变化时出现问题\n   */\n  createDebouncedResize() {\n    let timeoutId = null;\n    let isProcessing = false;\n    \n    return () => {\n      // 如果正在处理中，跳过\n      if (isProcessing) {\n        return;\n      }\n      \n      // 清除之前的定时器\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      // 设置新的定时器\n      timeoutId = setTimeout(() => {\n        // 检查组件是否仍然存在\n        if (!this.container || !this.resources.canvas || !this.resources.regl) {\n          console.warn('组件已销毁，跳过resize处理');\n          return;\n        }\n        \n        isProcessing = true;\n        \n        try {\n          this.handleResize();\n        } catch (error) {\n          console.error('处理resize时出错:', error);\n        } finally {\n          isProcessing = false;\n        }\n      }, 50); // 增加延迟时间，确保DOM稳定\n    };\n  }\n  \n  /**\n   * 加载数据并准备渲染\n   * @param {Object} options - 加载选项\n   */\n  async loadData(options = {}) {\n    try {\n      perfTracker.startMark('loadData');\n      \n      const {\n        quadTreePath = buildDatasetPath('quad_tree.json'),\n        total = 100000,\n        field = [],\n        colorBy = '',\n        colorIndex = 0\n      } = options;\n      \n      // 验证total参数\n      if (typeof total !== 'number' || total <= 0) {\n        console.error(`无效的total参数: ${total}，必须为正数`);\n        throw new Error(`无效的total参数: ${total}，必须为正数`);\n      }\n      \n      // 验证field参数\n      if (!Array.isArray(field) || field.length === 0) {\n        console.warn('字段列表为空或不是数组，将使用默认空数组');\n        this.data.field = [];\n      } else {\n        this.data.field = field;\n      }\n      \n      // 验证colorIndex参数\n      if (typeof colorIndex !== 'number' || colorIndex < 0 || (field.length > 0 && colorIndex >= field.length)) {\n        console.warn(`无效的colorIndex: ${colorIndex}，将使用默认值0`);\n        this.data.colorIndex = 0;\n      } else {\n        this.data.colorIndex = colorIndex;\n      }\n      \n      this.data.total = total;\n      \n      console.log(`开始加载数据: total=${total}, field.length=${field.length}, colorIndex=${this.data.colorIndex}`);\n      \n      // 1. 加载四叉树结构\n      console.log(`从 ${quadTreePath} 加载四叉树`);\n      const treeRes = await dataLoader.loadQuadTree(quadTreePath);\n      const quadTree = new QuadTree(treeRes);\n      \n      this.data.quadTree = quadTree;\n      this.data.dataRange = {\n        min_x: quadTree.root.boundary[0],\n        max_x: quadTree.root.boundary[2],\n        min_y: quadTree.root.boundary[1],\n        max_y: quadTree.root.boundary[3]\n      };\n      \n      this.data.treeMap.set(\"tree\", quadTree);\n      \n      // 2. 创建基因缓冲区 - 确保大小为正数\n      const geneBufferSize = Math.max(1, total * 4 * 2);\n      this.resources.geneBuffer = this.resources.regl.buffer(\n        new Float32Array(geneBufferSize).fill(-1)\n      );\n      \n      // 3. 创建过滤纹理\n      this.resources.filterTexture = this.resources.regl.texture({\n        width: 100,\n        height: 1,\n        format: \"rgba\",\n        type: \"float32\",\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrap: \"clamp\",\n      });\n      \n      // 4. 加载四叉树数据块\n      await this.loadTreeChunks(quadTree, total);\n      \n      // 5. 回调通知数据加载完成\n      if (this.callbacks.onDataLoaded) {\n        this.callbacks.onDataLoaded({\n          total: this.data.count,\n          dataRange: this.data.dataRange\n        });\n      }\n      \n      const duration = perfTracker.endMark('loadData');\n      console.log(`数据加载完成，耗时: ${duration.toFixed(2)}ms，加载了${this.data.count}个点`);\n      \n      return true;\n    } catch (error) {\n      console.error(\"加载数据失败:\", error);\n      this.handleError(\"加载数据时\", error);\n      return false;\n    }\n  }\n  \n  /**\n   * 加载四叉树数据块\n   * @param {Object} quadTree - 四叉树实例\n   * @param {number} total - 总点数（预估值）\n   */\n  async loadTreeChunks(quadTree, total = 100000) {\n    perfTracker.startMark('loadTreeChunks');\n    \n    try {\n      this.state.isChunkLoading = true;\n      \n      // 🔥 动态buffer管理：根据当前数据集实际大小分配buffer\n      console.log(`开始加载四叉树数据块，预估总点数: ${total}`);\n      \n      // 1. 预留20%的额外空间以处理预估误差和未来扩展\n      const bufferCapacity = Math.ceil(total * 1.2);\n      const bufferSize = bufferCapacity * 4 * 2; // 每个点2个坐标，每个坐标4字节\n      \n      console.log(`创建位置缓冲区，容量: ${bufferCapacity} 个点 (${(bufferSize / 1024 / 1024).toFixed(2)} MB)`);\n      \n      // 创建位置缓冲区\n      this.resources.positionBuffer = this.resources.regl.buffer({\n        length: bufferSize,\n        type: \"float\",\n        usage: \"dynamic\",\n      });\n      \n      // 记录当前buffer容量，用于后续的动态调整判断\n      this.resources.positionBufferCapacity = bufferCapacity;\n      \n      // 2. 计算纹理大小 - 也需要预留额外空间\n      const MAX_TEXTURE_SIZE = this.resources.regl._gl.getParameter(\n        this.resources.regl._gl.MAX_TEXTURE_SIZE\n      );\n      const textureCapacity = bufferCapacity; // 纹理容量与buffer容量保持一致\n      const textureWidth = Math.min(MAX_TEXTURE_SIZE, Math.ceil(Math.sqrt(textureCapacity)));\n      const textureHeight = Math.ceil(textureCapacity / textureWidth);\n\n      this.resources.textureSize = [textureWidth, textureHeight];\n      this.resources.textureCapacity = textureWidth * textureHeight;\n      \n      console.log(`纹理初始化: 容量=${this.resources.textureCapacity}, 尺寸=${textureWidth}x${textureHeight}`);\n      \n      // 3. 创建顶点ID缓冲区 - 使用实际容量\n      this.resources.vertexIdBuffer = new Float32Array(\n        Array.from({ length: bufferCapacity }, (_, i) => i)\n      );\n      \n      // 4. 创建单一的颜色纹理\n      console.log(`创建单一的颜色纹理，用于存储当前选择的属性`);\n      \n      // 初始化空的颜色纹理\n      this.resources.colorTexture = this.resources.regl.texture({\n        shape: [textureWidth, textureHeight],\n        format: \"rgba\",\n        type: \"float32\",\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrap: \"clamp\",\n        data: new Float32Array(textureWidth * textureHeight * 4).fill(0),\n      });\n      \n      // 5. 收集待加载的节点ID\n      const nodeIds = [];\n      const collectNodeIds = (node) => {\n        if (node.hasFile) {\n          nodeIds.push(node.id);\n        }\n        if (node.children) {\n          Object.values(node.children)\n            .filter((child) => child !== null)\n            .forEach(collectNodeIds);\n        }\n      };\n      \n      collectNodeIds(quadTree.root);\n      console.log(`需要加载${nodeIds.length}个数据块的坐标数据`);\n      \n      // 6. 加载当前选中的属性数据（不是所有属性）\n      if (this.data.colorIndex >= 0 && this.data.colorIndex < this.data.field.length) {\n        // 只加载当前用于着色的属性\n        const currentField = this.data.field[this.data.colorIndex];\n        console.log(`加载当前选中的属性数据: ${currentField}`);\n        await this.loadCellAttribute(currentField);\n      }\n      \n      // 7. 广度优先遍历加载坐标数据块\n      const queue = [quadTree.root];\n      let count = 0;\n      let renderedChunkCount = 0;\n      const chunkRenderInterval = 3; // 每加载3个数据块渲染一次\n      \n      // 用于跟踪节点的全局索引范围\n      this.data.nodeIndices = new Map();\n      \n      // 准备进度更新回调\n      const updateProgress = (progress) => {\n        // 可以在这里更新UI进度条\n        console.log(`坐标数据加载进度: ${(progress * 100).toFixed(1)}%`);\n      };\n\n      // 处理所有节点\n      while (queue.length > 0) {\n        const node = queue.shift();\n        \n        try {\n          if (node.hasFile) {\n            perfTracker.startMark(`processChunk:${node.id}`);\n            \n            // 加载坐标数据（二进制格式）\n            const { points, count: chunkPointCount } = await dataLoader.loadCoordinateBlock(node.id);\n            \n            if (chunkPointCount > 0) {\n              // 记录当前节点的点数量和全局起始索引\n              this.data.nodeIndices.set(node.id, {\n                startIndex: count,\n                count: chunkPointCount\n              });\n              \n              // 创建二维坐标数组\n              let chunkPoints = [];\n              for (let i = 0; i < points.length; i += 2) {\n                chunkPoints.push([points[i], points[i + 1]]);\n              }\n\n              // 🔥 动态buffer扩展检查：如果即将超出buffer容量，则扩展buffer\n              const newTotalCount = count + chunkPointCount;\n              if (newTotalCount > this.resources.positionBufferCapacity) {\n                console.warn(`检测到数据量超出预期，当前: ${newTotalCount}, 容量: ${this.resources.positionBufferCapacity}`);\n                await this.expandBuffers(newTotalCount);\n              }\n              \n              // 更新位置缓冲区\n              this.resources.positionBuffer.subdata(chunkPoints, count * 2 * 4);\n              \n              // 仅更新当前活跃属性的纹理\n              if (this.data.colorIndex >= 0) {\n                await this.updateTextureForAttribute(\n                  this.data.colorIndex,\n                  count,\n                  chunkPointCount,\n                  node.id\n                );\n              }\n\n              count += chunkPointCount;\n              renderedChunkCount++;\n              \n              // 周期性渲染更新，提高用户体验\n              if (renderedChunkCount % chunkRenderInterval === 0 || queue.length === 0) {\n                updateProgress(count / total);\n                \n                if (!this.resources.drawScatter) {\n                  this.createDrawCommand();\n                } else {\n                  this.scheduleRender(true);\n                }\n              }\n            }\n            \n            perfTracker.endMark(`processChunk:${node.id}`);\n          }\n          \n          // 添加子节点到队列\n          if (node.children) {\n            Object.values(node.children)\n              .filter((child) => child !== null)\n              .forEach((child) => queue.push(child));\n          }\n        } catch (error) {\n          console.error(`加载节点 ${node.id} 失败:`, error);\n        }\n      }\n      \n      this.data.count = count;\n      this.state.isChunkLoading = false;\n      \n      // 加载完成后进行最终渲染\n      if (this.resources.drawScatter) {\n        this.scheduleRender(true);\n      } else {\n        this.createDrawCommand();\n      }\n      \n      const loadTime = perfTracker.endMark('loadTreeChunks');\n      perfWatcher.checkLoadTime(loadTime);\n      \n      return true;\n    } catch (error) {\n      console.error(\"加载四叉树数据块失败:\", error);\n      this.state.isChunkLoading = false;\n      return false;\n    }\n  }\n  \n  /**\n   * 动态扩展WebGL缓冲区和纹理\n   * @param {number} requiredCapacity - 需要的最小容量\n   */\n  async expandBuffers(requiredCapacity) {\n    try {\n      // 计算新的容量，增加30%的额外空间以减少频繁扩展\n      const newCapacity = Math.ceil(requiredCapacity * 1.3);\n      const newBufferSize = newCapacity * 4 * 2; // 每个点2个坐标，每个坐标4字节\n      \n      console.log(`扩展缓冲区: 从 ${this.resources.positionBufferCapacity} 扩展到 ${newCapacity} 个点`);\n      \n      // 1. 保存现有的位置数据\n      const oldBuffer = this.resources.positionBuffer;\n      const oldCapacity = this.resources.positionBufferCapacity;\n      \n      // 2. 创建新的位置缓冲区\n      this.resources.positionBuffer = this.resources.regl.buffer({\n        length: newBufferSize,\n        type: \"float\",\n        usage: \"dynamic\",\n      });\n      \n      // 3. 如果有旧数据，复制到新缓冲区\n      if (oldBuffer && this.data.count > 0) {\n        // 读取旧缓冲区数据并复制到新缓冲区\n        // 注意：这里需要重新加载数据，因为regl不支持直接从buffer读取数据\n        console.log('需要重新加载已有数据到扩展后的缓冲区');\n        // 标记需要重新加载数据\n        this.state.needsDataReload = true;\n      }\n      \n      // 4. 更新容量记录\n      this.resources.positionBufferCapacity = newCapacity;\n      \n      // 5. 扩展纹理\n      const MAX_TEXTURE_SIZE = this.resources.regl._gl.getParameter(\n        this.resources.regl._gl.MAX_TEXTURE_SIZE\n      );\n      const newTextureWidth = Math.min(MAX_TEXTURE_SIZE, Math.ceil(Math.sqrt(newCapacity)));\n      const newTextureHeight = Math.ceil(newCapacity / newTextureWidth);\n      \n      // 保存旧纹理数据\n      const oldTextureSize = this.resources.textureSize;\n      const oldColorTexture = this.resources.colorTexture;\n      \n      // 创建新的颜色纹理\n      this.resources.textureSize = [newTextureWidth, newTextureHeight];\n      this.resources.textureCapacity = newTextureWidth * newTextureHeight;\n      \n      this.resources.colorTexture = this.resources.regl.texture({\n        shape: [newTextureWidth, newTextureHeight],\n        format: \"rgba\",\n        type: \"float32\",\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrap: \"clamp\",\n        data: new Float32Array(newTextureWidth * newTextureHeight * 4).fill(0),\n      });\n      \n      // 6. 更新顶点ID缓冲区\n      this.resources.vertexIdBuffer = new Float32Array(\n        Array.from({ length: newCapacity }, (_, i) => i)\n      );\n      \n      // 7. 清理旧资源\n      if (oldBuffer) {\n        oldBuffer.destroy();\n      }\n      if (oldColorTexture) {\n        oldColorTexture.destroy();\n      }\n      \n      console.log(`缓冲区扩展完成: 新容量=${newCapacity}, 新纹理尺寸=${newTextureWidth}x${newTextureHeight}`);\n      \n    } catch (error) {\n      console.error('扩展缓冲区失败:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * 数据集切换时清理和重置资源\n   * 确保新数据集能够正确分配buffer大小\n   * @param {string} oldDataset - 旧数据集名称（用于清理缓存）\n   */\n  async resetForNewDataset(oldDataset = null) {\n    try {\n      console.log('重置渲染器以准备加载新数据集...');\n      \n      // 🔥 0. 清理旧数据集的缓存数据，防止数据污染\n      if (oldDataset) {\n        try {\n          console.log(`清理旧数据集 ${oldDataset} 的缓存数据...`);\n          await clearDatasetCache(oldDataset);\n        } catch (cacheError) {\n          console.warn('清理缓存时出错，但继续重置过程:', cacheError);\n        }\n      }\n      \n      // 1. 清理现有的WebGL资源\n      if (this.resources.positionBuffer) {\n        this.resources.positionBuffer.destroy();\n        this.resources.positionBuffer = null;\n      }\n      \n      if (this.resources.colorTexture) {\n        this.resources.colorTexture.destroy();\n        this.resources.colorTexture = null;\n      }\n      \n      if (this.resources.highlightTexture) {\n        this.resources.highlightTexture.destroy();\n        this.resources.highlightTexture = null;\n      }\n      \n      if (this.resources.hoverTexture) {\n        this.resources.hoverTexture.destroy();\n        this.resources.hoverTexture = null;\n      }\n      \n      if (this.resources.geneColorTexture) {\n        this.resources.geneColorTexture.destroy();\n        this.resources.geneColorTexture = null;\n      }\n      \n      // 2. 重置容量和大小记录\n      this.resources.positionBufferCapacity = 0;\n      this.resources.textureCapacity = 0;\n      this.resources.textureSize = [0, 0];\n      this.resources.vertexIdBuffer = null;\n      \n      // 3. 重置数据状态\n      this.data.count = 0;\n      this.data.total = 0;\n      this.data.nodeIndices.clear();\n      this.data.quadTree = null;\n      this.data.treeMap.clear();\n      \n      // 4. 重置渲染状态\n      this.state.isChunkLoading = false;\n      this.state.needsDataReload = false;\n      this.state.hasValidData = false;\n      \n      console.log('渲染器重置完成，准备接受新数据集');\n      \n    } catch (error) {\n      console.error('重置渲染器时发生错误:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * 生成数据集特定的缓存键\n   * @param {string} baseKey - 基础缓存键\n   * @returns {string} - 包含数据集信息的缓存键\n   */\n  createDatasetCacheKey(baseKey) {\n    const currentDataset = getDataset();\n    if (!currentDataset) {\n      console.warn('无法获取当前数据集，使用默认缓存键');\n      return baseKey;\n    }\n    return `${currentDataset}_${baseKey}`;\n  }\n  \n  /**\n   * 安全地从IndexedDB获取数据，处理版本冲突错误\n   * @param {string} key - 数据键\n   * @returns {Promise<any>} - 数据或null\n   */\n  async safeGetMapData(key) {\n    try {\n      // 🔥 使用数据集特定的缓存键\n      const datasetSpecificKey = this.createDatasetCacheKey(key);\n      return await getMapData(datasetSpecificKey);\n    } catch (error) {\n      if (error.name === 'VersionError') {\n        console.warn(`IndexedDB版本冲突，重置数据库后重试获取数据: ${key}`);\n        try {\n          await resetDatabase();\n          // 重置后返回null，让调用者从文件重新加载\n          return null;\n        } catch (resetError) {\n          console.error('重置IndexedDB失败:', resetError);\n        }\n      }\n      console.error(`从IndexedDB获取数据失败 (${key}):`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * 加载细胞属性\n   * @param {string} fieldName - 属性字段名\n   * @returns {Promise<boolean>} - 是否成功加载\n   */\n  async loadCellAttribute(fieldName) {\n    try {\n      console.log(`ScatterRenderer: 开始加载属性: ${fieldName}`);\n      \n      // 创建属性缓存（如果不存在）\n      if (!this.data.attributeCache) {\n        this.data.attributeCache = new Map();\n      }\n      \n      // 检查是否已经加载过此属性\n      if (this.data.attributeCache.has(fieldName)) {\n        console.log(`ScatterRenderer: 属性 ${fieldName} 已在缓存中，跳过加载`);\n        return true;\n      }\n      \n      // 查找属性在field数组中的索引\n      const fieldIndex = this.data.field.findIndex(f => f === fieldName);\n      if (fieldIndex < 0) {\n        console.error(`属性 ${fieldName} 不在字段列表中`);\n        return false;\n      }\n      \n      // 加载属性数据（通过dataLoader的去重机制）\n      const attrPath = buildDatasetPath(`cell_types/${fieldName}.bin`);\n      console.log(`ScatterRenderer: 从路径加载: ${attrPath}`);\n      \n      const attrData = await dataLoader.loadCellAttribute(fieldName, (progress) => {\n        console.log(`ScatterRenderer: 属性 ${fieldName} 加载进度: ${(progress * 100).toFixed(1)}%`);\n      });\n      \n      if (!attrData || attrData.length === 0) {\n        console.error(`属性 ${fieldName} 数据加载失败`);\n        return false;\n      }\n      \n      console.log(`ScatterRenderer: 属性 ${fieldName} 加载完成，数据长度: ${attrData.length}`);\n      \n      // 缓存此属性数据\n      this.data.attributeCache.set(fieldName, attrData);\n      \n      // 创建或重新创建颜色纹理\n      if (this.resources.colorTexture) {\n        // 如果已存在，先销毁\n        this.resources.colorTexture.destroy();\n        this.resources.colorTexture = null;\n      }\n      \n      // 重新创建纹理\n      this.resources.colorTexture = this.resources.regl.texture({\n        shape: this.resources.textureSize,\n        format: \"rgba\",\n        type: \"float32\",\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrap: \"clamp\",\n      });\n      \n      // 更新颜色纹理数据\n      console.log(`正在更新颜色纹理数据，总点数: ${this.data.total}`);\n      \n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        // 计算这一行的起始点索引\n        const startPointIndex = row * texWidth;\n        \n        // 计算这一行要处理的点数量（考虑最后一行可能不满）\n        const pointsInRow = Math.min(texWidth, this.data.total - startPointIndex);\n        \n        if (pointsInRow <= 0) break; // 已处理完所有点\n        \n        if (row % 10 === 0) {\n          console.log(`更新第 ${row}/${texHeight} 行，包含 ${pointsInRow} 个点`);\n        }\n        \n        // 创建这一行的纹理数据\n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 设置属性数据\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          \n          // 将值设置到R通道，其他通道保留为0\n          rowData[i * 4] = globalPointIndex < attrData.length ? attrData[globalPointIndex] : 0;\n          rowData[i * 4 + 1] = 0;\n          rowData[i * 4 + 2] = 0;\n          rowData[i * 4 + 3] = 0;\n        }\n        \n        // 更新这一行到纹理\n        this.resources.colorTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0, // 从行首开始\n          row\n        );\n      }\n      \n      console.log(`颜色纹理更新完成，属性: ${fieldName}`);\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`加载属性 ${fieldName} 时出错:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * 更新指定属性的纹理数据\n   * @param {number} fieldIndex - 属性在field数组中的索引\n   * @param {number} startPointIndex - 起始点索引\n   * @param {number} pointCount - 点的数量\n   * @param {string} nodeId - 节点ID，用于加载节点特定数据\n   */\n  async updateTextureForAttribute(fieldIndex, startPointIndex, pointCount, nodeId) {\n    try {\n      // 获取属性数据\n      const fieldName = this.data.field[fieldIndex];\n      let attrData;\n      \n      // 首先检查缓存中是否有数据\n      if (this.data.attributeCache && this.data.attributeCache.has(fieldName)) {\n        attrData = this.data.attributeCache.get(fieldName);\n      } else {\n        // 如果缓存中没有，加载属性数据\n        attrData = await dataLoader.loadCellAttribute(fieldName);\n        \n        // 缓存此属性数据\n        if (!this.data.attributeCache) {\n          this.data.attributeCache = new Map();\n        }\n        this.data.attributeCache.set(fieldName, attrData);\n      }\n      \n      if (!attrData || attrData.length === 0) {\n        console.error(`属性 ${fieldName} 数据不可用`);\n        return;\n      }\n      \n      // 确保颜色纹理存在\n      if (!this.resources.colorTexture) {\n        console.error('颜色纹理不存在');\n        return;\n      }\n      \n      // 准备纹理数据 - 只更新R通道\n      let textureData = new Float32Array(pointCount * 4).fill(0);\n      \n      // 从属性数据中提取对应范围的数据\n      for (let i = 0; i < pointCount; i++) {\n        // 获取全局点索引\n        const globalPointIndex = startPointIndex + i;\n        \n        // 设置纹理RGBA中的R通道\n        if (globalPointIndex < attrData.length) {\n          textureData[i * 4] = attrData[globalPointIndex] || 0;\n        }\n      }\n      \n      // 更新纹理 - 计算纹理坐标\n      let currentStartX = Math.floor(startPointIndex / this.resources.textureSize[0]);\n      let currentStartY = startPointIndex % this.resources.textureSize[0];\n      \n      // 分块更新纹理\n      let pointsToUpdate = pointCount;\n      let offset = 0;\n      \n      while (pointsToUpdate > 0) {\n        let availableInRow = this.resources.textureSize[0] - currentStartY;\n        let updateWidth = Math.min(pointsToUpdate, availableInRow);\n        let floatArrayPart = textureData.subarray(\n          offset * 4,\n          (offset + updateWidth) * 4\n        );\n        \n        this.resources.colorTexture.subimage(\n          {\n            data: floatArrayPart,\n            width: updateWidth,\n            height: 1,\n          },\n          currentStartY,\n          currentStartX\n        );\n        \n        offset += updateWidth;\n        pointsToUpdate -= updateWidth;\n        currentStartY = 0;\n        currentStartX += 1;\n      }\n    } catch (error) {\n      console.error(`更新属性 ${this.data.field[fieldIndex]} 纹理时出错:`, error);\n    }\n  }\n  \n  /**\n   * 切换当前可视化的属性\n   * @param {number} newColorIndex - 新的颜色属性索引\n   * @returns {Promise<boolean>} - 是否成功切换\n   */\n  async setColorAttribute(newColorIndex) {\n    try {\n      // 检查field数组是否有效\n      if (!this.data.field || !Array.isArray(this.data.field) || this.data.field.length === 0) {\n        console.error('字段列表为空，无法设置颜色属性');\n        return false;\n      }\n      \n      // 检查索引的有效性，并提供默认值处理\n      let colorIndex = newColorIndex;\n      if (newColorIndex === undefined || newColorIndex === null || \n          newColorIndex < 0 || newColorIndex >= this.data.field.length) {\n        \n        console.warn(`属性索引 ${newColorIndex} 超出范围[0, ${this.data.field.length - 1}]，使用默认值0`);\n        colorIndex = 0;\n      }\n      \n      // 获取字段名\n      const fieldName = this.data.field[colorIndex];\n      console.log(`切换到属性: ${fieldName} (索引: ${colorIndex})`);\n      \n      // 强制重新加载新的属性数据，不使用缓存\n      // 删除之前的缓存\n      if (this.data.attributeCache && this.data.attributeCache.has(fieldName)) {\n        this.data.attributeCache.delete(fieldName);\n      }\n      \n      // 清除现有的颜色纹理\n      if (this.resources.colorTexture && this.resources.colorTexture.destroy) {\n        this.resources.colorTexture.destroy();\n        this.resources.colorTexture = null;\n      }\n      \n      // 重新加载属性数据\n      console.log(`正在加载属性数据: ${fieldName}`);\n      const loadSuccess = await this.loadCellAttribute(fieldName);\n      \n      if (!loadSuccess) {\n        console.error(`加载属性 ${fieldName} 失败`);\n        return false;\n      }\n      \n      // 更新当前颜色属性索引\n      this.data.colorIndex = colorIndex;\n      \n      // 更新着色器uniform - 改用渲染来传递参数\n      // 不再直接访问this.resources.drawScatter.uniforms\n      if (this.resources.drawScatter) {\n        console.log(`已更新colorIndex为 ${colorIndex}，将在下次渲染时传递`);\n      } else {\n        // 如果绘制命令不存在，尝试重新创建\n        console.warn(`绘制命令不存在，尝试重新创建`);\n        \n        const commandCreated = this.createDrawCommand();\n        if (!commandCreated) {\n          console.error(`无法创建绘制命令，无法继续渲染`);\n          return false;\n        }\n      }\n      \n      console.log(`属性已更新，请求重新渲染`);\n      \n      // 强制重新渲染 - 重要：在渲染时通过props传递currentColorField\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`切换属性时出错:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * 设置高亮属性\n   * @param {string} attributeName - 属性名称\n   * @param {number} attributeValue - 属性值索引\n   */\n  async setHighlightAttribute(attributeName, attributeValue) {\n    try {\n      // 检查参数有效性\n      if (!attributeName || attributeValue === undefined || attributeValue < 0) {\n        // 如果参数无效，清除高亮状态\n        console.log(`高亮参数无效: ${attributeName}:${attributeValue}，清除高亮`);\n        this.clearHighlight();\n        return false;\n      }\n      \n      console.log(`设置高亮属性: ${attributeName}, 值: ${attributeValue}`);\n      \n      // 检查属性名是否在字段列表中\n      if (!this.data.field || !Array.isArray(this.data.field)) {\n        console.error(`字段列表无效，无法设置高亮`);\n        return false;\n      }\n      \n      const attributeIndex = this.data.field.indexOf(attributeName);\n      if (attributeIndex === -1) {\n        console.error(`属性 ${attributeName} 不在字段列表中，可用字段: ${this.data.field.join(', ')}`);\n        return false;\n      }\n      \n      // 加载高亮属性数据\n      const attrData = await this.loadHighlightAttributeData(attributeName);\n      if (!attrData || attrData.length === 0) {\n        console.error(`无法加载属性 ${attributeName} 的数据，或数据为空`);\n        return false;\n      }\n      \n      // 检查属性值是否在有效范围内\n      const maxValue = Math.max(...Array.from(attrData).filter(v => !isNaN(v)));\n      if (attributeValue > maxValue) {\n        console.warn(`属性值 ${attributeValue} 超出数据范围 [0, ${maxValue}]`);\n      }\n      \n      // 创建高亮纹理\n      if (!this.resources.highlightTexture) {\n        // 创建高亮纹理\n        console.log(`创建高亮纹理，尺寸: ${this.resources.textureSize}`);\n        this.resources.highlightTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n      \n      // 更新状态\n      this.state.highlightAttributeName = attributeName;\n      this.state.highlightAttributeValues = [attributeValue]; // 修改：更新高亮属性值数组\n      \n      // 更新高亮纹理数据\n      console.log(`更新高亮纹理数据，总点数: ${this.data.total}`);\n      \n      // 确保纹理尺寸有效\n      if (!this.resources.textureSize || \n          !Array.isArray(this.resources.textureSize) || \n          this.resources.textureSize.length !== 2 ||\n          this.resources.textureSize[0] <= 0 || \n          this.resources.textureSize[1] <= 0) {\n        console.error(`纹理尺寸无效: ${this.resources.textureSize}`);\n        return false;\n      }\n      \n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        // 计算这一行的起始点索引\n        const startPointIndex = row * texWidth;\n        \n        // 计算这一行要处理的点数量（考虑最后一行可能不满）\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break; // 已处理完所有点\n        \n        // 创建这一行的纹理数据\n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 设置高亮数据\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          \n          // 如果点的属性值与高亮值匹配，则设置为1，否则为0\n          // 确保不会访问超出attrData范围的索引\n          let isHighlighted = false;\n          \n          if (globalPointIndex < attrData.length) {\n            const pointValue = attrData[globalPointIndex];\n            // 修改：检查点值是否在高亮值数组中（支持多个值的并集）\n            isHighlighted = pointValue !== undefined && \n                           this.state.highlightAttributeValues.some(highlightValue => \n                             Math.abs(pointValue - highlightValue) < 0.01);\n          }\n          \n          // 将高亮状态设置到alpha通道\n          rowData[i * 4] = 0;\n          rowData[i * 4 + 1] = 0;\n          rowData[i * 4 + 2] = 0;\n          rowData[i * 4 + 3] = isHighlighted ? 1.0 : 0.0;\n        }\n        \n        // 更新这一行到纹理\n        this.resources.highlightTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0, // 从行首开始\n          row\n        );\n      }\n      \n      console.log(`高亮纹理更新完成，属性: ${attributeName}, 值: ${attributeValue}`);\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`设置高亮属性时出错:`, error);\n      this.clearHighlight();\n      return false;\n    }\n  }\n  \n  /**\n   * 加载高亮属性数据\n   * @param {string} attributeName - 属性名称\n   * @returns {Promise<Float32Array>} - 属性数据\n   */\n  async loadHighlightAttributeData(attributeName) {\n    try {\n      console.log(`加载高亮属性数据: ${attributeName}`);\n      \n      // 检查缓存中是否有数据\n      if (this.data.attributeCache && this.data.attributeCache.has(attributeName)) {\n        const cachedData = this.data.attributeCache.get(attributeName);\n        return cachedData || new Float32Array(0);\n      }\n      \n      // 如果缓存中没有，加载属性数据\n      const attrData = await dataLoader.loadCellAttribute(attributeName);\n      \n      // 确保返回的数据是有效的Float32Array\n      const validAttrData = attrData instanceof Float32Array && attrData.length > 0 ? \n                           attrData : new Float32Array(0);\n      \n      // 缓存此属性数据\n      if (!this.data.attributeCache) {\n        this.data.attributeCache = new Map();\n      }\n      this.data.attributeCache.set(attributeName, validAttrData);\n      \n      return validAttrData;\n    } catch (error) {\n      console.error(`加载高亮属性 ${attributeName} 时出错:`, error);\n      return new Float32Array(0);\n    }\n  }\n  \n  /**\n   * 清除高亮状态\n   */\n  clearHighlight() {\n    // 清除高亮状态变量\n    this.state.highlightAttributeName = null;\n    this.state.highlightAttributeValues = []; // 修改：清空高亮属性值数组\n    \n    // 如果高亮纹理存在，将其清空\n    if (this.resources.highlightTexture) {\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      try {\n        // 创建全零的数据数组（清除所有高亮标记）\n        const emptyData = new Float32Array(texWidth * texHeight * 4).fill(0);\n        \n        // 更新纹理 - 确保使用完整的纹理尺寸\n        this.resources.highlightTexture.subimage({\n          data: emptyData,\n          width: texWidth,\n          height: texHeight\n        });\n        \n        console.log('高亮纹理已清除');\n      } catch (error) {\n        console.error('清除高亮纹理时出错:', error);\n      }\n    }\n    \n    // 强制设置为脏标记，确保重新渲染\n    this.state.isDirty = true;\n    \n    // 立即请求重新渲染，确保显示更新\n    if (!this.state.animationFrameId) {\n      this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n    }\n  }\n  \n  /**\n   * 创建WebGL绘制命令\n   */\n  createDrawCommand() {\n    try {\n      console.log('开始创建绘制命令...');\n      console.log('渲染器状态:', {\n        hasRegl: !!this.resources.regl,\n        hasPositionBuffer: !!this.resources.positionBuffer,\n        hasColorTexture: !!this.resources.colorTexture,\n        hasGeneBuffer: !!this.resources.geneBuffer,\n        hasGeneColorTexture: !!this.resources.geneColorTexture,\n        dataTotal: this.data.total,\n        dataCount: this.data.count\n      });\n      \n      if (!this.resources.regl || !this.resources.positionBuffer) {\n        console.error(\"无法创建绘制命令：REGL或位置缓冲区不存在\");\n        return false;\n      }\n      \n      // 直接定义顶点着色器，解决导入问题\n      const vertexShader = `#version 300 es\n      precision highp float;\n      precision highp int;\n      \n      in vec2 position;\n      in float vertexId;\n      in float gene;\n      uniform float zoom;\n      uniform vec2 xRange;\n      uniform vec2 yRange;\n      uniform vec2 geneExpRange;\n      uniform float aspectRatio;\n      uniform mat4 transform;\n      uniform bool geneColor;\n      uniform float viewportRatio;\n\n      uniform sampler2D pointDataTexture[1]; // 只使用一个纹理\n      uniform sampler2D geneColorTexture; // 基因颜色纹理\n      uniform bool hasGeneData; // 是否有基因数据\n      uniform vec2 textureSize;\n      uniform int filterNum;\n      out float v_localIndex;\n      uniform sampler2D filterTexture;\n      out vec4 v_color;\n      out float v_size;\n      uniform float hoverCategory;\n      uniform int currentColorField;\n      \n      // 从纹理获取颜色数据\n      vec4 getTextureData(vec2 uv) {\n        return texture(pointDataTexture[0], uv);\n      }\n      \n      // 从基因颜色纹理获取颜色\n      vec4 getGeneColor(vec2 uv) {\n        return texture(geneColorTexture, uv);\n      }\n      \n      uniform sampler2D highlightTexture; // 高亮纹理\n      uniform sampler2D hoverTexture; // 悬停纹理\n      uniform float highlightSize; // 高亮点大小倍数\n      uniform bool hasHighlight; // 是否有高亮状态\n      uniform bool isAttributeHighlight; // 添加isAttributeHighlight声明\n      uniform bool isCheckHighlight; // 添加isCheckHighlight声明，勾选高亮时非高亮点变灰\n      \n      // 检查点是否被高亮\n      bool isHighlighted(vec2 uv) {\n        if (!hasHighlight) return false;\n        vec4 highlightData = texture(highlightTexture, uv);\n        return highlightData.a > 0.5; // 使用alpha通道存储高亮状态\n      }\n      \n      // 检查点是否被悬停高亮\n      bool isHovered(vec2 uv) {\n        vec4 hoverData = texture(hoverTexture, uv);\n        return hoverData.a > 0.5; // 使用alpha通道存储悬停状态\n      }\n\n      vec3 getColorFromValue(float value) {\n        // 使用多层次颜色映射\n        float baseHue = mod(value * 0.618033988749895, 1.0);\n        float colorGroup = floor(mod(value, 5.0)); \n        float secondaryShift = colorGroup * 0.2 + mod(float(currentColorField) * 0.1, 0.2);\n        float hue = mod(baseHue + secondaryShift, 1.0);\n        float saturation = 0.6 + mod(value, 1.0) * 0.3;\n        float brightness = 0.7 + mod(value * 7.0, 1.0) * 0.2;\n        \n        vec3 rgb = vec3(0.0);\n        float h = hue * 6.0;\n        float i = floor(h);\n        float f = h - i;\n        float p = brightness * (1.0 - saturation);\n        float q = brightness * (1.0 - saturation * f);\n        float t = brightness * (1.0 - saturation * (1.0 - f));\n\n        if (i == 0.0) rgb = vec3(brightness, t, p);\n        else if (i == 1.0) rgb = vec3(q, brightness, p);\n        else if (i == 2.0) rgb = vec3(p, brightness, t);\n        else if (i == 3.0) rgb = vec3(p, q, brightness);\n        else if (i == 4.0) rgb = vec3(t, p, brightness);\n        else rgb = vec3(brightness, p, q);\n        \n        return rgb;\n      }\n\n      float checkAllFilters(vec2 uv) {\n        int count=0;\n        bool result = false;\n        bool isFirstCondition = true;\n        bool preResult = false;\n        bool prePreResult = false;\n        \n        if(filterNum == 0) {\n          vec4 data = getTextureData(uv);\n          return data.x; // 值始终存储在R通道\n        }\n        \n        for(int i=0; i<filterNum; i++) {\n          if(i >= filterNum) break; // 提前终止\n          \n          vec4 filterCondition=texelFetch(filterTexture, ivec2(i,0), 0);\n          int typeClass = int(filterCondition.r);\n          int typeItem = int(filterCondition.g);\n          float expectedValue = filterCondition.b;\n          int operatorType = int(filterCondition.a);\n        \n          // 从纹理读取数据\n          vec4 data0 = getTextureData(uv);\n          float value=-1.0;\n          float colorValue = data0.x; // 值始终存储在R通道\n          \n          bool cond = (abs(colorValue - expectedValue) < 0.001);\n          \n          if(i == 0) {\n              result = cond;\n          } else {\n              if(operatorType == 1) { // OR\n                  result = result || cond;\n              } else if(operatorType == 2) {\n                result = result ||(prePreResult && cond);\n              } else { // AND\n                  result = result && cond;\n              }\n          }\n          if(operatorType != 2) {\n            prePreResult = preResult;\n            preResult = result;\n          }\n        }\n        \n        if(result) {\n          vec4 data = getTextureData(uv);\n          return data.x; // 值始终存储在R通道\n        } else {\n          return -1.0;\n        }\n      }\n      \n      void main() {\n        vec2 normalized = vec2(\n          ((position.x - xRange.x) / (xRange.y - xRange.x) * 2.0 - 1.0) * 0.4,\n          ((position.y - yRange.x) / (yRange.y - yRange.x) * 2.0 - 1.0) * 0.4 * aspectRatio\n        );\n        \n        v_localIndex = vertexId;\n\n        float row = floor(vertexId / textureSize.x);\n        float col = mod(vertexId, textureSize.x);\n        vec2 uv = vec2(\n          (col + 0.5) / textureSize.x,\n          (row + 0.5) / textureSize.y\n        );\n\n        // 从纹理读取数据\n        float value = checkAllFilters(uv);\n\n        // 检查点是否被高亮\n        bool pointHighlighted = isHighlighted(uv);\n        \n        // 属性悬停相关变量\n        bool isAttributeHoverMode = (hoverCategory == -999.0);\n        bool pointIsHovered = false;\n        if (isAttributeHoverMode) {\n          pointIsHovered = isHovered(uv);\n        }\n\n        // 优先使用基因颜色纹理\n        if(hasGeneData && value >= 0.0) {\n          vec4 geneColorData = getGeneColor(uv);\n          v_color = geneColorData;\n        } else if(geneColor && gene > 0.0 && (geneExpRange.x == -1.0 || geneExpRange.y == -1.0 || (gene >= geneExpRange.x && gene <= geneExpRange.y))) {\n          // 基因染色模式\n          float intensity = clamp(gene / 3.0, 0.0, 1.0);\n          vec3 redColor = vec3(0.94, 0.35, 0.35);\n          vec3 purpleColor = vec3(0.55, 0.16, 0.63);\n          vec3 finalColor = mix(redColor, purpleColor, intensity);\n          v_color = vec4(finalColor, 1.0);\n        } else {\n            // 🔧 修复：统一颜色计算逻辑，先计算基本颜色，再根据筛选和高亮状态调整\n            vec3 rgb;\n            float alpha = 0.8;  // 默认透明度\n            \n            // 计算基本颜色（无论是否符合筛选条件）\n            if(value >= 0.0) {\n                // 符合筛选条件的点，使用属性值计算颜色\n                rgb = getColorFromValue(value);\n            } else {\n                // 不符合筛选条件的点，使用当前染色属性的默认颜色\n                vec4 data = getTextureData(uv);\n                rgb = getColorFromValue(data.x); // 使用实际属性值计算颜色\n            }\n            \n            // 判断是否处于悬停高亮模式\n            bool isHoverMode = hoverCategory != -1.0;\n            \n            // 🔧 修复：重新组织悬浮和高亮的优先级逻辑，确保悬浮效果在勾选后依然可见\n            bool hoverEffectApplied = false;\n            \n            // 首先处理悬浮效果（最高优先级）\n            if (isAttributeHoverMode && pointIsHovered) {\n                rgb *= 1.3; // 悬浮时增加更多亮度，确保可见\n                alpha = 1.0; // 完全不透明\n                hoverEffectApplied = true;\n            } else if (isHoverMode && value == hoverCategory) {\n                rgb *= 1.3; // 悬浮时增加更多亮度，确保可见\n                alpha = 1.0; // 完全不透明\n                hoverEffectApplied = true;\n            }\n            \n            // 然后处理高亮状态（当没有悬浮效果时）\n            if (!hoverEffectApplied && hasHighlight) {\n                if (pointHighlighted) {\n                    // 🔧 修复：符合勾选条件的点保持原色，不增亮\n                    alpha = 1.0; // 完全不透明\n                } else if (isCheckHighlight) {\n                    // 勾选高亮模式下，非高亮点变灰\n                    rgb = vec3(0.35, 0.35, 0.35);\n                    alpha = 0.7;\n                }\n            }\n            \n            // 最后处理属性悬浮模式下非悬浮点的变暗效果\n            if (isAttributeHoverMode && !pointIsHovered && !hoverEffectApplied) {\n                rgb *= 0.85;\n                alpha = 0.6;\n            }\n            \n            // 🔧 修复：最后处理不符合筛选条件的点\n            if(value < 0.0 && !hasHighlight) {\n                // 只有在没有高亮状态时，不符合筛选条件的点才变灰\n                rgb = vec3(0.4, 0.4, 0.4);\n                alpha = 0.8;\n            }\n            \n            v_color = vec4(rgb, alpha);\n        }\n\n        // 计算点的大小和Z值\n        float scale = 1.0;\n        float zValue = 0.0;\n        \n        // 🔧 修复：重新组织点大小和层级的优先级，确保悬浮效果优先级最高\n        // 悬浮效果具有最高优先级\n        if ((isAttributeHoverMode && pointIsHovered) || (value==hoverCategory && hoverCategory!=-1.0)) {\n            // 悬浮时稍微放大，但不如勾选那么明显\n            scale = 1.2;\n            zValue = -0.7; // 悬浮点显示在最上层\n        } else if(pointHighlighted) {\n            // 高亮点增大，但比之前小一些\n            scale = highlightSize;\n            zValue = -0.6; // 高亮点显示在第二层\n        } else if(value < 0.0) {\n            zValue = 0.5; // 灰色点放在后面\n        }\n        \n        // 保存点大小供片段着色器使用 - 减小基础大小从3.0到2.0\n        v_size = 2.0 * zoom * scale;\n        \n        gl_Position = transform * vec4(normalized, zValue, 1);\n        \n        // 使用viewportRatio确保在高DPI显示器上点大小正确\n        gl_PointSize = v_size * viewportRatio;\n      }\n      `;\n      \n      // 直接定义片段着色器\n      const fragmentShader = `#version 300 es\n      precision highp float;\n      precision highp int;\n      in float v_localIndex;\n      in vec4 v_color;\n      in float v_size;\n      out vec4 fragColor;\n      uniform bool useAntialiasing;\n     \n      void main() {\n        // 计算到圆心的距离\n        vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n        float r = dot(cxy, cxy);\n        \n        // 基本圆形\n        if (r > 1.0) {\n          discard;\n        }\n        \n        vec4 color = v_color;\n        \n        // 应用抗锯齿\n        if (useAntialiasing) {\n          // 使用固定的delta值代替fwidth计算\n          float delta = 0.05;\n          float alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\n          \n          // 应用抗锯齿\n          color.a *= alpha;\n          \n          // 增加点的半径方向渐变以使其更自然\n          float gradient = 1.0 - (r * 0.3); // 减小渐变程度，使颜色更均匀\n          color.rgb *= gradient;\n        }\n        \n        // 输出最终颜色\n        fragColor = color;\n      }`;\n      \n      // 使用预定义的着色器代码\n      this.resources.drawScatter = this.resources.regl({\n        viewport: {\n          x: 0,\n          y: 0,\n          width: () => this.resources.canvas.width,\n          height: () => this.resources.canvas.height,\n        },\n        frag: fragmentShader,\n        vert: vertexShader,\n        attributes: {\n          position: this.resources.regl.prop(\"position\"),\n          vertexId: this.resources.vertexIdBuffer,\n          gene: this.resources.geneBuffer, // 直接使用geneBuffer，不通过prop传递\n        },\n        uniforms: {\n          transform: this.resources.regl.prop(\"transform\"),\n          zoom: this.resources.regl.prop(\"zoom\"),\n          xRange: [this.data.dataRange.min_x, this.data.dataRange.max_x],\n          yRange: [this.data.dataRange.min_y, this.data.dataRange.max_y],\n          aspectRatio: () => {\n            const width = this.container.clientWidth;\n            const height = this.container.clientHeight;\n            return width / Math.max(height, 1);\n          },\n          // 单一的颜色纹理\n          \"pointDataTexture[0]\": (_, props) => props.colorTexture,\n          highlightTexture: (_, props) => props.highlightTexture,\n          hoverTexture: (_, props) => props.hoverTexture || props.colorTexture,\n          textureSize: (context, props) => props.textureSize,\n          filterTexture: (_, props) => props.filterTexture || props.colorTexture, // 确保始终有有效的纹理\n          hoverCategory: this.resources.regl.prop(\"hoverCategory\"),\n          filterNum: this.resources.regl.prop(\"filterNum\"),\n          currentColorField: this.resources.regl.prop(\"currentColorField\"),\n          geneExpRange: (context, props) => props.geneExpRange.range ? \n            [props.geneExpRange.range.start, props.geneExpRange.range.end] : \n            [-1.0, -1.0],\n          geneColor: (context, props) => props.geneExpRange.color ? true : false,\n          viewportRatio: () => this.state.viewportRatio,\n          useAntialiasing: () => this.options.antialiasing,\n          highlightSize: () => this.options.highlightSize, // 高亮点的大小倍数\n          hasHighlight: (_, props) => props.hasHighlight, // 是否有高亮\n          isAttributeHighlight: (_, props) => props.isAttributeHighlight || false, // 是否是基于属性高亮\n          isCheckHighlight: (_, props) => props.isCheckHighlight || false, // 是否是勾选高亮（影响非高亮点是否变灰）\n          geneColorTexture: (_, props) => props.geneColorTexture || this.resources.colorTexture, // 确保总是有一个有效的纹理\n          hasGeneData: (_, props) => props.hasGeneData || false, // 确保总是有一个布尔值\n        },\n        count: this.data.total,\n        primitive: \"points\",\n        depth: { enable: true },\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: 'src alpha',\n            srcAlpha: 'src alpha',\n            dstRGB: 'one minus src alpha',\n            dstAlpha: 'one minus src alpha'\n          }\n        }\n      });\n      \n      // 创建完绘制命令后设置标记，但不立即渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(\"创建绘制命令失败:\", error);\n      this.handleError(\"创建绘制命令时\", error);\n      // 明确将 drawScatter 设置为 null，如果创建失败\n      this.resources.drawScatter = null;\n      return false;\n    }\n  }\n  \n  /**\n   * 设置平移模式\n   */\n  setPanningMode() {\n    const canvas = this.resources.canvas;\n    \n    // 移除可能的选择事件监听\n    if (this.boundStartSelection) {\n      canvas.removeEventListener(\"mousedown\", this.boundStartSelection, { capture: true });\n      canvas.removeEventListener(\"mousemove\", this.boundUpdateSelection, { capture: true });\n      canvas.removeEventListener(\"mouseup\", this.boundEndSelection, { capture: true });\n    }\n    \n    // 绑定平移事件处理函数\n    this.boundStartPanning = this.startPanning.bind(this);\n    this.boundEndPanning = this.endPanning.bind(this);\n    this.boundHandleMouseMove = this.handleMouseMove.bind(this);\n    \n    // 添加平移事件监听\n    canvas.addEventListener(\"mousedown\", this.boundStartPanning);\n    canvas.addEventListener(\"mouseup\", this.boundEndPanning);\n    canvas.addEventListener(\"mousemove\", this.boundHandleMouseMove);\n    \n    // 重置选区状态并清除选区可见性\n    this.state.isSelecting = false;\n    this.state.selectionMode = false; // 设置为平移模式\n    this.state.selectionVisible = false; // 清除选区可见性，确保选区框消失\n    \n    // 设置鼠标样式\n    canvas.style.cursor = \"grab\";\n    \n    // 强制重新渲染以清除选区框\n    this.state.isDirty = true;\n    \n    // 输出测试消息\n    console.log(\"已切换回平移模式，选区框已清除\");\n  }\n  \n  /**\n   * 设置选择模式\n   */\n  setSelectionMode() {\n    if (!this.options.selectionEnabled) {\n      console.warn(\"选区功能已禁用\");\n      return;\n    }\n    \n    const canvas = this.resources.canvas;\n    \n    // 移除平移事件监听\n    if (this.boundStartPanning) {\n      canvas.removeEventListener(\"mousedown\", this.boundStartPanning);\n      canvas.removeEventListener(\"mouseup\", this.boundEndPanning);\n      canvas.removeEventListener(\"mousemove\", this.boundHandleMouseMove);\n    }\n    \n    // 绑定选择事件处理函数\n    this.boundStartSelection = this.startSelection.bind(this);\n    this.boundUpdateSelection = this.updateSelection.bind(this);\n    this.boundEndSelection = this.endSelection.bind(this);\n    \n    // 添加选择事件监听\n    canvas.addEventListener(\"mousedown\", this.boundStartSelection, { capture: true });\n    canvas.addEventListener(\"mousemove\", this.boundUpdateSelection, { capture: true });\n    canvas.addEventListener(\"mouseup\", this.boundEndSelection, { capture: true });\n    \n    // 重置状态\n    this.state.isPanning = false;\n    this.state.lastMousePosition = null;\n    this.state.selectionMode = true; // 设置为选择模式\n    \n    // 设置鼠标样式\n    canvas.style.cursor = \"crosshair\";\n    \n    // 输出测试消息\n    console.log(\"已切换到选区模式，可以进行区域选择\");\n  }\n  \n  /**\n   * 开始平移\n   */\n  startPanning(event) {\n    // 如果处于选择模式，禁止平移\n    if (this.state.selectionMode) return;\n    \n    event.preventDefault();\n    this.state.isPanning = true;\n    this.state.lastMousePosition = { x: event.clientX, y: event.clientY };\n    this.state.velocity = { x: 0, y: 0 };\n    this.state.lastTime = performance.now();\n    this.resources.canvas.style.cursor = \"grabbing\";\n  }\n  \n  /**\n   * 结束平移\n   */\n  endPanning() {\n    this.state.isPanning = false;\n    this.resources.canvas.style.cursor = \"grab\";\n    \n    // 应用惯性效果\n    if (this.state.inertiaEnabled && \n        (Math.abs(this.state.velocity.x) > 0.01 || \n         Math.abs(this.state.velocity.y) > 0.01)) {\n      this.applyInertia();\n    }\n  }\n  \n  /**\n   * 处理鼠标移动\n   */\n  handleMouseMove(event) {\n    // 如果在选择模式，则不处理平移和悬停\n    if (this.getMode() === \"select\") return;\n    \n    if (this.state.isPanning && this.state.lastMousePosition) {\n      this.pan(event);\n    } else {\n      // 使用节流版本的悬停检测\n      this.throttledHoverPoint(event);\n    }\n  }\n  \n  /**\n   * 调度渲染，优化性能\n   * @param {boolean} force - 是否强制渲染\n   */\n  scheduleRender(force = false) {\n    // 设置脏标记，渲染循环会处理\n    this.state.isDirty = true;\n    \n    // 如果强制渲染，立即触发一次渲染\n    if (force && !this.state.animationFrameId) {\n      this.state.animationFrameId = requestAnimationFrame(() => {\n        this.renderFrame();\n        this.state.animationFrameId = null;\n      });\n    }\n  }\n  \n  /**\n   * 创建变换矩阵\n   * @returns {Array<number>} 4x4变换矩阵\n   */\n  createTransformMatrix() {\n    return [\n      this.state.zoom * this.state.zoom, 0, 0, 0,\n      0, this.state.zoom * this.state.zoom, 0, 0,\n      0, 0, 1, 0,\n      this.state.offsetX, this.state.offsetY, 0, 1\n    ];\n  }\n  \n  /**\n   * 释放资源\n   */\n  dispose() {\n    try {\n      // 停止渲染循环\n      if (this.state.animationFrameId !== null) {\n        cancelAnimationFrame(this.state.animationFrameId);\n        this.state.animationFrameId = null;\n      }\n      \n      // 移除事件监听器\n    if (this.resources.canvas) {\n        // 移除滚轮事件监听\n      this.resources.canvas.removeEventListener(\"wheel\", this.smoothZoom);\n        \n        // 移除平移模式事件监听\n        if (this.boundStartPanning) {\n          this.resources.canvas.removeEventListener(\"mousedown\", this.boundStartPanning);\n          this.resources.canvas.removeEventListener(\"mouseup\", this.boundEndPanning);\n          this.resources.canvas.removeEventListener(\"mousemove\", this.boundHandleMouseMove);\n        }\n        \n        // 移除选择模式事件监听\n        if (this.boundStartSelection) {\n          this.resources.canvas.removeEventListener(\"mousedown\", this.boundStartSelection, { capture: true });\n          this.resources.canvas.removeEventListener(\"mousemove\", this.boundUpdateSelection, { capture: true });\n          this.resources.canvas.removeEventListener(\"mouseup\", this.boundEndSelection, { capture: true });\n        }\n        \n        // 移除窗口大小变化监听\n        const boundHandleResize = this.handleResize.bind(this);\n        window.removeEventListener(\"resize\", boundHandleResize);\n      }\n      \n      // 清理ResizeObserver\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n        console.log('ResizeObserver已清理');\n      }\n      \n      // 释放GPU资源\n      if (this.resources.regl) {\n        // 逐个清理缓冲区资源\n        if (this.resources.positionBuffer && this.resources.positionBuffer.destroy) {\n          this.resources.positionBuffer.destroy();\n          this.resources.positionBuffer = null;\n        }\n        \n        if (this.resources.vertexIdBuffer && this.resources.vertexIdBuffer.destroy) {\n          this.resources.vertexIdBuffer.destroy();\n          this.resources.vertexIdBuffer = null;\n        }\n        \n        if (this.resources.geneBuffer && this.resources.geneBuffer.destroy) {\n          this.resources.geneBuffer.destroy();\n          this.resources.geneBuffer = null;\n        }\n        \n        // 清理纹理资源\n        if (this.resources.filterTexture && this.resources.filterTexture.destroy) {\n          this.resources.filterTexture.destroy();\n          this.resources.filterTexture = null;\n        }\n        \n        // 清理颜色纹理\n        if (this.resources.colorTexture && this.resources.colorTexture.destroy) {\n          this.resources.colorTexture.destroy();\n          this.resources.colorTexture = null;\n        }\n        \n        // 清理高亮纹理\n        if (this.resources.highlightTexture && this.resources.highlightTexture.destroy) {\n          this.resources.highlightTexture.destroy();\n          this.resources.highlightTexture = null;\n        }\n        \n        // 清理悬停纹理\n        if (this.resources.hoverTexture && this.resources.hoverTexture.destroy) {\n          this.resources.hoverTexture.destroy();\n          this.resources.hoverTexture = null;\n        }\n        \n        // 清理基因颜色纹理\n        if (this.resources.geneColorTexture && this.resources.geneColorTexture.destroy) {\n          this.resources.geneColorTexture.destroy();\n          this.resources.geneColorTexture = null;\n        }\n        \n        // 清理所有点数据纹理\n        if (this.resources.textures && this.resources.textures.length > 0) {\n          this.resources.textures.forEach(texture => {\n            if (texture && texture.destroy) {\n              texture.destroy();\n            }\n          });\n          this.resources.textures = [];\n        }\n        \n        // 获取WebGL上下文引用\n        const gl = this.resources.regl._gl;\n        \n        // 销毁REGL实例\n        if (this.resources.regl.destroy) {\n          this.resources.regl.destroy();\n          this.resources.regl = null;\n        }\n        \n        // 执行额外的WebGL清理\n        if (gl) {\n          // 清除WebGL上下文的额外状态\n          gl.getExtension('WEBGL_lose_context')?.loseContext();\n          \n          // 清理WebGL上下文中可能残留的纹理单元\n          const maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n          for (let i = 0; i < maxTextureUnits; i++) {\n            gl.activeTexture(gl.TEXTURE0 + i);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n          }\n          \n          // 清理其他绑定\n          gl.bindBuffer(gl.ARRAY_BUFFER, null);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n          gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n          gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n          \n          // 禁用可能启用的顶点属性数组\n          const maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n          for (let i = 0; i < maxVertexAttribs; i++) {\n            gl.disableVertexAttribArray(i);\n          }\n        }\n        }\n        \n        // 从DOM中移除canvas\n        if (this.resources.canvas && this.resources.canvas.parentNode) {\n          this.resources.canvas.parentNode.removeChild(this.resources.canvas);\n        this.resources.canvas = null;\n      }\n      \n      // 清除四叉树和其他数据引用\n      this.data.treeMap.clear();\n      this.data.quadTree = null;\n      this.data.total = 0;\n      this.data.count = 0;\n      \n      // 清除属性缓存\n      if (this.data.attributeCache) {\n        this.data.attributeCache.clear();\n        this.data.attributeCache = null;\n      }\n      \n      // 重置状态变量\n      this.state = {\n        zoom: this.options.defaultZoom,\n        offsetX: this.options.defaultOffset[0],\n        offsetY: this.options.defaultOffset[1],\n        isPanning: false,\n        isSelecting: false,\n        selectionMode: false,\n        selectionStart: null,\n        selectionEnd: null,\n        selectionVisible: false,\n        selectedIndices: [],\n        hoverCategory: -1,\n        isZooming: false,\n        targetZoom: this.options.defaultZoom,\n        viewportRatio: 1,\n        isDirty: false,\n        selectionStartData: null,\n        selectionEndData: null\n      };\n      \n      // 引用清空\n      this.boundStartPanning = null;\n      this.boundEndPanning = null;\n      this.boundHandleMouseMove = null;\n      this.boundStartSelection = null;\n      this.boundUpdateSelection = null;\n      this.boundEndSelection = null;\n      \n      // 建议浏览器进行垃圾回收\n      if (window.gc) window.gc();\n      \n      console.log(\"渲染器资源已完全释放\");\n      return true;\n      } catch (error) {\n      console.error(\"释放资源时发生错误:\", error);\n      this.handleError(\"释放资源时\", error);\n      return false;\n    }\n  }\n  \n  /**\n   * 错误处理\n   */\n  handleError(context, error) {\n    console.error(`${context}:`, error);\n    \n    // 显示用户友好的错误消息\n    if (this.container) {\n      const errorDiv = document.createElement(\"div\");\n      errorDiv.className = \"renderer-error\";\n      errorDiv.textContent = `渲染错误: ${error.message || '未知错误'}`;\n      errorDiv.style.cssText = \"color: red; padding: 20px; background: rgba(255,255,255,0.9); position: absolute; top: 10px; left: 10px; z-index: 1000; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.2);\";\n      \n      // 添加关闭按钮\n      const closeBtn = document.createElement(\"button\");\n      closeBtn.textContent = \"×\";\n      closeBtn.style.cssText = \"margin-left: 10px; background: none; border: none; cursor: pointer;\";\n      closeBtn.onclick = () => errorDiv.remove();\n      \n      errorDiv.appendChild(closeBtn);\n      this.container.appendChild(errorDiv);\n      \n      // 自动关闭\n      setTimeout(() => {\n        if (errorDiv.parentNode) {\n          errorDiv.remove();\n        }\n      }, 10000);\n    }\n  }\n  \n  /**\n   * 平移视图\n   * @param {Event} event - 鼠标事件\n   */\n  pan(event) {\n    // 如果处于选择模式，禁止平移\n    if (this.state.selectionMode) return;\n    \n    if (!this.state.isPanning || !this.state.lastMousePosition) return;\n    \n    const now = performance.now();\n    const dt = now - this.state.lastTime;\n    this.state.lastTime = now;\n    \n    const dx = event.movementX;\n    const dy = event.movementY;\n    \n    // 计算速度，用于惯性效果\n    if (dt > 0) {\n      this.state.velocity.x = dx * 0.8 + this.state.velocity.x * 0.2;\n      this.state.velocity.y = dy * 0.8 + this.state.velocity.y * 0.2;\n    }\n    \n    // 应用平移\n    this.state.offsetX += dx * 2.0 * this.state.zoom / (this.state.zoom * this.resources.canvas.width);\n    this.state.offsetY -= dy * 2.0 * this.state.zoom / (this.state.zoom * this.resources.canvas.height);\n    \n    // 更新上一次鼠标位置\n    this.state.lastMousePosition = { x: event.clientX, y: event.clientY };\n    \n    // 请求渲染\n    this.scheduleRender();\n  }\n  \n  /**\n   * 应用惯性效果\n   */\n  applyInertia() {\n    const decay = 0.95; // 衰减系数\n    \n    const animate = () => {\n      // 当速度足够小时停止动画\n      if (Math.abs(this.state.velocity.x) < 0.01 && Math.abs(this.state.velocity.y) < 0.01) {\n        return;\n      }\n      \n      // 应用衰减\n      this.state.velocity.x *= decay;\n      this.state.velocity.y *= decay;\n      \n      // 计算位移\n      const dx = this.state.velocity.x / (this.state.zoom * this.resources.canvas.width);\n      const dy = this.state.velocity.y / (this.state.zoom * this.resources.canvas.height);\n      \n      // 应用位移\n      this.state.offsetX += dx * 2.0 * this.state.zoom;\n      this.state.offsetY -= dy * 2.0 * this.state.zoom;\n      \n      // 请求渲染\n      this.scheduleRender();\n      \n      // 继续下一帧动画\n      requestAnimationFrame(animate);\n    };\n    \n    // 开始动画\n    animate();\n  }\n  \n  /**\n   * 平滑缩放\n   * @param {number} deltaY - 滚轮事件的deltaY值\n   */\n  smoothZoom(deltaY) {\n    const scaleAmount = 0.1;\n    this.state.targetZoom += deltaY < 0 ? scaleAmount : -scaleAmount;\n    this.state.targetZoom = Math.max(0.1, this.state.targetZoom); // 限制最小缩放级别\n    \n    if (!this.state.isZooming) {\n      this.state.isZooming = true;\n      this.animateZoom();\n    }\n  }\n  \n  /**\n   * 动画实现平滑缩放\n   */\n  animateZoom() {\n    // 使用缓动函数使缩放更平滑\n    this.state.zoom += (this.state.targetZoom - this.state.zoom) * 0.2;\n    \n    if (Math.abs(this.state.targetZoom - this.state.zoom) < 0.01) {\n      // 达到目标缩放级别，停止动画\n      this.state.zoom = this.state.targetZoom;\n      this.state.isZooming = false;\n    } else {\n      // 继续动画\n      requestAnimationFrame(this.animateZoom.bind(this));\n    }\n    \n    // 请求渲染\n    this.scheduleRender();\n  }\n  \n  /**\n   * 处理容器尺寸变化\n   * 确保Canvas和WebGL视口正确适应新尺寸\n   */\n  handleResize() {\n    // 增强的安全检查\n    if (!this.container || !this.resources.canvas || !this.resources.regl) {\n      console.warn('ScatterRenderer: 关键资源未初始化，跳过尺寸更新');\n      return;\n    }\n    \n    // 检查容器是否仍在DOM中\n    if (!document.contains(this.container)) {\n      console.warn('ScatterRenderer: 容器已从DOM中移除，跳过尺寸更新');\n      return;\n    }\n    \n    console.log('ScatterRenderer: 开始处理尺寸变化');\n    \n    try {\n      // 获取容器的当前尺寸\n      const containerWidth = this.container.offsetWidth;\n      const containerHeight = this.container.offsetHeight;\n      \n      console.log(`ScatterRenderer: 容器尺寸 - 宽度: ${containerWidth}, 高度: ${containerHeight}`);\n      \n      // 如果容器尺寸为0，跳过更新\n      if (containerWidth === 0 || containerHeight === 0) {\n        console.warn('ScatterRenderer: 容器尺寸为0，跳过尺寸更新');\n        return;\n      }\n      \n      // 获取设备像素比，确保高清显示\n      const pixelRatio = window.devicePixelRatio || 1;\n      this.state.viewportRatio = pixelRatio;\n      \n      // 计算新的画布尺寸\n      const newCanvasWidth = Math.floor(containerWidth * pixelRatio);\n      const newCanvasHeight = Math.floor(containerHeight * pixelRatio);\n      \n      // 检查是否真的需要更新尺寸\n      if (this.resources.canvas.width === newCanvasWidth && \n          this.resources.canvas.height === newCanvasHeight) {\n        console.log('ScatterRenderer: 画布尺寸未变化，跳过更新');\n        return;\n      }\n      \n      console.log(`ScatterRenderer: 更新画布尺寸 - 宽度: ${newCanvasWidth}, 高度: ${newCanvasHeight}, 像素比: ${pixelRatio}`);\n      \n      // 更新画布的实际渲染尺寸（内部分辨率）\n      this.resources.canvas.width = newCanvasWidth;\n      this.resources.canvas.height = newCanvasHeight;\n      \n      // 更新画布的CSS显示尺寸\n      this.resources.canvas.style.width = containerWidth + 'px';\n      this.resources.canvas.style.height = containerHeight + 'px';\n      \n      // 更新REGL视口 - 这是关键步骤，确保WebGL渲染区域正确\n      try {\n        if (this.resources.regl && this.resources.regl._gl) {\n          this.resources.regl._gl.viewport(0, 0, newCanvasWidth, newCanvasHeight);\n          console.log(`ScatterRenderer: REGL视口已更新为 ${newCanvasWidth}x${newCanvasHeight}`);\n        }\n      } catch (error) {\n        console.error('ScatterRenderer: 更新REGL视口时出错:', error);\n      }\n      \n      // 更新宽高比相关的状态\n      this.state.aspectRatio = containerWidth / containerHeight;\n      \n      // 标记需要重新渲染\n      this.state.isDirty = true;\n      \n      // 立即请求重新渲染，确保尺寸变化后立即更新显示\n      this.scheduleRender(true); // 强制渲染\n      \n      console.log('ScatterRenderer: 尺寸更新完成，已请求重新渲染');\n    } catch (error) {\n      console.error('ScatterRenderer: 处理尺寸变化时出错:', error);\n    }\n  }\n  \n  /**\n   * 获取鼠标在WebGL坐标系中的位置\n   * @param {Event} event - 鼠标事件\n   * @returns {Array<number>} WebGL坐标 [x, y]\n   */\n  getMousePositionInWebGL(event) {\n    const rect = this.container.getBoundingClientRect();\n    \n    // 计算鼠标在canvas中的位置并归一化到[-1, 1]范围\n    const mouseX = (event.clientX - rect.left) / rect.width * 2 - 1;\n    const mouseY = -((event.clientY - rect.top) / rect.height * 2 - 1);\n    \n    return [mouseX, mouseY];\n  }\n  \n  /**\n   * 从WebGL坐标转换到数据坐标\n   * @param {Array<number>} position - WebGL坐标 [x, y]\n   * @returns {Array<number>} 数据坐标 [x, y]\n   */\n  getDataCoordinates(position) {\n    const [x, y] = position;\n    const aspectRatio = this.container.clientWidth / this.container.clientHeight;\n    \n    // 逆向应用变换矩阵\n    const transformMatrix = this.createTransformMatrix();\n    \n    // 计算变换的逆向应用\n    const scaleFactor = transformMatrix[0]; // zoom^2\n    \n    // 将变换后的坐标转换回原始归一化坐标\n    const normalizedX = (x - transformMatrix[12]) / scaleFactor;\n    const normalizedY = (y - transformMatrix[13]) / scaleFactor;\n    \n    // 从归一化数据坐标到原始数据坐标\n    const dataX = ((normalizedX / 0.4 + 1) / 2) * \n                  (this.data.dataRange.max_x - this.data.dataRange.min_x) + \n                  this.data.dataRange.min_x;\n    \n    const dataY = ((normalizedY / (0.4 * aspectRatio) + 1) / 2) * \n                  (this.data.dataRange.max_y - this.data.dataRange.min_y) + \n                  this.data.dataRange.min_y;\n    \n    return [dataX, dataY];\n  }\n  \n  /**\n   * 从数据坐标转换到WebGL坐标\n   * @param {Array<number>} position - 数据坐标 [x, y]\n   * @returns {Array<number>} WebGL坐标 [x, y]\n   */\n  getWebGLCoordinates(position) {\n    const [dataX, dataY] = position;\n    const aspectRatio = this.container.clientWidth / this.container.clientHeight;\n    \n    // 首先将数据坐标转换为归一化坐标\n    const normalizedX = ((dataX - this.data.dataRange.min_x) / \n                       (this.data.dataRange.max_x - this.data.dataRange.min_x) * 2.0 - 1.0) * 0.4;\n    \n    const normalizedY = ((dataY - this.data.dataRange.min_y) / \n                       (this.data.dataRange.max_y - this.data.dataRange.min_y) * 2.0 - 1.0) * 0.4 * aspectRatio;\n    \n    // 获取当前变换矩阵\n    const transformMatrix = this.createTransformMatrix();\n    \n    // 应用变换矩阵\n    const transformedX = normalizedX * transformMatrix[0] + transformMatrix[12];\n    const transformedY = normalizedY * transformMatrix[5] + transformMatrix[13];\n    \n    return [transformedX, transformedY];\n  }\n  \n  /**\n   * 开始选择区域\n   * @param {Event} event - 鼠标事件\n   */\n  startSelection(event) {\n    event.preventDefault();\n    event.stopPropagation(); // 阻止事件传播，防止触发平移\n    \n    // 确保不在平移状态\n    this.state.isPanning = false;\n    this.state.isSelecting = true;\n    \n    // 获取鼠标在canvas中的位置\n    const webGLCoords = this.getMousePositionInWebGL(event);\n    \n    // 将WebGL坐标转换为数据坐标，以便跟随缩放移动\n    const dataCoords = this.getDataCoordinates(webGLCoords);\n    \n    // 保存数据坐标\n    this.state.selectionStartData = dataCoords;\n    this.state.selectionEndData = dataCoords; // 初始化结束位置为开始位置\n    \n    // 保存WebGL坐标用于立即渲染\n    this.state.selectionStart = webGLCoords;\n    this.state.selectionEnd = webGLCoords;\n    \n    // 设置鼠标样式\n    this.resources.canvas.style.cursor = \"crosshair\";\n    \n    // 调试日志\n    console.log(\"开始选区: \", {webGLCoords, dataCoords});\n    \n    // 立即渲染\n    this.scheduleRender();\n  }\n  \n  /**\n   * 更新选择区域\n   * @param {Event} event - 鼠标事件\n   */\n  updateSelection(event) {\n    if (!this.state.isSelecting) return;\n    \n    event.preventDefault();\n    event.stopPropagation(); // 阻止事件传播，防止触发平移\n    \n    // 获取鼠标在WebGL坐标系中的位置\n    const webGLCoords = this.getMousePositionInWebGL(event);\n    \n    // 将WebGL坐标转换为数据坐标，以便跟随缩放移动\n    const dataCoords = this.getDataCoordinates(webGLCoords);\n    \n    // 更新选择结束位置（两种坐标都更新）\n    this.state.selectionEndData = dataCoords;\n    this.state.selectionEnd = webGLCoords;\n    \n    // 调试日志\n    console.log(\"更新选区: \", {\n      start: this.state.selectionStartData,\n      end: dataCoords\n    });\n    \n    // 请求渲染以更新选择框\n    this.scheduleRender();\n  }\n  \n  /**\n   * 结束选择区域\n   * @param {Event} event - 鼠标事件\n   */\n  async endSelection(event) {\n    if (!this.state.isSelecting) return;\n    \n    event.preventDefault();\n    event.stopPropagation(); // 阻止事件传播\n    \n    // 获取鼠标在WebGL坐标系中的位置\n    const webGLCoords = this.getMousePositionInWebGL(event);\n    \n    // 将WebGL坐标转换为数据坐标，以便跟随缩放移动\n    const dataCoords = this.getDataCoordinates(webGLCoords);\n    \n    // 更新最终选择结束位置（两种坐标）\n    this.state.selectionEndData = dataCoords;\n    this.state.selectionEnd = webGLCoords;\n    \n    // 计算选区是否有足够大小（使用数据坐标计算）\n    const minX = Math.min(this.state.selectionStartData[0], this.state.selectionEndData[0]);\n    const maxX = Math.max(this.state.selectionStartData[0], this.state.selectionEndData[0]);\n    const minY = Math.min(this.state.selectionStartData[1], this.state.selectionEndData[1]);\n    const maxY = Math.max(this.state.selectionStartData[1], this.state.selectionEndData[1]);\n    \n    // 检查选区是否足够大\n    const hasSelection = Math.abs(maxX - minX) > 0.001 && Math.abs(maxY - minY) > 0.001;\n    \n    // 调试日志\n    console.log(\"结束选区: \", {\n      start: this.state.selectionStartData,\n      end: dataCoords,\n      hasSelection,\n      selectionBox: {minX, maxX, minY, maxY}\n    });\n    \n    this.state.isSelecting = false;\n    \n    if (hasSelection) {\n      // 设置选区可见\n      this.state.selectionVisible = true;\n      \n      // 获取选择区域内的点\n      const selectedPoints = await this.getSelectedPoints();\n      \n      // 触发回调\n      if (this.callbacks.onPointSelected) {\n        this.callbacks.onPointSelected(selectedPoints);\n      }\n    } else {\n      // 如果选区太小，清除选区\n      this.clearSelection();\n    }\n    \n    // 更新渲染\n    this.scheduleRender();\n    \n    // 恢复鼠标样式\n    this.resources.canvas.style.cursor = \"crosshair\"; // 保持选择模式的鼠标样式\n  }\n  \n  /**\n   * 获取选择区域内的点\n   * @returns {Array} 选择区域内的点数组\n   */\n  async getSelectedPoints() {\n    if (!this.state.selectionStartData || !this.state.selectionEndData) return [];\n    \n    // 直接使用已保存的数据坐标\n    const [startX, startY] = this.state.selectionStartData;\n    const [endX, endY] = this.state.selectionEndData;\n    \n    // 计算选择框的范围\n    const minX = Math.min(startX, endX);\n    const maxX = Math.max(startX, endX);\n    const minY = Math.min(startY, endY);\n    const maxY = Math.max(startY, endY);\n    \n    console.log(\"选区范围（数据坐标）:\", minX, maxX, minY, maxY);\n    \n    // 获取四叉树\n    const quadTree = this.data.treeMap.get(\"tree\");\n    if (!quadTree) return [];\n    \n    // 查找范围内的节点\n    const nodes = quadTree.findNodesInRange(quadTree.root, {\n      minX, maxX, minY, maxY\n    });\n    \n    console.log(\"选区内找到节点数:\", nodes.length);\n    \n    try {\n      // 收集选区内的点\n      const selectedPoints = [];\n      \n      // 加载所有属性数据\n      const attributeDataMap = new Map();\n      \n      // 加载所有字段的属性数据\n      for (const fieldName of this.data.field) {\n        let attrData = null;\n        \n        // 检查属性缓存中是否有数据\n        if (this.data.attributeCache && this.data.attributeCache.has(fieldName)) {\n          attrData = this.data.attributeCache.get(fieldName);\n        } else {\n          // 如果缓存中没有，尝试加载\n          console.log(`属性 ${fieldName} 数据不在缓存中，尝试加载`);\n          attrData = await dataLoader.loadCellAttribute(fieldName);\n          \n          // 缓存数据\n          if (attrData && attrData.length > 0) {\n            if (!this.data.attributeCache) {\n              this.data.attributeCache = new Map();\n            }\n            this.data.attributeCache.set(fieldName, attrData);\n          }\n        }\n        \n        if (attrData && attrData.length > 0) {\n          attributeDataMap.set(fieldName, attrData);\n        }\n      }\n      \n      // 处理每个节点\n      for (const node of nodes) {\n        // 获取节点坐标数据\n        const nodeData = await this.safeGetMapData(node.id);\n        if (!nodeData || nodeData.length === 0) continue;\n        \n        // 获取节点的全局索引信息\n        const nodeIndexInfo = this.data.nodeIndices.get(node.id);\n        if (!nodeIndexInfo) {\n          console.warn(`找不到节点 ${node.id} 的索引信息，跳过处理`);\n          continue;\n        }\n        \n        // 过滤出选择框内的点\n        for (let i = 0; i < nodeData.length; i++) {\n          const point = nodeData[i];\n          if (point[0] >= minX && point[0] <= maxX && \n              point[1] >= minY && point[1] <= maxY) {\n            \n            // 计算全局点索引\n            const globalIndex = nodeIndexInfo.startIndex + i;\n            \n            // 构造与SingleCellGraph.selectArea()期望格式兼容的数据结构\n            // 格式：[x, y, ...属性值数组, 颜色数组]\n            const pointData = [\n              point[0], // x坐标\n              point[1]  // y坐标\n            ];\n            \n            // 添加所有属性值\n            const attributeValues = [];\n            for (const fieldName of this.data.field) {\n              const attrData = attributeDataMap.get(fieldName);\n              if (attrData && globalIndex < attrData.length) {\n                attributeValues.push(attrData[globalIndex] || 0);\n              } else {\n                attributeValues.push(0); // 默认值\n              }\n            }\n            \n            // 将属性值添加到点数据中\n            pointData.push(...attributeValues);\n            \n            // 计算颜色值（基于当前选中的颜色属性）\n            let colorValue = [0.4, 0.4, 0.4, 1.0]; // 更深的灰色，确保在白色背景上可见\n            \n            if (this.data.colorIndex >= 0 && this.data.colorIndex < this.data.field.length) {\n              const currentFieldName = this.data.field[this.data.colorIndex];\n              const currentAttrData = attributeDataMap.get(currentFieldName);\n              \n              if (currentAttrData && globalIndex < currentAttrData.length) {\n                const attrValue = currentAttrData[globalIndex] || 0;\n                colorValue = getColorFromValue(attrValue, this.data.colorIndex);\n              }\n            }\n            \n            // 添加颜色信息作为最后一个元素\n            pointData.push(colorValue);\n            \n            selectedPoints.push(pointData);\n          }\n        }\n      }\n      \n      console.log(\"选中点数:\", selectedPoints.length);\n      console.log(\"选中点数据格式示例:\", selectedPoints.length > 0 ? selectedPoints[0] : \"无数据\");\n      \n      return selectedPoints;\n      \n    } catch (err) {\n      console.error(\"获取选区点时出错:\", err);\n      return [];\n    }\n  }\n  \n  /**\n   * 清除选择\n   */\n  clearSelection() {\n    console.log('ScatterRenderer: 开始清除选区状态');\n    \n    // 记录清除前的状态\n    console.log('清除前状态:', {\n      selectionStart: this.state.selectionStart,\n      selectionEnd: this.state.selectionEnd,\n      selectionStartData: this.state.selectionStartData,\n      selectionEndData: this.state.selectionEndData,\n      isSelecting: this.state.isSelecting,\n      selectionVisible: this.state.selectionVisible,\n      selectionMode: this.state.selectionMode\n    });\n    \n    // 清除选区坐标数据\n    this.state.selectionStart = null;\n    this.state.selectionEnd = null;\n    this.state.selectionStartData = null;\n    this.state.selectionEndData = null;\n    this.state.selectedIndices = [];\n    this.state.isSelecting = false;\n    this.state.selectionVisible = false; // 重置选区可见状态\n    this.state.selectionMode = false; // 确保退出选择模式\n    \n    // 确保切换回平移模式\n    this.setPanningMode();\n    \n    // 强制设置为脏标记，确保重新渲染\n    this.state.isDirty = true;\n    \n    // 立即请求重新渲染，确保选区框被清除\n    if (!this.state.animationFrameId) {\n      this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n    }\n    \n    console.log('ScatterRenderer: 选区状态已清除');\n  }\n  \n  /**\n   * 绘制选择框\n   */\n  drawSelectionBox() {\n    // 确保我们有存储的数据坐标\n    if (!this.state.selectionStartData || !this.state.selectionEndData) return;\n    \n    // 将保存的数据坐标转换回当前视图的WebGL坐标\n    const startWebGL = this.getWebGLCoordinates(this.state.selectionStartData);\n    const endWebGL = this.getWebGLCoordinates(this.state.selectionEndData);\n    \n    // 计算选区边界（使用转换后的WebGL坐标）\n    const minX = Math.min(startWebGL[0], endWebGL[0]);\n    const maxX = Math.max(startWebGL[0], endWebGL[0]);\n    const minY = Math.min(startWebGL[1], endWebGL[1]);\n    const maxY = Math.max(startWebGL[1], endWebGL[1]);\n    \n    // 确保选区有一定的大小\n    if (Math.abs(maxX - minX) < 0.01 && Math.abs(maxY - minY) < 0.01) {\n      return; // 选区太小，不绘制\n    }\n    \n    // 先绘制半透明遮罩层\n    this.drawMaskLayer(minX, maxX, minY, maxY);\n    \n    // 再绘制不透明的边框线，确保边框在最上层\n    this.drawBorders(minX, maxX, minY, maxY);\n    \n    // 记录控制台日志用于调试\n    console.log(\"绘制选区框: \", {minX, maxX, minY, maxY});\n  }\n  \n  /**\n   * 绘制遮罩层\n   * @param {number} minX - 左边界\n   * @param {number} maxX - 右边界\n   * @param {number} minY - 下边界\n   * @param {number} maxY - 上边界\n   */\n  drawMaskLayer(minX, maxX, minY, maxY) {\n    if (!this.resources.regl) return;\n    \n    try {\n      // 创建围绕选区的四个矩形，形成遮罩\n      const positions = [\n        // 上方区域\n        [-1, -1], [-1, minY], [1, minY], [-1, -1], [1, -1], [1, minY],\n        // 下方区域\n        [-1, 1], [-1, maxY], [1, maxY], [-1, 1], [1, 1], [1, maxY],\n        // 左侧区域\n        [-1, minY], [minX, minY], [minX, maxY], [-1, minY], [-1, maxY], [minX, maxY],\n        // 右侧区域\n        [1, minY], [maxX, minY], [maxX, maxY], [maxX, maxY], [1, maxY], [1, minY]\n      ];\n      \n      // 创建缓冲区\n      const positionBuffer = this.resources.regl.buffer(positions);\n      \n      // 绘制遮罩\n      this.resources.regl({\n        viewport: {\n          width: this.resources.canvas.width,\n          height: this.resources.canvas.height,\n        },\n        depth: {\n          enable: false, // 禁用深度测试，确保遮罩显示在最上层\n        },\n        blend: {\n          enable: true,\n          func: {\n            src: \"src alpha\",\n            dst: \"one minus src alpha\",\n          },\n        },\n        frag: generateMaskLayerFragmentShader(),\n        vert: `#version 300 es\n          precision mediump float;\n          in vec2 position;\n          void main() {\n            gl_Position = vec4(position, -0.99, 1); // 将z值设置为接近近平面，确保显示在前面\n          }\n        `,\n        attributes: {\n          position: positionBuffer\n        },\n        count: positions.length,\n        primitive: \"triangles\",\n      })();\n      \n      // 释放缓冲区\n      positionBuffer.destroy();\n    } catch (error) {\n      console.error(\"绘制遮罩层错误:\", error);\n    }\n  }\n  \n  /**\n   * 绘制实心边框线（不使用虚线，确保可见性）\n   * @param {number} minX - 左边界\n   * @param {number} maxX - 右边界\n   * @param {number} minY - 下边界\n   * @param {number} maxY - 上边界\n   */\n  drawBorders(minX, maxX, minY, maxY) {\n    if (!this.resources.regl) return;\n    \n    try {\n      // 使用宽线绘制方法 - 预计算粗线顶点\n      // 每条边被扩展为三角形，以便达到更粗的线宽效果\n      // 外边框线宽 - 单位是WebGL坐标系中的尺寸\n      const lineWidth = 0.001;\n      \n      // 绘制四条边的三角形带\n      const thickLineVertices = [\n        // 顶边 (两个三角形)\n        [minX, minY], [maxX, minY], [minX, minY + lineWidth],\n        [minX, minY + lineWidth], [maxX, minY], [maxX, minY + lineWidth],\n        \n        // 右边 (两个三角形)\n        [maxX, minY], [maxX + lineWidth, minY], [maxX, maxY],\n        [maxX, maxY], [maxX + lineWidth, minY], [maxX + lineWidth, maxY],\n        \n        // 底边 (两个三角形)\n        [minX, maxY - lineWidth], [maxX, maxY - lineWidth], [minX, maxY],\n        [minX, maxY], [maxX, maxY - lineWidth], [maxX, maxY],\n        \n        // 左边 (两个三角形)\n        [minX, minY], [minX + lineWidth, minY], [minX, maxY],\n        [minX, maxY], [minX + lineWidth, minY], [minX + lineWidth, maxY]\n      ];\n      \n      // 创建粗边框缓冲区\n      const thickLineBuffer = this.resources.regl.buffer(thickLineVertices);\n      \n      // 绘制粗边框 - 亮蓝色\n      this.resources.regl({\n        viewport: {\n          width: this.resources.canvas.width,\n          height: this.resources.canvas.height,\n        },\n        depth: {\n          enable: false, // 禁用深度测试，确保边框显示在最上层\n        },\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: 'one',\n            dstRGB: 'zero',\n            srcAlpha: 'one',\n            dstAlpha: 'zero'\n          }\n        },\n        frag: `#version 300 es\n          precision mediump float;\n          out vec4 fragColor;\n          void main() {\n            fragColor = vec4(0.2, 0.2, 0.2, 1.0); // 亮蓝色，完全不透明\n          }\n        `,\n        vert: `#version 300 es\n          precision mediump float;\n          in vec2 position;\n          void main() {\n            gl_Position = vec4(position, -0.95, 1.0); // z值设为-0.95，确保在最上层\n          }\n        `,\n        attributes: {\n          position: thickLineBuffer\n        },\n        primitive: \"triangles\", // 使用三角形绘制粗线\n        count: thickLineVertices.length\n      })();\n      \n      // 释放缓冲区\n      thickLineBuffer.destroy();\n      \n      // // 再绘制一个内边框 - 白色，略细一些\n      // // 计算内部偏移量 - 使边框略小一些\n      // const innerOffset = 0.01;  \n      // const innerMinX = minX + innerOffset;\n      // const innerMaxX = maxX - innerOffset;\n      // const innerMinY = minY + innerOffset;\n      // const innerMaxY = maxY - innerOffset;\n      \n      // // 内边框线宽\n      // const innerWidth = 0.003;\n      \n      // // 绘制四条边的三角形带\n      // const innerLineVertices = [\n      //   // 顶边 (两个三角形)\n      //   [innerMinX, innerMinY], [innerMaxX, innerMinY], [innerMinX, innerMinY + innerWidth],\n      //   [innerMinX, innerMinY + innerWidth], [innerMaxX, innerMinY], [innerMaxX, innerMinY + innerWidth],\n        \n      //   // 右边 (两个三角形)\n      //   [innerMaxX, innerMinY], [innerMaxX + innerWidth, innerMinY], [innerMaxX, innerMaxY],\n      //   [innerMaxX, innerMaxY], [innerMaxX + innerWidth, innerMinY], [innerMaxX + innerWidth, innerMaxY],\n        \n      //   // 底边 (两个三角形)\n      //   [innerMinX, innerMaxY - innerWidth], [innerMaxX, innerMaxY - innerWidth], [innerMinX, innerMaxY],\n      //   [innerMinX, innerMaxY], [innerMaxX, innerMaxY - innerWidth], [innerMaxX, innerMaxY],\n        \n      //   // 左边 (两个三角形)\n      //   [innerMinX, innerMinY], [innerMinX + innerWidth, innerMinY], [innerMinX, innerMaxY],\n      //   [innerMinX, innerMaxY], [innerMinX + innerWidth, innerMinY], [innerMinX + innerWidth, innerMaxY]\n      // ];\n      \n      // const innerLineBuffer = this.resources.regl.buffer(innerLineVertices);\n      \n      // // 绘制内边框 - 白色\n      // this.resources.regl({\n      //   viewport: {\n      //     width: this.resources.canvas.width,\n      //     height: this.resources.canvas.height,\n      //   },\n      //   depth: {\n      //     enable: false, // 禁用深度测试\n      //   },\n      //   blend: {\n      //     enable: true,\n      //     func: {\n      //       srcRGB: 'one',\n      //       dstRGB: 'zero',\n      //       srcAlpha: 'one',\n      //       dstAlpha: 'zero'\n      //     }\n      //   },\n      //   frag: `#version 300 es\n      //     precision mediump float;\n      //     out vec4 fragColor;\n      //     void main() {\n      //       fragColor = vec4(1.0, 1.0, 1.0, 1.0); // 白色，完全不透明\n      //     }\n      //   `,\n      //   vert: `#version 300 es\n      //     precision mediump float;\n      //     in vec2 position;\n      //     void main() {\n      //       gl_Position = vec4(position, -0.94, 1.0); // z值设为-0.94，确保在蓝色边框之上\n      //     }\n      //   `,\n      //   attributes: {\n      //     position: innerLineBuffer\n      //   },\n      //   primitive: \"triangles\", // 使用三角形绘制\n      //   count: innerLineVertices.length\n      // })();\n      \n      // // 释放内边框缓冲区\n      // innerLineBuffer.destroy();\n      \n      // 记录调试信息\n      // console.log(\"边框已绘制\", {minX, maxX, minY, maxY});\n    } catch (error) {\n      console.error(\"绘制边框错误:\", error);\n    }\n  }\n  \n  /**\n   * 处理点悬停\n   * @param {Event} event - 鼠标事件\n   */\n  async hoverPoint(event) {\n    // 如果在选择模式或正在平移或选择中，不处理悬停\n    if (this.state.selectionMode || this.state.isPanning || this.state.isSelecting) return;\n    \n    // 获取鼠标位置\n    const [mouseX, mouseY] = this.getMousePositionInWebGL(event);\n    \n    // 转换为数据坐标\n    const [dataX, dataY] = this.getDataCoordinates([mouseX, mouseY]);\n    \n    // 获取四叉树\n    const quadTree = this.data.treeMap.get(\"tree\");\n    if (!quadTree) return;\n    \n    // 查找鼠标位置所在的节点\n    const node = quadTree.findNodeByPoint(dataX, dataY);\n    if (!node) {\n      // 如果没有找到节点，清除悬停状态\n      if (this.state.hoverCategory !== -1) {\n        this.state.hoverCategory = -1;\n        this.scheduleRender();\n      }\n      \n      // 隐藏提示框\n      this.hideTooltip();\n      return;\n    }\n    \n    // 从缓存获取节点坐标数据\n    const nodeData = await this.safeGetMapData(node.id) || [];\n    \n    // 获取节点的全局索引信息\n    const nodeIndexInfo = this.data.nodeIndices.get(node.id);\n    if (!nodeIndexInfo) {\n      console.warn(`找不到节点 ${node.id} 的索引信息`);\n      return;\n    }\n    \n    // 定义动态阈值，基于缩放级别调整\n    const baseThreshold = 5; // 基础像素值\n    \n    // 缩放调整因子 - 随着放大缩放值会变小，需要更敏感的检测\n    const zoomAdjustment = Math.max(0.2, 1.5 / Math.sqrt(this.state.zoom));\n    \n    // 计算最终阈值\n    const threshold = baseThreshold * zoomAdjustment * \n                    (2 / Math.min(this.resources.canvas.width, this.resources.canvas.height));\n    \n    // 查找最近的点\n    let hoveredPoint = null;\n    let closestDistance = Infinity;\n    let localPointIndex = -1;\n    \n    for (let i = 0; i < nodeData.length; i++) {\n      // 转换点坐标到WebGL坐标\n      const [px, py] = this.getWebGLCoordinates([nodeData[i][0], nodeData[i][1]]);\n      \n      // 计算距离\n      const distX = px - mouseX;\n      const distY = py - mouseY;\n      const distance = Math.sqrt(distX * distX + distY * distY);\n      \n      // 跟踪最近的点\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        \n        // 检查是否在阈值范围内\n        if (distance < threshold) {\n          hoveredPoint = nodeData[i];\n          localPointIndex = i;\n        }\n      }\n    }\n    \n    // 处理悬停状态\n    if (hoveredPoint) {\n      // 计算全局点索引\n      const globalPointIndex = nodeIndexInfo.startIndex + localPointIndex;\n      \n      // 获取属性值\n      let attrValue = -1;\n      \n      // 如果有指定的颜色属性索引，获取对应的属性值\n      if (this.data.colorIndex >= 0 && this.data.colorIndex < this.data.field.length) {\n        const fieldName = this.data.field[this.data.colorIndex];\n        \n        // 检查属性缓存中是否有数据\n        if (this.data.attributeCache && this.data.attributeCache.has(fieldName)) {\n          const attrData = this.data.attributeCache.get(fieldName);\n          if (globalPointIndex < attrData.length) {\n            attrValue = attrData[globalPointIndex] || 0;\n          }\n        } else {\n          // 如果缓存中没有，提示需要加载\n          console.log(`属性 ${fieldName} 数据不在缓存中，需要加载`);\n        }\n      }\n      \n      // 保存当前悬停的属性值\n      this.state.hoverCategory = attrValue;\n      console.log(`设置悬停类别: ${attrValue}`);\n      \n      // 显示提示框，传递全局索引\n      this.showTooltip(hoveredPoint, event, attrValue, globalPointIndex);\n      \n      // 触发悬停回调\n      if (this.callbacks.onPointHovered) {\n        this.callbacks.onPointHovered({\n          ...hoveredPoint,\n          attributeValue: attrValue,\n          globalIndex: globalPointIndex\n        });\n      }\n    } else {\n      // 清除悬停状态\n      this.state.hoverCategory = -1;\n      \n      // 隐藏提示框\n      this.hideTooltip();\n    }\n    \n    // 更新渲染\n    this.scheduleRender();\n  }\n  \n  /**\n   * 设置特定属性值对应的悬停类别\n   * @param {number} category - 类别值\n   */\n  setHoverCategory(category) {\n    // 清除过渡状态\n    this.state.isTransitioning = false;\n    \n    if (this.state.hoverCategory !== category) {\n      this.state.hoverCategory = category;\n      this.scheduleRender();\n      console.log(`设置悬停类别: ${category}`);\n    }\n  }\n  \n  /**\n   * 清除悬停类别\n   */\n  clearHoverCategory() {\n    if (this.state.hoverCategory !== -1) {\n      console.log('清除悬停类别，保留勾选高亮状态');\n      \n      // 保存当前的勾选高亮状态\n      const savedHighlightState = {\n        highlightAttributeName: this.state.highlightAttributeName,\n        highlightAttributeValues: [...(this.state.highlightAttributeValues || [])],\n        highlightByAttribute: this.state.highlightByAttribute,\n        isCheckHighlight: this.state.isCheckHighlight\n      };\n      \n      // 只清除悬停相关状态\n      this.state.hoverCategory = -1;\n      this.state.hoverAttributeName = null;\n      this.state.hoverValueIndex = -1;\n      \n      // 清除悬停纹理\n      if (this.resources.hoverTexture) {\n        this.resources.hoverTexture.destroy();\n        this.resources.hoverTexture = null;\n      }\n      \n      // 确保勾选高亮状态不被意外清除\n      this.state.highlightAttributeName = savedHighlightState.highlightAttributeName;\n      this.state.highlightAttributeValues = savedHighlightState.highlightAttributeValues;\n      this.state.highlightByAttribute = savedHighlightState.highlightByAttribute;\n      this.state.isCheckHighlight = savedHighlightState.isCheckHighlight;\n      \n      // 强制设置为脏标记，确保重新渲染\n      this.state.isDirty = true;\n      \n      // 立即请求重新渲染，确保显示更新\n      if (!this.state.animationFrameId) {\n        this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n      }\n      \n      console.log('悬停状态已清除，勾选高亮状态已保留:', savedHighlightState);\n    }\n  }\n  \n  /**\n   * 显示提示框\n   * @param {Array} point - 悬停的点\n   * @param {Event} event - 鼠标事件\n   * @param {number} attrValue - 属性值\n   * @param {number} globalIndex - 全局点索引\n   */\n  showTooltip(point, event, attrValue = -1, globalIndex = -1) {\n    // 检查是否存在tooltip元素，如果不存在则创建\n    let tooltip = document.getElementById(\"tooltip\");\n    if (!tooltip) {\n      tooltip = document.createElement(\"div\");\n      tooltip.id = \"tooltip\";\n      tooltip.className = \"tooltip-main\";\n      \n      // 添加明显可见的样式\n      const tooltipStyle = `\n        position: absolute;\n        background-color: #fff;\n        border: 2px solid #ff0000;\n        border-radius: 4px;\n        padding: 8px;\n        box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n        z-index: 9999;\n        max-width: 250px;\n        pointer-events: none;\n        font-family: Arial, sans-serif;\n      `;\n      tooltip.style.cssText = tooltipStyle;\n      \n      // 添加到canvas的父容器中\n      this.container.appendChild(tooltip);\n    }\n    \n    // 获取颜色值\n    const color = getColorFromValue(attrValue, this.data.colorIndex);\n    \n    // 格式化颜色为CSS格式\n    const colorStr = `rgba(${color[0] * 255}, ${color[1] * 255}, ${color[2] * 255}, ${color[3]})`;\n    \n    // 获取字段名称\n    const fieldName = this.data.colorIndex >= 0 && this.data.colorIndex < this.data.field.length\n      ? this.data.field[this.data.colorIndex]\n      : 'category';\n    \n    // 获取分类名称\n    const categoryName = this.options.fieldValue && \n                         this.options.fieldValue[fieldName] ? \n                         this.options.fieldValue[fieldName][attrValue] || \n                         `Value: ${attrValue}` : `Value: ${attrValue}`;\n    \n    // 设置提示框内容\n    tooltip.innerHTML = `\n      <p style=\"margin: 0 0 8px 0;\">\n        <span style=\"display:inline-block;width:20px;height:20px;border-radius:50%;background-color:${colorStr};\"></span>\n        <span style=\"margin-left:10px;font-size:16px;font-weight:bold;\">${categoryName}</span>\n      </p>\n      <p style=\"margin:0 0 5px 30px;font-size:14px;\"> Colored by ${fieldName}</p>\n      <p style=\"margin:0 0 0 30px;font-size:12px; color:#828282;\">Coords: (${point[0].toFixed(3)}, ${point[1].toFixed(3)})</p>\n      <p style=\"margin:0 0 0 30px;font-size:12px; color:#828282;\">Index: ${globalIndex}</p>\n    `;\n    \n    // 获取canvas的位置\n    const canvasRect = this.container.getBoundingClientRect();\n    \n    // 计算鼠标相对于canvas的位置\n    const mouseX = event.clientX - canvasRect.left;\n    const mouseY = event.clientY - canvasRect.top;\n    \n    // 显示tooltip以获取尺寸\n    tooltip.style.display = \"block\";\n    const tooltipWidth = tooltip.offsetWidth;\n    const tooltipHeight = tooltip.offsetHeight;\n    \n    // 计算tooltip位置 - 右下角优先，但保持在container内\n    let tooltipX = mouseX + 20; // 右侧偏移20px\n    let tooltipY = mouseY + 20; // 下方偏移20px\n    \n    // 确保tooltip在container内\n    if (tooltipX + tooltipWidth > canvasRect.width) {\n      tooltipX = mouseX - tooltipWidth - 10; // 改为左侧\n    }\n    \n    if (tooltipY + tooltipHeight > canvasRect.height) {\n      tooltipY = mouseY - tooltipHeight - 10; // 改为上方\n    }\n    \n    // 确保不超出左上边界\n    tooltipX = Math.max(5, tooltipX);\n    tooltipY = Math.max(5, tooltipY);\n    \n    // 设置位置\n    tooltip.style.left = `${tooltipX}px`;\n    tooltip.style.top = `${tooltipY}px`;\n    \n    // 确保可见并有过渡效果\n    tooltip.style.transition = \"opacity 0.2s\";\n    tooltip.style.opacity = \"1\";\n  }\n  \n  /**\n   * 隐藏提示框\n   */\n  hideTooltip() {\n    const tooltip = document.getElementById(\"tooltip\");\n    if (tooltip) {\n      tooltip.style.opacity = \"0\";\n      // 延迟设置display:none，让淡出效果生效\n      setTimeout(() => {\n        if (tooltip) tooltip.style.display = \"none\";\n      }, 200);\n    }\n  }\n  \n  /**\n   * 启动渲染循环\n   */\n  startRenderLoop() {\n    if (this.state.animationFrameId !== null) {\n      cancelAnimationFrame(this.state.animationFrameId);\n    }\n    \n    this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n  }\n  \n  /**\n   * 渲染帧\n   */\n  renderFrame() {\n    // 计算需要渲染的条件：有变更或使用惯性滚动\n    const shouldRender = this.state.isDirty || \n                         this.state.isZooming || \n                         (this.state.inertiaEnabled && \n                          (Math.abs(this.state.velocity.x) > 0.01 || \n                           Math.abs(this.state.velocity.y) > 0.01));\n    \n    if (shouldRender) {\n      perfTracker.startMark('render');\n      \n      try {\n        // 检查必要资源是否可用\n        if (!this.resources.positionBuffer || !this.resources.colorTexture) {\n          console.warn(\"渲染资源不完整，跳过渲染\");\n        } else {\n          // 更新FPS计数器\n          const fps = fpsCounter.update();\n          \n          // 执行渲染\n          if (this.resources.drawScatter) {\n            this.resources.regl.clear({\n              color: [1, 1, 1, 1],\n              depth: 1\n            });\n            \n            // 确保将当前颜色字段索引正确传递给着色器\n            // 直接从data.colorIndex读取，不使用uniforms\n            const currentColorField = this.data.colorIndex !== undefined ? \n                                     this.data.colorIndex : 0;\n            \n            // 检查是否有高亮纹理\n            const hasHighlight = this.resources.highlightTexture !== null && \n                               (this.state.highlightAttributeName !== null || this.state.highlightByAttribute);\n            \n            // 悬停状态判断\n            const isHoverMode = this.state.hoverCategory !== -1;\n            \n            // 鼠标在列表区域但没有悬停在具体选项上\n            const isMouseInEmptyArea = this.state.isMouseInListArea && !isHoverMode;\n            \n            // 是否是勾选高亮模式\n            const isCheckMode = this.state.isCheckHighlight;\n            \n            // 勾选高亮模式不受鼠标位置影响；只有在普通高亮模式下才考虑鼠标位置\n            // 当isCheckMode为true时，确保effectiveHighlight为true\n            const effectiveHighlight = isCheckMode ? true : \n                                     (hasHighlight && (!isHoverMode && !isMouseInEmptyArea));\n            \n            try {\n              // 调试日志\n              if (hasHighlight || isHoverMode || isMouseInEmptyArea) {\n                console.log(`渲染状态 - 高亮属性: ${this.state.highlightAttributeName}, ` + \n                            `值: ${this.state.highlightAttributeValues}, ` + \n                            `基于属性高亮: ${this.state.highlightByAttribute}, ` + \n                            `悬停类别: ${this.state.hoverCategory}, ` + \n                            `悬停模式: ${isHoverMode}, ` +\n                            `鼠标在列表空白处: ${isMouseInEmptyArea}, ` +\n                            `有效高亮: ${effectiveHighlight}`);\n              }\n              \n              // 是否是基于属性的高亮\n              const isAttributeHighlight = this.state.highlightByAttribute;\n              \n              // 是否是勾选高亮（勾选时非高亮点变灰）\n              const isCheckHighlight = this.state.isCheckHighlight || false;\n              \n              // 调试：记录关键渲染参数\n              console.log('渲染参数:', {\n                hasColorTexture: !!this.resources.colorTexture,\n                hasGeneColorTexture: !!this.resources.geneColorTexture,\n                hasGeneData: this.data.geneData !== null && this.resources.geneColorTexture !== null,\n                total: this.data.total,\n                filterNum: this.data.filterNum || 0\n              });\n              \n              // 传递所有状态给着色器\n              this.resources.drawScatter({\n                position: this.resources.positionBuffer,\n                transform: this.createTransformMatrix(),\n                zoom: this.state.zoom,\n                textureSize: this.resources.textureSize,\n                colorTexture: this.resources.colorTexture,\n                highlightTexture: hasHighlight ? this.resources.highlightTexture : this.resources.colorTexture,\n                hoverTexture: this.resources.hoverTexture || this.resources.colorTexture, // 使用悬停纹理，如不存在则使用颜色纹理\n                filterTexture: this.resources.filterTexture || this.resources.colorTexture, // 当没有筛选纹理时使用颜色纹理作为默认值\n                filterNum: this.data.filterNum || 0,\n                hoverCategory: this.state.hoverCategory !== -999 ? this.state.hoverCategory : -1, // 避免使用特殊值-999 \n                currentColorField: currentColorField,\n                geneExpRange: this.options.geneExpRange || {range: {start: -1.0, end: -1.0}},\n                // 对于勾选高亮，始终保持高亮效果启用，不管鼠标位置\n                hasHighlight: isCheckMode ? true : (effectiveHighlight || this.state.highlightByAttribute),\n                isAttributeHighlight: isAttributeHighlight, // 标识是否是基于属性高亮\n                isCheckHighlight: isCheckHighlight, // 标识是否是勾选高亮，影响非高亮点渲染\n                geneColorTexture: this.resources.geneColorTexture || this.resources.colorTexture, // 如果没有基因颜色纹理，使用默认颜色纹理\n                hasGeneData: this.data.geneData !== null && this.resources.geneColorTexture !== null, // 确保既有数据又有纹理\n              });\n              \n              // 绘制选择框（如果存在且应该显示）\n              if ((this.state.isSelecting || this.state.selectionVisible) && \n                  this.state.selectionStart && this.state.selectionEnd) {\n                this.drawSelectionBox();\n              }\n            } catch (renderError) {\n              console.error(\"绘制失败:\", renderError);\n              \n              // 尝试重建绘制命令\n              console.warn(\"尝试重建绘制命令...\");\n              this.resources.drawScatter = null;\n              if (this.createDrawCommand()) {\n                console.log(\"绘制命令已重建，将在下一帧重试\");\n              }\n            }\n          }\n        }\n        \n        const renderTime = perfTracker.endMark('render');\n        perfTracker.trackRenderTime(renderTime);\n        perfWatcher.checkRenderTime(renderTime);\n        \n        // 重置脏标记\n        this.state.isDirty = false;\n        \n      } catch (error) {\n        console.error(\"渲染失败:\", error);\n        this.handleError(\"渲染时\", error);\n      }\n    }\n    \n    // 应用惯性和动画\n    if (this.state.isZooming) {\n      this.animateZoom();\n    }\n    \n    // 安排下一帧\n    this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n  }\n  \n  /**\n   * 设置交互模式\n   * @param {string} mode - 交互模式，可选值：\"pan\"（平移模式）或\"select\"（选择模式）\n   * @returns {boolean} - 是否成功设置模式\n   */\n  setMode(mode) {\n    if (!this.resources.canvas) {\n      console.error(\"无法设置模式：canvas不存在\");\n      return false;\n    }\n    \n    // 如果已经在该模式，不重复设置\n    if ((mode.toLowerCase() === \"pan\" && !this.state.selectionMode) || \n        (mode.toLowerCase() === \"select\" && this.state.selectionMode)) {\n      return true;\n    }\n    \n    switch (mode.toLowerCase()) {\n      case \"pan\":\n        this.setPanningMode();\n        return true;\n        \n      case \"select\":\n        this.setSelectionMode();\n        return true;\n        \n      default:\n        console.error(`未知的模式: ${mode}，可选值为 \"pan\" 或 \"select\"`);\n        return false;\n    }\n  }\n  \n  /**\n   * 获取当前模式\n   * @returns {string} - 当前模式，\"pan\"或\"select\"\n   */\n  getMode() {\n    return this.state.selectionMode ? \"select\" : \"pan\";\n  }\n  \n  /**\n   * 测试选区功能\n   * 提供给用户快速测试选区功能\n   * @param {boolean} enableSelection - 是否启用选区模式\n   * @param {boolean} drawTestBox - 是否绘制测试选区框\n   * @returns {string} - 测试状态信息\n   */\n  testSelection(enableSelection = true, drawTestBox = true) {\n    // 当前模式\n    const currentMode = this.getMode();\n    const statusMessage = [];\n    \n    statusMessage.push(`当前模式: ${currentMode}`);\n    \n    if (enableSelection) {\n      // 切换到选区模式\n      this.setMode(\"select\");\n      statusMessage.push(\"已切换到选区模式\");\n      \n      if (drawTestBox) {\n        // 绘制测试选区框\n        this.forceDrawSelectionBox(false);\n        statusMessage.push(\"已绘制测试选区框\");\n      } else {\n        statusMessage.push(\"请拖动鼠标进行框选\");\n      }\n      \n      if (this.callbacks.onPointSelected) {\n        statusMessage.push(\"选中回调已设置，选中后将触发回调\");\n      } else {\n        statusMessage.push(\"警告: 未设置选中回调函数(onPointSelected)\");\n        \n        // 自动添加一个测试回调\n        this.callbacks.onPointSelected = (points) => {\n          console.log(`选中了 ${points.length} 个点`);\n          alert(`选中了 ${points.length} 个点`);\n        };\n        statusMessage.push(\"已添加测试回调\");\n      }\n    } else {\n      // 切换回平移模式\n      this.setMode(\"pan\");\n      statusMessage.push(\"已切换回平移模式\");\n      \n      // 如果有测试框，清除它\n      if (this.state.selectionVisible) {\n        this.clearSelection();\n        statusMessage.push(\"已清除测试选区框\");\n      }\n    }\n    \n    // 记录WebGL和混合设置\n    const gl = this.resources.regl._gl;\n    if (gl) {\n      statusMessage.push(`WebGL版本: ${gl.getParameter(gl.VERSION)}`);\n      statusMessage.push(`最大纹理大小: ${gl.getParameter(gl.MAX_TEXTURE_SIZE)}`);\n    }\n    \n    return statusMessage.join(\"\\n\");\n  }\n  \n  /**\n   * 隐藏或显示选区框\n   * @param {boolean} visible - 是否显示选区框\n   */\n  setSelectionVisible(visible = true) {\n    if (this.state.selectionStart && this.state.selectionEnd) {\n      this.state.selectionVisible = visible;\n      this.scheduleRender();\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * 强制绘制测试选区框\n   * 主要用于调试选区框的绘制功能\n   * @param {boolean} clearAfter - 绘制后是否清除选区\n   * @returns {boolean} - 是否成功绘制\n   */\n  forceDrawSelectionBox(clearAfter = false) {\n    // 如果没有选区数据，创建测试数据\n    if (!this.state.selectionStartData || !this.state.selectionEndData) {\n      // 创建一个测试选区 - 尺寸固定，居中显示\n      const centerX = 0;\n      const centerY = 0;\n      const size = 0.5; // 选区大小\n      \n      // 将创建两个对角顶点\n      this.state.selectionStartData = [centerX - size/2, centerY - size/2];\n      this.state.selectionEndData = [centerX + size/2, centerY + size/2];\n      \n      // 转换为WebGL坐标\n      this.state.selectionStart = this.getWebGLCoordinates(this.state.selectionStartData);\n      this.state.selectionEnd = this.getWebGLCoordinates(this.state.selectionEndData);\n    }\n    \n    // 强制显示选区\n    this.state.selectionVisible = true;\n    \n    // 调试日志\n    console.log(\"强制绘制选区: \", {\n      start: this.state.selectionStartData,\n      end: this.state.selectionEndData,\n      startWebGL: this.state.selectionStart,\n      endWebGL: this.state.selectionEnd\n    });\n    \n    // 请求渲染\n    this.scheduleRender();\n    \n    // 如果需要清除选区\n    if (clearAfter) {\n      // 延迟3秒后清除选区\n      setTimeout(() => {\n        this.clearSelection();\n        this.scheduleRender();\n      }, 3000);\n    }\n    \n    return true;\n  }\n  \n  /**\n   * 将当前画布保存为PNG图像\n   * @param {string} fileName - 下载文件的名称(可选)\n   */\n  downloadCanvasAsPNG(fileName = 'scatter_plot') {\n    try {\n      const canvas = this.resources.canvas;\n      if (!canvas) {\n        console.error('无法下载：画布不存在');\n        return;\n      }\n      \n      // 确保文件名有效\n      const safeFileName = fileName.replace(/[^a-z0-9]/gi, '_').toLowerCase();\n      \n      // 创建下载链接\n      const link = document.createElement('a');\n      link.download = `${safeFileName}_${new Date().toISOString().split('T')[0]}.png`;\n      \n      // 将画布内容转换为数据URL\n      link.href = canvas.toDataURL('image/png');\n      \n      // 触发下载\n      document.body.appendChild(link);\n      link.click();\n      \n      // 清理DOM\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(link.href);\n      }, 100);\n      \n      console.log('图像已下载');\n    } catch (error) {\n      console.error('下载图像时出错:', error);\n    }\n  }\n\n  /**\n   * 设置鼠标是否在列表区域标志\n   * @param {boolean} isInArea - 是否在列表区域\n   */\n  setMouseInListArea(isInArea) {\n    // 只在状态变化时才触发重新渲染\n    if (this.state.isMouseInListArea !== isInArea) {\n      console.log(`鼠标${isInArea ? '进入' : '离开'}列表区域`);\n      this.state.isMouseInListArea = isInArea;\n      \n      // 在勾选高亮模式下，不需要因为鼠标位置变化而重新渲染\n      // 只有在没有勾选高亮时才因鼠标位置变化而重新渲染\n      if (!this.state.isCheckHighlight) {\n        this.state.isDirty = true;\n      }\n    }\n  }\n  \n  /**\n   * 根据属性名和属性值索引设置悬停高亮\n   * @param {string} attributeName - 属性名称\n   * @param {number} valueIndex - 属性值索引\n   * @returns {Promise<boolean>} - 是否成功设置悬停高亮\n   */\n  async setHoverByAttribute(attributeName, valueIndex) {\n    try {\n      // 如果参数无效，则清除悬停状态\n      if (!attributeName || valueIndex === undefined || valueIndex < 0) {\n        console.log(`悬停参数无效: ${attributeName}:${valueIndex}，清除悬停`);\n        this.clearHoverCategory();\n        return false;\n      }\n\n      console.log(`设置基于属性的悬停: ${attributeName}, 值索引: ${valueIndex}`);\n\n      // 检查属性名是否在字段列表中\n      if (!this.data.field || !this.data.field.includes(attributeName)) {\n        console.error(`属性 ${attributeName} 不在字段列表中，可用字段: ${this.data.field.join(', ')}`);\n        return false;\n      }\n\n      // 加载悬停属性数据 - 这里是关键，加载当前悬停的属性数据，而不是使用当前渲染色彩的属性\n      const attrData = await this.loadHighlightAttributeData(attributeName);\n      if (!attrData || attrData.length === 0) {\n        console.error(`无法加载属性 ${attributeName} 的数据，或数据为空`);\n        return false;\n      }\n\n      // 创建临时悬停纹理 - 用于存储当前悬停属性的二进制标记\n      if (!this.resources.hoverTexture) {\n        console.log(`创建悬停纹理，尺寸: ${this.resources.textureSize}`);\n        this.resources.hoverTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n\n      // 更新悬停纹理数据 - 将符合特定属性值的点标记出来\n      console.log(`更新悬停纹理数据，总点数: ${this.data.total}，目标值索引: ${valueIndex}`);\n\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        // 计算这一行的起始点索引\n        const startPointIndex = row * texWidth;\n        \n        // 计算这一行要处理的点数量（考虑最后一行可能不满）\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break; // 已处理完所有点\n        \n        // 创建这一行的纹理数据\n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 标记符合条件的点\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          \n          // 检查点的属性值是否匹配悬停值\n          let isHovered = false;\n          \n          if (globalPointIndex < attrData.length) {\n            const pointValue = Math.round(attrData[globalPointIndex]); // 确保整数比较\n            isHovered = pointValue === valueIndex;\n          }\n          \n          // 将悬停状态存储在透明度通道\n          rowData[i * 4] = isHovered ? 1.0 : 0.0;\n          rowData[i * 4 + 1] = 0.0;\n          rowData[i * 4 + 2] = 0.0;\n          rowData[i * 4 + 3] = isHovered ? 1.0 : 0.0;\n        }\n        \n        // 更新这一行到悬停纹理\n        this.resources.hoverTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0, // 从行首开始\n          row\n        );\n      }\n      \n      // 设置悬停状态 - 使用特殊值标记这是基于属性的悬停而非值的悬停\n      this.state.hoverCategory = -999; // 特殊值，表示使用悬停纹理\n      this.state.hoverAttributeName = attributeName;\n      this.state.hoverValueIndex = valueIndex;\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`设置基于属性的悬停出错:`, error);\n      this.clearHoverByAttribute();\n      return false;\n    }\n  }\n  \n  /**\n   * 清除属性悬停状态\n   */\n  clearHoverByAttribute() {\n    // 清除悬停状态变量\n    this.state.hoverCategory = -1;\n    this.state.hoverAttributeName = null;\n    this.state.hoverValueIndex = -1;\n    \n    // 如果悬停纹理存在，清空它\n    if (this.resources.hoverTexture) {\n      this.resources.hoverTexture.destroy();\n      this.resources.hoverTexture = null;\n    }\n    \n    // 强制设置为脏标记，确保重新渲染\n    this.state.isDirty = true;\n  }\n  \n  /**\n   * 加载指定属性数据并根据值索引高亮相关点\n   * @param {string} attributeName - 属性名称\n   * @param {number} valueIndex - 属性值索引\n   * @param {boolean} isCheckHighlight - 是否是勾选高亮模式（勾选时其他点变灰，悬停时保持原色）\n   * @returns {Promise<boolean>} - 是否成功设置高亮\n   */\n  async loadAttributeAndHighlight(attributeName, valueIndex, isCheckHighlight = false) {\n    try {\n      // 如果参数无效，清除高亮状态\n      if (!attributeName || valueIndex === undefined || valueIndex < 0) {\n        console.log(`高亮参数无效: ${attributeName}:${valueIndex}，清除高亮`);\n        this.clearAttributeHighlight();\n        return false;\n      }\n\n      console.log(`加载属性并高亮: ${attributeName}, 值索引: ${valueIndex}, 勾选高亮: ${isCheckHighlight}`);\n\n      // 检查属性名是否在字段列表中\n      if (!this.data.field || !this.data.field.includes(attributeName)) {\n        console.error(`属性 ${attributeName} 不在字段列表中，可用字段: ${this.data.field.join(', ')}`);\n        return false;\n      }\n\n      // 加载属性数据\n      const attrData = await this.loadHighlightAttributeData(attributeName);\n      if (!attrData || attrData.length === 0) {\n        console.error(`无法加载属性 ${attributeName} 的数据，或数据为空`);\n        return false;\n      }\n\n      // 创建高亮纹理\n      if (!this.resources.highlightTexture) {\n        // 创建高亮纹理\n        console.log(`创建高亮纹理，尺寸: ${this.resources.textureSize}`);\n        this.resources.highlightTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n\n      // 更新状态\n      this.state.highlightAttributeName = attributeName;\n      this.state.highlightAttributeValues = [valueIndex]; // 修改：更新高亮属性值数组\n      this.state.highlightByAttribute = true; // 标记这是基于属性的高亮\n      this.state.isCheckHighlight = isCheckHighlight; // 新增：标记是否是勾选高亮\n\n      // 更新高亮纹理数据\n      console.log(`更新高亮纹理数据，总点数: ${this.data.total}`);\n\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n\n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        // 计算这一行的起始点索引\n        const startPointIndex = row * texWidth;\n        \n        // 计算这一行要处理的点数量（考虑最后一行可能不满）\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break; // 已处理完所有点\n        \n        // 创建这一行的纹理数据\n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 设置高亮数据\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          \n          // 如果点的属性值与高亮值匹配，则设置为1，否则为0\n          // 确保不会访问超出attrData范围的索引\n          let isHighlighted = false;\n          \n          if (globalPointIndex < attrData.length) {\n            const pointValue = Math.round(attrData[globalPointIndex]);\n            // 修改：检查点值是否在高亮值数组中（支持多个值的并集）\n            isHighlighted = this.state.highlightAttributeValues.some(highlightValue => \n              pointValue === highlightValue);\n          }\n          \n          // 将高亮状态设置到alpha通道\n          rowData[i * 4] = 0;\n          rowData[i * 4 + 1] = 0;\n          rowData[i * 4 + 2] = 0;\n          rowData[i * 4 + 3] = isHighlighted ? 1.0 : 0.0;\n        }\n        \n        // 更新这一行到纹理\n        this.resources.highlightTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0, // 从行首开始\n          row\n        );\n      }\n      \n      console.log(`属性高亮纹理更新完成，属性: ${attributeName}, 值索引: ${valueIndex}`);\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`设置属性高亮时出错:`, error);\n      this.clearAttributeHighlight();\n      return false;\n    }\n  }\n  \n  /**\n   * 清除属性高亮状态\n   */\n  clearAttributeHighlight() {\n    console.log('完全清除所有属性高亮状态');\n    \n    // 清除单属性高亮状态变量\n    this.state.highlightAttributeName = null;\n    this.state.highlightAttributeValues = []; // 修改：清空高亮属性值数组\n    this.state.highlightByAttribute = false;\n    this.state.isCheckHighlight = false; // 重要：确保清除勾选高亮标记\n    \n    // 清除多属性交集高亮状态\n    this.state.multiAttributeHighlight.enabled = false;\n    this.state.multiAttributeHighlight.attributes.clear();\n    this.state.multiAttributeHighlight.isCheckHighlight = false;\n    \n    // 如果高亮纹理存在，将其清空\n    if (this.resources.highlightTexture) {\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      try {\n        // 创建全零的数据数组（清除所有高亮标记）\n        const emptyData = new Float32Array(texWidth * texHeight * 4).fill(0);\n        \n        // 更新纹理 - 确保使用完整的纹理尺寸\n        this.resources.highlightTexture.subimage({\n          data: emptyData,\n          width: texWidth,\n          height: texHeight\n        });\n        \n        console.log('属性高亮纹理已清除');\n      } catch (error) {\n        console.error('清除高亮纹理时出错:', error);\n      }\n    }\n    \n    // 强制设置为脏标记，确保重新渲染\n    this.state.isDirty = true;\n  }\n  \n  /**\n   * 设置多个属性值的高亮（并集）\n   * @param {string} attributeName - 属性名称\n   * @param {Array<number>} valueIndices - 属性值索引数组\n   * @param {boolean} isCheckHighlight - 是否是勾选高亮模式\n   * @returns {Promise<boolean>} - 是否成功设置高亮\n   */\n  async setMultipleAttributeHighlight(attributeName, valueIndices, isCheckHighlight = false) {\n    try {\n      // 检查参数有效性\n      if (!attributeName || !Array.isArray(valueIndices) || valueIndices.length === 0) {\n        console.log(`多值高亮参数无效: ${attributeName}:${valueIndices}，清除高亮`);\n        this.clearAttributeHighlight();\n        return false;\n      }\n\n      // 过滤掉无效的值索引\n      const validValueIndices = valueIndices.filter(index => \n        typeof index === 'number' && index >= 0);\n      \n      if (validValueIndices.length === 0) {\n        console.log(`没有有效的值索引，清除高亮`);\n        this.clearAttributeHighlight();\n        return false;\n      }\n\n      console.log(`设置多值高亮: ${attributeName}, 值索引: [${validValueIndices.join(', ')}], 勾选高亮: ${isCheckHighlight}`);\n\n      // 检查属性名是否在字段列表中\n      if (!this.data.field || !this.data.field.includes(attributeName)) {\n        console.error(`属性 ${attributeName} 不在字段列表中，可用字段: ${this.data.field.join(', ')}`);\n        return false;\n      }\n\n      // 加载属性数据\n      const attrData = await this.loadHighlightAttributeData(attributeName);\n      if (!attrData || attrData.length === 0) {\n        console.error(`无法加载属性 ${attributeName} 的数据，或数据为空`);\n        return false;\n      }\n\n      // 创建高亮纹理\n      if (!this.resources.highlightTexture) {\n        console.log(`创建高亮纹理，尺寸: ${this.resources.textureSize}`);\n        this.resources.highlightTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n\n      // 更新状态 - 设置多个高亮值\n      this.state.highlightAttributeName = attributeName;\n      this.state.highlightAttributeValues = [...validValueIndices]; // 复制数组，避免引用问题\n      this.state.highlightByAttribute = true;\n      this.state.isCheckHighlight = isCheckHighlight;\n\n      // 更新高亮纹理数据\n      console.log(`更新多值高亮纹理数据，总点数: ${this.data.total}，高亮值: [${validValueIndices.join(', ')}]`);\n\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n\n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        const startPointIndex = row * texWidth;\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break;\n        \n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 设置高亮数据 - 支持多个值的并集\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          let isHighlighted = false;\n          \n          if (globalPointIndex < attrData.length) {\n            const pointValue = Math.round(attrData[globalPointIndex]);\n            // 检查点值是否在任何一个高亮值中（并集逻辑）\n            isHighlighted = validValueIndices.includes(pointValue);\n          }\n          \n          // 将高亮状态设置到alpha通道\n          rowData[i * 4] = 0;\n          rowData[i * 4 + 1] = 0;\n          rowData[i * 4 + 2] = 0;\n          rowData[i * 4 + 3] = isHighlighted ? 1.0 : 0.0;\n        }\n        \n        // 更新这一行到纹理\n        this.resources.highlightTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0,\n          row\n        );\n      }\n      \n      console.log(`多值高亮纹理更新完成，属性: ${attributeName}, 值索引: [${validValueIndices.join(', ')}]`);\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`设置多值高亮时出错:`, error);\n      this.clearAttributeHighlight();\n      return false;\n    }\n  }\n  \n  /**\n   * 设置多属性交集高亮\n   * @param {string} attributeName - 属性名称\n   * @param {Array<number>} valueIndices - 属性值索引数组\n   * @param {boolean} isCheckHighlight - 是否是勾选高亮模式\n   * @returns {Promise<boolean>} - 是否成功设置高亮\n   */\n  async setMultiAttributeIntersectionHighlight(attributeName, valueIndices, isCheckHighlight = false) {\n    try {\n      console.log(`=== 设置多属性交集高亮开始 ===`);\n      console.log(`属性: ${attributeName}, 值索引: [${valueIndices.join(', ')}], 勾选高亮: ${isCheckHighlight}`);\n      \n      // 检查参数有效性\n      if (!attributeName || !Array.isArray(valueIndices)) {\n        console.log(`多属性交集高亮参数无效: ${attributeName}:${valueIndices}`);\n        return false;\n      }\n\n      // 过滤掉无效的值索引\n      const validValueIndices = valueIndices.filter(index => \n        typeof index === 'number' && index >= 0);\n      \n      // 检查属性名是否在字段列表中\n      if (!this.data.field || !this.data.field.includes(attributeName)) {\n        console.error(`属性 ${attributeName} 不在字段列表中，可用字段: ${this.data.field.join(', ')}`);\n        return false;\n      }\n\n      // 启用多属性交集高亮模式\n      this.state.multiAttributeHighlight.enabled = true;\n      this.state.multiAttributeHighlight.isCheckHighlight = isCheckHighlight;\n      \n      // 更新或添加属性的勾选状态\n      if (validValueIndices.length > 0) {\n        this.state.multiAttributeHighlight.attributes.set(attributeName, validValueIndices);\n        console.log(`已添加属性 ${attributeName} 的勾选状态: [${validValueIndices.join(', ')}]`);\n      } else {\n        // 如果没有有效值索引，移除该属性\n        this.state.multiAttributeHighlight.attributes.delete(attributeName);\n        console.log(`已移除属性 ${attributeName} 的勾选状态`);\n      }\n      \n      // 检查是否还有其他属性被勾选\n      if (this.state.multiAttributeHighlight.attributes.size === 0) {\n        console.log(`没有任何属性被勾选，禁用多属性交集高亮`);\n        this.state.multiAttributeHighlight.enabled = false;\n        \n        // 完全清除多属性交集高亮状态\n        this.clearMultiAttributeHighlight();\n        return true;\n      }\n      \n      // 计算交集高亮\n      await this.calculateIntersectionHighlight();\n      \n      console.log(`=== 设置多属性交集高亮完成 ===`);\n      return true;\n    } catch (error) {\n      console.error(`设置多属性交集高亮时出错:`, error);\n      this.clearMultiAttributeHighlight();\n      return false;\n    }\n  }\n  \n  /**\n   * 计算多属性交集高亮\n   * @returns {Promise<boolean>} - 是否成功计算\n   */\n  async calculateIntersectionHighlight() {\n    try {\n      console.log(`=== 开始计算多属性交集高亮 ===`);\n      \n      const attributeMap = this.state.multiAttributeHighlight.attributes;\n      const attributeNames = Array.from(attributeMap.keys());\n      \n      console.log(`参与交集计算的属性: [${attributeNames.join(', ')}]`);\n      \n      // 加载所有相关属性的数据\n      const attributeDataMap = new Map();\n      for (const attributeName of attributeNames) {\n        const attrData = await this.loadHighlightAttributeData(attributeName);\n        if (!attrData || attrData.length === 0) {\n          console.error(`无法加载属性 ${attributeName} 的数据`);\n          return false;\n        }\n        attributeDataMap.set(attributeName, attrData);\n        console.log(`已加载属性 ${attributeName} 的数据，长度: ${attrData.length}`);\n      }\n\n      // 创建高亮纹理\n      if (!this.resources.highlightTexture) {\n        console.log(`创建高亮纹理，尺寸: ${this.resources.textureSize}`);\n        this.resources.highlightTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n\n      // 更新状态\n      this.state.highlightByAttribute = true;\n      this.state.isCheckHighlight = this.state.multiAttributeHighlight.isCheckHighlight;\n\n      // 更新高亮纹理数据\n      console.log(`更新多属性交集高亮纹理数据，总点数: ${this.data.total}`);\n\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      let highlightedPointsCount = 0;\n\n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        const startPointIndex = row * texWidth;\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break;\n        \n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 设置高亮数据 - 计算多属性交集\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          let isHighlighted = true; // 默认为true，需要所有条件都满足（交集）\n          \n          // 检查每个属性的条件\n          for (const [attributeName, valueIndices] of attributeMap) {\n            const attrData = attributeDataMap.get(attributeName);\n            \n            if (!attrData || globalPointIndex >= attrData.length) {\n              isHighlighted = false;\n              break;\n            }\n            \n            const pointValue = Math.round(attrData[globalPointIndex]);\n            const matchesThisAttribute = valueIndices.includes(pointValue);\n            \n            if (!matchesThisAttribute) {\n              isHighlighted = false;\n              break; // 如果任何一个属性不匹配，则该点不高亮（交集逻辑）\n            }\n          }\n          \n          if (isHighlighted) {\n            highlightedPointsCount++;\n          }\n          \n          // 将高亮状态设置到alpha通道\n          rowData[i * 4] = 0;\n          rowData[i * 4 + 1] = 0;\n          rowData[i * 4 + 2] = 0;\n          rowData[i * 4 + 3] = isHighlighted ? 1.0 : 0.0;\n        }\n        \n        // 更新这一行到纹理\n        this.resources.highlightTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0,\n          row\n        );\n      }\n      \n      console.log(`多属性交集高亮纹理更新完成，高亮点数: ${highlightedPointsCount}`);\n      \n      // 打印详细的交集信息\n      for (const [attributeName, valueIndices] of attributeMap) {\n        console.log(`属性 ${attributeName}: 勾选值索引 [${valueIndices.join(', ')}]`);\n      }\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      console.log(`=== 多属性交集高亮计算完成 ===`);\n      return true;\n    } catch (error) {\n      console.error(`计算多属性交集高亮时出错:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * 清除多属性交集高亮\n   */\n  clearMultiAttributeHighlight() {\n    console.log('清除多属性交集高亮状态');\n    \n    // 清除多属性交集高亮状态\n    this.state.multiAttributeHighlight.enabled = false;\n    this.state.multiAttributeHighlight.attributes.clear();\n    this.state.multiAttributeHighlight.isCheckHighlight = false;\n    \n    // 清除单属性高亮状态\n    this.state.highlightAttributeName = null;\n    this.state.highlightAttributeValues = [];\n    this.state.highlightByAttribute = false;\n    this.state.isCheckHighlight = false;\n    \n    // 清除高亮纹理\n    if (this.resources.highlightTexture) {\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      try {\n        // 创建全零的数据数组（清除所有高亮标记）\n        const emptyData = new Float32Array(texWidth * texHeight * 4).fill(0);\n        \n        // 更新纹理 - 确保使用完整的纹理尺寸\n        this.resources.highlightTexture.subimage({\n          data: emptyData,\n          width: texWidth,\n          height: texHeight\n        });\n        \n        console.log('多属性交集高亮纹理已清除');\n      } catch (error) {\n        console.error('清除多属性交集高亮纹理时出错:', error);\n      }\n    }\n    \n    // 强制设置为脏标记，确保重新渲染\n    this.state.isDirty = true;\n    \n    // 立即请求重新渲染，确保显示更新\n    if (!this.state.animationFrameId) {\n      this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n    }\n  }\n\n  /**\n   * 更新基因数据\n   * @param {Array} geneData - 基因表达数据数组\n   * @param {Object} expressionRange - 表达范围过滤器 {gene: string, range: {start: number, end: number}}\n   */\n  async updateGeneData(geneData, expressionRange = null) {\n    try {\n      console.log('更新基因数据:', geneData);\n      if (expressionRange) {\n        console.log('应用表达范围过滤:', expressionRange);\n      }\n      \n      if (!geneData || !Array.isArray(geneData) || geneData.length === 0) {\n        console.log('基因数据为空，清除基因颜色映射');\n        this.data.geneData = null;\n        this.state.isDirty = true;\n        return;\n      }\n      \n      // 检查基因数据长度是否与细胞总数匹配\n      if (geneData.length !== this.data.total) {\n        console.warn(`基因数据长度 ${geneData.length} 与细胞总数 ${this.data.total} 不匹配`);\n      }\n      \n      // 存储基因数据和表达范围\n      this.data.geneData = geneData;\n      this.data.geneExpressionRange = expressionRange;\n      \n      // 创建或更新基因颜色纹理，传入表达范围过滤器\n      await this.updateGeneColorTexture(geneData, expressionRange);\n      \n      // 标记需要重新渲染\n      this.state.isDirty = true;\n      \n      console.log('基因数据更新完成');\n    } catch (error) {\n      console.error('更新基因数据时出错:', error);\n    }\n  }\n\n  /**\n   * 更新基因颜色纹理\n   * @param {Array} geneData - 基因表达数据\n   * @param {Object} expressionRange - 表达范围过滤器 {gene: string, range: {start: number, end: number}}\n   */\n  async updateGeneColorTexture(geneData, expressionRange = null) {\n    try {\n      if (!this.resources.textureSize || !Array.isArray(this.resources.textureSize)) {\n        console.error('纹理尺寸未初始化');\n        return;\n      }\n      \n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      // 创建基因颜色纹理（如果不存在）\n      if (!this.resources.geneColorTexture) {\n        console.log('创建基因颜色纹理');\n        this.resources.geneColorTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n      \n      // 计算基因表达值的范围\n      const validValues = geneData.filter(val => val > 0 && !isNaN(val));\n      if (validValues.length === 0) {\n        console.log('没有有效的基因表达值');\n        return;\n      }\n      \n      const minValue = Math.min(...validValues);\n      const maxValue = Math.max(...validValues);\n      const range = maxValue - minValue;\n      \n      console.log(`基因表达范围: ${minValue.toFixed(4)} - ${maxValue.toFixed(4)}`);\n      \n      // 检查是否有表达范围过滤器\n      let filterRange = null;\n      if (expressionRange && expressionRange.range) {\n        filterRange = expressionRange.range;\n        console.log(`应用表达范围过滤: ${filterRange.start.toFixed(4)} - ${filterRange.end.toFixed(4)}`);\n      }\n      \n      // 批量更新纹理数据\n      for (let row = 0; row < texHeight; row++) {\n        const startPointIndex = row * texWidth;\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break;\n        \n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          \n          if (globalPointIndex < geneData.length) {\n            const expressionValue = geneData[globalPointIndex];\n            \n            // 检查是否在过滤范围内\n            let inFilterRange = true;\n            if (filterRange) {\n              inFilterRange = expressionValue >= filterRange.start && expressionValue <= filterRange.end;\n            }\n            \n            if (inFilterRange && expressionValue > 0) {\n              // 在过滤范围内且有表达的点，显示颜色\n            // 将表达值归一化到[0,1]范围\n            let normalizedValue = 0;\n              if (range > 0) {\n              normalizedValue = (expressionValue - minValue) / range;\n            }\n            \n            // 使用简单的蓝-红渐变色映射\n            // 低表达：蓝色 (0, 0, 1)\n            // 高表达：红色 (1, 0, 0)\n            const red = normalizedValue;\n            const blue = 1 - normalizedValue;\n            const green = 0;\n              const alpha = 1.0;\n            \n            rowData[i * 4] = red;\n            rowData[i * 4 + 1] = green;\n            rowData[i * 4 + 2] = blue;\n            rowData[i * 4 + 3] = alpha;\n            } else {\n              // 不在过滤范围内或无表达的点，显示为灰色\n              rowData[i * 4] = 0.4;     // 更深的灰色 R\n              rowData[i * 4 + 1] = 0.4; // 更深的灰色 G\n              rowData[i * 4 + 2] = 0.4; // 更深的灰色 B\n              rowData[i * 4 + 3] = 0.6; // 稍微透明\n            }\n          } else {\n            // 超出数据范围的点设为灰色\n            rowData[i * 4] = 0.4;\n            rowData[i * 4 + 1] = 0.4;\n            rowData[i * 4 + 2] = 0.4;\n            rowData[i * 4 + 3] = 0.5;\n          }\n        }\n        \n        // 更新纹理行\n        this.resources.geneColorTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0,\n          row\n        );\n      }\n      \n      console.log('基因颜色纹理更新完成');\n    } catch (error) {\n      console.error('更新基因颜色纹理时出错:', error);\n    }\n  }\n\n  /**\n   * 清除基因数据\n   */\n  clearGeneData() {\n    this.data.geneData = null;\n    \n    // 清除基因颜色纹理\n    if (this.resources.geneColorTexture) {\n      this.resources.geneColorTexture.destroy();\n      this.resources.geneColorTexture = null;\n    }\n    \n    this.state.isDirty = true;\n    console.log('基因数据已清除');\n  }\n\n  /**\n   * 更新筛选条件\n   * @param {Object} filterData - 筛选数据\n   * @param {Array} filterData.typeClass - 类型类别数组\n   * @param {Array} filterData.typeItem - 类型项目数组\n   * @param {Array} filterData.typeValue - 类型值数组\n   * @param {Array} filterData.operatorType - 操作符类型数组\n   * @param {number} filterData.filterNum - 筛选条件数量\n   */\n  updateFilter(filterData) {\n    try {\n      console.log('🔍 ScatterRenderer.updateFilter 被调用:', filterData);\n      \n      if (!this.resources.regl) {\n        console.warn('REGL未初始化，无法更新筛选');\n        return;\n      }\n      \n      const { typeClass, typeItem, typeValue, operatorType, filterNum } = filterData;\n      \n      // 如果没有筛选条件，清除筛选纹理\n      if (!filterNum || filterNum === 0) {\n        console.log('清除筛选条件');\n        if (this.resources.filterTexture) {\n          this.resources.filterTexture.destroy();\n          this.resources.filterTexture = null;\n        }\n        this.data.filterNum = 0;\n        this.state.isDirty = true;\n        return;\n      }\n      \n      // 创建筛选纹理数据\n      const filterTextureData = new Float32Array(filterNum * 4);\n      \n      for (let i = 0; i < filterNum; i++) {\n        filterTextureData[i * 4] = typeClass[i] || 0;     // R: typeClass\n        filterTextureData[i * 4 + 1] = typeItem[i] || 0; // G: typeItem\n        filterTextureData[i * 4 + 2] = typeValue[i] || 0; // B: typeValue\n        filterTextureData[i * 4 + 3] = operatorType[i] || 0; // A: operatorType\n        \n        console.log(`筛选条件 ${i}: class=${typeClass[i]}, item=${typeItem[i]}, value=${typeValue[i]}, op=${operatorType[i]}`);\n      }\n      \n      // 创建或更新筛选纹理\n      if (this.resources.filterTexture) {\n        this.resources.filterTexture.destroy();\n      }\n      \n      this.resources.filterTexture = this.resources.regl.texture({\n        shape: [filterNum, 1],\n        format: \"rgba\",\n        type: \"float32\",\n        data: filterTextureData,\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrap: \"clamp\",\n      });\n      \n      // 更新筛选状态\n      this.data.filterNum = filterNum;\n      this.state.isDirty = true;\n      \n      console.log(`✅ 筛选纹理已更新，包含 ${filterNum} 个筛选条件`);\n      \n      // 立即请求重新渲染\n      if (!this.state.animationFrameId) {\n        this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n      }\n      \n    } catch (error) {\n      console.error('更新筛选时出错:', error);\n    }\n  }\n}\n\n// 导出单例实例，方便直接使用\nexport default ScatterRenderer; \n","<template>\n  <div style=\"height: 100%\">\n    <div id=\"canvasContainer\" style=\"height: 100%\" ref=\"scatterBrain\"></div>\n    <!-- 确保tooltip元素直接在body下，而不是在容器内 -->\n  </div>\n</template>\n\n<script>\nimport ScatterRenderer from \"@/render/ScatterRenderer\";\nimport { perfTracker } from \"@/render/performance\";\nimport { mapState } from 'vuex';\nimport { buildDatasetPath, getDataset } from '@/api/config';\n\nexport default {\n  props: {\n    // 基因数据\n    geneData: {\n      type: Array,\n      default: () => []\n    },\n    // 基因表达范围\n    geneExpRange: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      renderer: null,\n      selectedIndices: [],\n      isInitialized: false,\n      highlightListener: null,\n      multipleHighlightListener: null,\n      multiAttributeIntersectionListener: null,\n      clearHighlightListener: null,\n      hoverListener: null,\n      clearHoverListener: null,\n      mouseEnterListAreaListener: null,\n      mouseLeaveListAreaListener: null,\n      currentHighlight: null,\n      currentCheckedHighlight: null\n    };\n  },\n\n  computed: {\n    ...mapState({\n      operate: state => state.uiState.operateActive || 1,\n      colorData: state => state.cellData.colorData || [],\n      total: state => state.cellData.total || -1,\n      colorBy: state => state.cellData.colorField || \"\",\n      typeClass: state => state.uiState.typeClass || [],\n      typeItem: state => state.uiState.typeItem || [],\n      typeValue: state => state.uiState.typeValue || [],\n      operatorType: state => state.uiState.operatorType || [],\n      filterNum: state => state.uiState.filterNum || 0,\n      field: state => state.cellData.field || [],\n      fieldValue: state => state.cellData.fieldValue || {},\n      hoverVal: state => state.cellData.hoverVal || -1\n    })\n  },\n\n  watch: {\n    operate: {\n      handler(newMode) {\n        this.switchMode(newMode);\n      }\n    },\n    colorBy: {\n      async handler(newColorBy) {\n        if (!this.renderer || !this.isInitialized) return;\n        \n        // 更新渲染器的颜色属性\n        const colorIndex = this.field.indexOf(newColorBy);\n        if (colorIndex >= 0) {\n          await this.renderer.setColorAttribute(colorIndex);\n        }\n      }\n    },\n    geneExpRange: {\n      handler(newRange) {\n        if (!this.renderer) return;\n        \n        console.log('基因表达范围更新:', newRange);\n        \n        // 如果有基因数据和表达范围，更新渲染器\n        if (this.geneData && this.geneData.length > 0 && newRange && newRange.range) {\n          console.log('应用基因表达范围过滤');\n          this.renderer.updateGeneData(this.geneData, newRange);\n        } else if (this.geneData && this.geneData.length > 0) {\n          // 如果没有范围过滤，正常更新基因数据\n          this.renderer.updateGeneData(this.geneData);\n        }\n        \n        this.renderer.options.geneExpRange = newRange;\n        this.renderer.state.isDirty = true; // 请求重新渲染\n      },\n      deep: true\n    },\n    geneData: {\n      handler(newGeneData) {\n        if (!this.renderer || !this.isInitialized) return;\n        \n        console.log('基因数据更新:', newGeneData);\n        \n        // 当基因数据更新时，检查是否有表达范围过滤\n        if (this.renderer.updateGeneData) {\n          const expressionRange = this.geneExpRange;\n          if (expressionRange && expressionRange.range) {\n            console.log('应用基因表达范围过滤:', expressionRange);\n            this.renderer.updateGeneData(newGeneData, expressionRange);\n          } else {\n          this.renderer.updateGeneData(newGeneData);\n          }\n        }\n      },\n      deep: true\n    },\n    // 监听total和field的变化，在数据就绪时初始化渲染器\n    total: {\n      handler(newTotal) {\n        if (newTotal > 0 && !this.renderer && this.field && this.field.length > 0) {\n          console.log(`数据已就绪，total: ${newTotal}，开始初始化渲染器`);\n          this.initRenderer();\n        }\n      },\n      immediate: true\n    },\n    field: {\n      handler(newField) {\n        if (newField && newField.length > 0 && !this.renderer && this.total > 0) {\n          console.log(`字段列表已就绪，长度: ${newField.length}，开始初始化渲染器`);\n          this.initRenderer();\n        }\n      },\n      immediate: true\n    },\n    // 监听筛选条件的变化\n    typeClass: {\n      handler() {\n        this.updateFilter();\n      },\n      deep: true\n    },\n    typeItem: {\n      handler() {\n        this.updateFilter();\n      },\n      deep: true\n    },\n    typeValue: {\n      handler() {\n        this.updateFilter();\n      },\n      deep: true\n    },\n    operatorType: {\n      handler() {\n        this.updateFilter();\n      },\n      deep: true\n    },\n    filterNum: {\n      handler() {\n        this.updateFilter();\n      }\n    }\n  },\n\n  mounted() {\n    console.log('ScatterBrainSingle mounted - 开始诊断');\n    console.log('初始数据状态:', {\n      total: this.total,\n      fieldLength: this.field ? this.field.length : 0,\n      colorBy: this.colorBy,\n      geneDataLength: this.geneData ? this.geneData.length : 0\n    });\n    \n    // 监听数据集切换事件\n    if (typeof window !== 'undefined') {\n      window.addEventListener('datasetChanged', this.handleDatasetChange);\n    }\n    \n    // 检查数据是否已就绪\n    if (this.total > 0 && this.field && this.field.length > 0) {\n      console.log(`初始数据已就绪，开始初始化渲染器`);\n      this.initRenderer();\n    } else {\n      console.log(`等待数据加载完成，total: ${this.total}, 字段数: ${this.field ? this.field.length : 0}`);\n      // 数据加载未完成，依靠watch监听器在数据就绪时初始化\n    }\n    \n    this.setupHighlightListeners();\n  },\n\n  beforeDestroy() {\n    console.log('ScatterBrainSingle: 组件即将销毁，开始清理资源');\n    \n    // 移除数据集切换事件监听\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('datasetChanged', this.handleDatasetChange);\n    }\n    \n    // 立即移除事件监听器\n    this.removeHighlightListeners();\n    \n    // 立即清理渲染器资源\n    if (this.renderer) {\n      try {\n        // 清除所有高亮状态\n        if (typeof this.renderer.clearHoverCategory === 'function') {\n          this.renderer.clearHoverCategory();\n        }\n        if (this.renderer.clearAttributeHighlight && typeof this.renderer.clearAttributeHighlight === 'function') {\n          this.renderer.clearAttributeHighlight();\n        }\n        \n        // 立即销毁渲染器，这会清理ResizeObserver\n        if (typeof this.renderer.dispose === 'function') {\n          this.renderer.dispose();\n        }\n        \n        console.log('ScatterBrainSingle: 渲染器已清理');\n      } catch (error) {\n        console.error('ScatterBrainSingle: 清理渲染器时出错:', error);\n      } finally {\n        // 确保渲染器引用被清空\n        this.renderer = null;\n      }\n    }\n    \n    // 清理组件状态\n    this.isInitialized = false;\n    this.selectedIndices = [];\n    this.currentHighlight = null;\n    this.currentCheckedHighlight = null;\n    \n    console.log('ScatterBrainSingle: 组件资源清理完成');\n  },\n\n  methods: {\n    /**\n     * 处理数据集切换事件\n     */\n    async handleDatasetChange(event) {\n      console.log('ScatterBrainSingle: 数据集切换到', event.detail.dataset);\n      \n      // 🔥 使用新的资源重置方法，确保buffer正确重新分配和缓存清理\n      if (this.renderer) {\n        try {\n          // 获取旧数据集信息用于清理缓存\n          const oldDataset = event.detail.oldDataset || this.datasetName;\n          console.log(`数据集切换: ${oldDataset} -> ${event.detail.dataset}`);\n          \n          await this.renderer.resetForNewDataset(oldDataset);\n          \n          // 安全地调用dispose方法\n          if (this.renderer && typeof this.renderer.dispose === 'function') {\n            this.renderer.dispose();\n          }\n        } catch (error) {\n          console.error('重置渲染器资源时出错:', error);\n          // 即使出错也要尝试清理渲染器\n          if (this.renderer && typeof this.renderer.dispose === 'function') {\n            try {\n              this.renderer.dispose();\n            } catch (disposeError) {\n              console.error('清理渲染器时出错:', disposeError);\n            }\n          }\n        } finally {\n          // 确保渲染器引用被清空\n          this.renderer = null;\n        }\n      }\n      \n      // 重置组件状态\n      this.isInitialized = false;\n      this.selectedIndices = [];\n      this.currentHighlight = null;\n      this.currentCheckedHighlight = null;\n      \n      // 等待数据加载完成后重新初始化渲染器\n      setTimeout(() => {\n        if (this.total > 0 && this.field && this.field.length > 0) {\n          console.log('数据集切换后重新初始化渲染器');\n          this.initRenderer();\n        }\n      }, 500); // 给数据加载一些时间\n    },\n    \n    /**\n     * 更新筛选条件\n     * 将筛选数据传递给渲染器进行筛选\n     */\n    updateFilter() {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      console.log('🔍 ScatterBrainSingle.updateFilter 被调用');\n      console.log('筛选数据:', {\n        typeClass: this.typeClass,\n        typeItem: this.typeItem,\n        typeValue: this.typeValue,\n        operatorType: this.operatorType,\n        filterNum: this.filterNum\n      });\n      \n      // 调用渲染器的updateFilter方法\n      this.renderer.updateFilter({\n        typeClass: this.typeClass,\n        typeItem: this.typeItem,\n        typeValue: this.typeValue,\n        operatorType: this.operatorType,\n        filterNum: this.filterNum\n      });\n    },\n    \n    /**\n     * 初始化渲染器\n     */\n    async initRenderer() {\n      try {\n        perfTracker.startMark('initializeRenderer');\n        \n        // 检查total和field是否有效\n        if (this.total <= 0) {\n          console.warn(\"total参数无效，等待有效数据后再初始化渲染器...\");\n          // 设置一个定时器，1秒后再次尝试初始化\n          setTimeout(() => {\n            if (this.total > 0) {\n              this.initRenderer();\n            } else {\n              console.warn(\"total参数仍然无效，请检查数据加载\");\n            }\n          }, 1000);\n          return;\n        }\n        \n        // 检查字段列表是否为空\n        if (!this.field || !Array.isArray(this.field) || this.field.length === 0) {\n          console.warn(\"字段列表为空，等待字段数据加载后再初始化渲染器...\");\n          // 设置一个定时器，1秒后再次尝试初始化\n          setTimeout(() => {\n            if (this.field && this.field.length > 0) {\n              this.initRenderer();\n            } else {\n              console.warn(\"字段列表仍然为空，请检查数据加载\");\n            }\n          }, 1000);\n          return;\n        }\n        \n        // 获取容器元素\n        const container = this.$refs.scatterBrain;\n        \n        // 创建渲染器实例\n        this.renderer = new ScatterRenderer(container, {\n          pointSize: 3.0,\n          defaultZoom: 1,\n          defaultOffset: [0, 0],\n          antialiasing: true,\n          highlightSize: 1.5 // 高亮点的大小倍数（减小变大效果）\n        });\n        \n        // 初始化渲染器\n        await this.renderer.initialize();\n        \n        // 设置回调函数\n        this.renderer.callbacks.onPointSelected = this.handlePointSelected;\n        \n        // 确定正确的colorIndex\n        const colorIndex = this.field.indexOf(this.colorBy);\n        const validColorIndex = colorIndex >= 0 ? colorIndex : 0;\n        \n        console.log(`开始加载数据，total: ${this.total}, 字段数: ${this.field.length}, colorBy: ${this.colorBy}`);\n        \n        // 加载数据\n        await this.renderer.loadData({\n          quadTreePath: buildDatasetPath('quad_tree.json'),\n          total: this.total,\n          field: this.field,\n          colorBy: this.colorBy,\n          colorIndex: validColorIndex\n        });\n        \n        // 设置操作模式\n        this.renderer.setMode(this.operate === 1 ? \"pan\" : \"select\");\n        \n        // 监听键盘事件 - 按Escape键切换回平移模式\n        document.addEventListener('keydown', this.handleKeyDown);\n        \n        // 设置颜色属性\n        await this.renderer.setColorAttribute(validColorIndex);\n        \n        const duration = perfTracker.endMark('initializeRenderer');\n        console.log(`渲染器初始化完成，耗时: ${duration.toFixed(2)}ms`);\n        \n        this.isInitialized = true;\n      } catch (error) {\n        console.error(\"初始化ScatterBrainSingle渲染器失败:\", error);\n      }\n    },\n    \n    /**\n     * 设置高亮事件监听器\n     */\n    setupHighlightListeners() {\n      if (this.highlightListener) return;\n      \n      // 创建事件监听函数\n      this.highlightListener = this.handleHighlightEvent.bind(this);\n      this.multipleHighlightListener = this.handleMultipleHighlightEvent.bind(this);\n      this.multiAttributeIntersectionListener = this.handleMultiAttributeIntersectionEvent.bind(this);\n      this.clearHighlightListener = this.handleClearHighlightEvent.bind(this);\n      this.hoverListener = this.handleHoverEvent.bind(this);\n      this.clearHoverListener = this.handleClearHoverEvent.bind(this);\n      this.mouseEnterListAreaListener = this.handleMouseEnterListArea.bind(this);\n      this.mouseLeaveListAreaListener = this.handleMouseLeaveListArea.bind(this);\n      \n      // 监听高亮和清除高亮事件\n      document.addEventListener('highlight-attribute', this.highlightListener);\n      document.addEventListener('highlight-multiple-attributes', this.multipleHighlightListener);\n      document.addEventListener('highlight-multi-attribute-intersection', this.multiAttributeIntersectionListener);\n      document.addEventListener('clear-highlight', this.clearHighlightListener);\n      \n      // 监听悬停事件\n      document.addEventListener('cell-property-item-mouseenter', this.hoverListener);\n      document.addEventListener('cell-property-item-mouseleave', this.clearHoverListener);\n      \n      // 监听鼠标进入和离开列表区域事件\n      document.addEventListener('mouse-enter-list-area', this.mouseEnterListAreaListener);\n      document.addEventListener('mouse-leave-list-area', this.mouseLeaveListAreaListener);\n    },\n    \n    /**\n     * 移除高亮事件监听器\n     */\n    removeHighlightListeners() {\n      if (this.highlightListener) {\n        document.removeEventListener('highlight-attribute', this.highlightListener);\n        this.highlightListener = null;\n      }\n      \n      if (this.multipleHighlightListener) {\n        document.removeEventListener('highlight-multiple-attributes', this.multipleHighlightListener);\n        this.multipleHighlightListener = null;\n      }\n      \n      if (this.multiAttributeIntersectionListener) {\n        document.removeEventListener('highlight-multi-attribute-intersection', this.multiAttributeIntersectionListener);\n        this.multiAttributeIntersectionListener = null;\n      }\n      \n      if (this.clearHighlightListener) {\n        document.removeEventListener('clear-highlight', this.clearHighlightListener);\n        this.clearHighlightListener = null;\n      }\n      \n      if (this.hoverListener) {\n        document.removeEventListener('cell-property-item-mouseenter', this.hoverListener);\n        this.hoverListener = null;\n      }\n      \n      if (this.clearHoverListener) {\n        document.removeEventListener('cell-property-item-mouseleave', this.clearHoverListener);\n        this.clearHoverListener = null;\n      }\n      \n      if (this.mouseEnterListAreaListener) {\n        document.removeEventListener('mouse-enter-list-area', this.mouseEnterListAreaListener);\n        this.mouseEnterListAreaListener = null;\n      }\n      \n      if (this.mouseLeaveListAreaListener) {\n        document.removeEventListener('mouse-leave-list-area', this.mouseLeaveListAreaListener);\n        this.mouseLeaveListAreaListener = null;\n      }\n    },\n    \n    /**\n     * 处理高亮事件\n     * @param {CustomEvent} event - 高亮事件\n     */\n    async handleHighlightEvent(event) {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      const { attributeName, attributeValue, isCheckHighlight } = event.detail;\n      \n      if (!attributeName || attributeValue === undefined) {\n        console.warn('高亮事件缺少必要参数');\n        return;\n      }\n      \n      console.log(`接收到高亮事件: 属性=${attributeName}, 值=${attributeValue}, 勾选高亮=${isCheckHighlight}`);\n      \n      try {\n        if (isCheckHighlight) {\n          // 当是勾选高亮时，使用专门的方法处理\n          await this.renderer.loadAttributeAndHighlight(attributeName, attributeValue, true);\n          \n          // 保存当前勾选高亮状态，以便在悬停结束后恢复\n          this.currentCheckedHighlight = {\n            attributeName,\n            attributeValue, // 单值高亮保存attributeValue字段\n            isCheckHighlight: true\n          };\n          \n          console.log(`已保存单值勾选高亮状态:`, this.currentCheckedHighlight);\n        } else {\n          // 默认使用普通高亮方法\n          await this.renderer.setHighlightAttribute(attributeName, attributeValue);\n        }\n      } catch (error) {\n        console.error('设置高亮时出错:', error);\n      }\n    },\n    \n    /**\n     * 处理多值高亮事件\n     * @param {CustomEvent} event - 多值高亮事件\n     */\n    async handleMultipleHighlightEvent(event) {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      const { attributeName, attributeValueIndices, isCheckHighlight } = event.detail;\n      \n      if (!attributeName || !Array.isArray(attributeValueIndices) || attributeValueIndices.length === 0) {\n        console.warn('多值高亮事件缺少必要参数');\n        return;\n      }\n      \n      console.log(`接收到多值高亮事件: 属性=${attributeName}, 值索引=[${attributeValueIndices.join(', ')}], 勾选高亮=${isCheckHighlight}`);\n      \n      try {\n        // 使用新的多值高亮方法\n        await this.renderer.setMultipleAttributeHighlight(attributeName, attributeValueIndices, isCheckHighlight);\n        \n        // 保存当前勾选高亮状态，以便在悬停结束后恢复\n        this.currentCheckedHighlight = {\n          attributeName,\n          attributeValueIndices: [...attributeValueIndices], // 复制数组\n          isCheckHighlight: true\n        };\n        \n        console.log(`已保存多值勾选高亮状态:`, this.currentCheckedHighlight);\n      } catch (error) {\n        console.error('设置多值高亮时出错:', error);\n      }\n    },\n    \n    /**\n     * 处理多属性交集高亮事件\n     * @param {CustomEvent} event - 多属性交集高亮事件\n     */\n    async handleMultiAttributeIntersectionEvent(event) {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      const { attributeName, attributeValueIndices } = event.detail;\n      \n      if (!attributeName || !Array.isArray(attributeValueIndices)) {\n        console.warn('多属性交集高亮事件缺少必要参数');\n        return;\n      }\n      \n      console.log(`接收到多属性交集高亮事件: 属性=${attributeName}, 值索引=[${attributeValueIndices.join(', ')}]`);\n      \n      try {\n        // 检查是否是清除该属性的勾选（空数组）\n        if (attributeValueIndices.length === 0) {\n          console.log(`清除属性 ${attributeName} 的勾选高亮`);\n          \n          // 调用多属性交集高亮方法来移除该属性\n          await this.renderer.setMultiAttributeIntersectionHighlight(attributeName, [], true);\n          \n          // 检查是否还有其他属性被勾选\n          if (this.renderer.state.multiAttributeHighlight.attributes.size === 0) {\n            console.log('没有任何属性被勾选，清除勾选高亮状态');\n            this.currentCheckedHighlight = null;\n          }\n        } else {\n          // 有勾选项，设置多属性交集高亮\n          await this.renderer.setMultiAttributeIntersectionHighlight(attributeName, attributeValueIndices, true);\n          \n          // 更新当前勾选高亮状态为多属性交集模式\n          this.currentCheckedHighlight = {\n            mode: 'multi-attribute-intersection',\n            isCheckHighlight: true\n          };\n          \n          console.log(`已设置多属性交集高亮状态`);\n        }\n      } catch (error) {\n        console.error('设置多属性交集高亮时出错:', error);\n      }\n    },\n    \n    /**\n     * 处理清除高亮事件\n     */\n    handleClearHighlightEvent(event) {\n      if (!this.renderer || !this.isInitialized) {\n        return;\n      }\n      \n      console.log('接收到清除高亮事件', event.detail);\n      \n      try {\n        // 检查事件详情，看是否指定了特定属性\n        const eventDetail = event.detail || {};\n        const targetAttributeName = eventDetail.attributeName;\n        const checkForCheckedItems = eventDetail.checkForCheckedItems;\n        const force = eventDetail.force;\n        const reason = eventDetail.reason;\n        \n        console.log(`清除高亮事件详情: 属性=${targetAttributeName}, 检查勾选=${checkForCheckedItems}, 强制=${force}, 原因=${reason}`);\n        \n        // 如果是强制清除，直接执行\n        if (force) {\n          console.log('强制清除所有高亮状态');\n          this.renderer.clearAttributeHighlight();\n          this.currentHighlight = null;\n          this.currentCheckedHighlight = null;\n          return;\n        }\n        \n        // 如果需要检查勾选项，且有勾选高亮状态，则不清除\n        if (checkForCheckedItems && this.currentCheckedHighlight) {\n          console.log('需要检查勾选项，且有勾选高亮状态，忽略清除请求');\n          return;\n        }\n        \n        // 如果有保存的勾选高亮状态，检查是否与目标属性匹配\n        if (this.currentCheckedHighlight) {\n          const checkedAttributeName = this.currentCheckedHighlight.attributeName;\n          \n          // 如果指定了目标属性且与当前勾选高亮的属性不同\n          if (targetAttributeName && targetAttributeName !== checkedAttributeName) {\n            console.log(`清除属性 ${targetAttributeName} 的高亮，保留勾选高亮 ${checkedAttributeName}`);\n            return;\n          } else if (!targetAttributeName) {\n            // 没有指定目标属性，但有勾选高亮，不清除\n            console.log('有勾选高亮状态，忽略清除高亮事件');\n            return;\n          }\n        }\n        \n        // 只有在没有勾选高亮状态时才执行清除操作\n        console.log('没有勾选高亮状态，执行清除操作');\n        \n        // 清除渲染器中的所有高亮状态\n        this.renderer.clearAttributeHighlight();\n        \n        // 清除当前存储的高亮状态\n        this.currentHighlight = null;\n        \n        // 清除保存的勾选高亮状态\n        this.currentCheckedHighlight = null;\n        console.log('已清除所有高亮状态');\n      } catch (error) {\n        console.error('清除高亮时出错:', error);\n      }\n    },\n    \n    /**\n     * 处理点选择事件\n     * @param {Array} selectedPoints - 选中的点\n     */\n    handlePointSelected(selectedPoints) {\n      console.log(`选中了${selectedPoints.length}个点`);\n      this.selectedIndices = selectedPoints;\n      this.$emit('selectArea', selectedPoints);\n    },\n    \n    /**\n     * 处理键盘事件\n     * @param {KeyboardEvent} event - 键盘事件\n     */\n    handleKeyDown(event) {\n      // 如果按下ESC键，切换回平移模式\n      if (event.key === 'Escape' && this.renderer) {\n        this.renderer.setMode('pan');\n      }\n    },\n    \n    /**\n     * 切换操作模式\n     * @param {number} mode - 模式值（1: 平移, 2: 选择）\n     */\n    switchMode(mode) {\n      if (!this.renderer) return;\n      \n      // 切换渲染器模式\n      this.renderer.setMode(mode === 1 ? \"pan\" : \"select\");\n    },\n    \n    /**\n     * 下载当前图像\n     */\n    downloadImage() {\n      if (this.renderer) {\n        this.renderer.downloadCanvasAsPNG(`scatter_${this.colorBy}`);\n      }\n    },\n    \n    /**\n     * 备用下载方法\n     */\n    backupDownload() {\n      try {\n        const container = document.querySelector('#canvasContainer');\n        if (!container) return;\n        \n        const canvas = container.querySelector('canvas');\n        if (!canvas) return;\n        \n        const link = document.createElement('a');\n        link.download = `scatter_plot_${this.colorBy || 'default'}.png`;\n        link.href = canvas.toDataURL('image/png');\n        \n        document.body.appendChild(link);\n        link.click();\n        \n        setTimeout(() => {\n          document.body.removeChild(link);\n          URL.revokeObjectURL(link.href);\n        }, 100);\n      } catch (error) {\n        console.error('下载图像失败:', error);\n      }\n    },\n    \n    /**\n     * 处理悬停事件 - 针对细胞属性项\n     * @param {CustomEvent} event - 悬停事件\n     */\n    async handleHoverEvent(event) {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      try {\n        // 检查事件详情是否存在\n        if (!event.detail) {\n          console.warn('悬停事件缺少详情信息');\n          return;\n        }\n        \n        const { valueIndex, attributeName, attributeValue } = event.detail;\n        \n        // 详细记录当前悬停状态\n        console.log(`悬停事件: 属性=${attributeName}, 值=${attributeValue}, 索引=${valueIndex}`);\n        \n        // 确保valueIndex有效\n        if (valueIndex === undefined || valueIndex < 0) {\n          console.warn(`无效的悬停索引: ${valueIndex}`);\n          return;\n        }\n        \n        // 如果当前颜色属性与悬停属性相同，使用简单的hoverCategory\n        if (attributeName === this.colorBy) {\n          console.log(`使用当前颜色字段悬停方式: ${attributeName}, 值索引: ${valueIndex}`);\n          this.renderer.setHoverCategory(valueIndex);\n        } else {\n          // 不同属性，使用跨属性悬停方法\n          console.log(`使用跨属性悬停方式: ${attributeName}, 值索引: ${valueIndex}`);\n          // 显式指定isCheckHighlight=false，确保悬停不会使非高亮点变灰\n          await this.renderer.loadAttributeAndHighlight(attributeName, valueIndex, false);\n        }\n        \n      } catch (error) {\n        console.error('处理悬停事件出错:', error);\n      }\n    },\n    \n    /**\n     * 处理离开悬停事件\n     */\n    async handleClearHoverEvent() {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      try {\n        console.log('清除悬停高亮，保留勾选高亮');\n        \n        // 检查是否有保存的勾选高亮状态\n        if (this.currentCheckedHighlight) {\n          console.log('检测到勾选高亮状态，直接恢复而不清除...', this.currentCheckedHighlight);\n          \n          // 检查是否是多属性交集模式\n          if (this.currentCheckedHighlight.mode === 'multi-attribute-intersection') {\n            console.log('恢复多属性交集高亮状态');\n            // 多属性交集模式下，重新计算交集高亮\n            await this.renderer.calculateIntersectionHighlight();\n          } else {\n            // 单属性模式的恢复逻辑\n            const { attributeName, attributeValueIndices, isCheckHighlight } = this.currentCheckedHighlight;\n            \n            // 直接恢复勾选高亮，不先清除\n            if (Array.isArray(attributeValueIndices)) {\n              // 多值高亮恢复\n              await this.renderer.setMultipleAttributeHighlight(attributeName, attributeValueIndices, isCheckHighlight);\n            } else {\n              // 兼容旧的单值高亮恢复（attributeValue字段）\n              const attributeValue = this.currentCheckedHighlight.attributeValue;\n              if (attributeValue !== undefined) {\n                await this.renderer.loadAttributeAndHighlight(attributeName, attributeValue, isCheckHighlight);\n              }\n            }\n          }\n          \n          // 只清除悬停状态，不影响高亮纹理\n          this.renderer.clearHoverCategory();\n        } else {\n          // 如果没有勾选高亮状态，才清除悬停\n          this.renderer.clearHoverCategory();\n        }\n      } catch (error) {\n        console.error('清除悬停高亮出错:', error);\n      }\n    },\n    \n    /**\n     * 处理鼠标进入列表区域事件\n     */\n    handleMouseEnterListArea() {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      console.log('ScatterBrainSingle: 鼠标进入列表区域');\n      \n      // 设置鼠标在列表区域标志\n      this.renderer.setMouseInListArea(true);\n    },\n    \n    /**\n     * 处理鼠标离开列表区域事件\n     */\n    handleMouseLeaveListArea() {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      console.log('ScatterBrainSingle: 鼠标离开列表区域');\n      \n      // 清除鼠标在列表区域标志\n      this.renderer.setMouseInListArea(false);\n    },\n    \n    /**\n     * 处理容器尺寸变化\n     * 当Selected Cells抽屉打开或关闭时调用\n     */\n    handleContainerResize() {\n      if (!this.renderer || !this.isInitialized) {\n        console.warn('ScatterBrainSingle: 渲染器未初始化，跳过尺寸变化处理');\n        return;\n      }\n      \n      console.log('ScatterBrainSingle: 处理容器尺寸变化');\n      \n      try {\n        // 获取容器当前尺寸用于调试\n        const container = this.$refs.scatterBrain;\n        if (container) {\n          const { offsetWidth, offsetHeight } = container;\n          console.log(`ScatterBrainSingle: 容器当前尺寸 - 宽度: ${offsetWidth}, 高度: ${offsetHeight}`);\n        }\n        \n        // 使用nextTick确保DOM更新完成\n        this.$nextTick(() => {\n          // 再次延迟确保布局稳定\n          setTimeout(() => {\n            if (this.renderer && typeof this.renderer.handleResize === 'function') {\n              console.log('ScatterBrainSingle: 调用渲染器handleResize方法');\n              this.renderer.handleResize();\n              console.log('ScatterBrainSingle: 渲染器尺寸已更新');\n            } else {\n              console.warn('ScatterBrainSingle: 渲染器handleResize方法不可用');\n            }\n          }, 100); // 增加延迟时间确保布局完成\n        });\n      } catch (error) {\n        console.error('ScatterBrainSingle: 处理容器尺寸变化时出错:', error);\n      }\n    },\n    \n    /**\n     * 清除选区状态\n     */\n    clearSelection() {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      console.log('ScatterBrainSingle: 清除选区状态');\n      \n      try {\n        if (typeof this.renderer.clearSelection === 'function') {\n          this.renderer.clearSelection();\n        }\n      } catch (error) {\n        console.error('ScatterBrainSingle: 清除选区状态时出错:', error);\n      }\n    },\n    \n    /**\n     * 设置操作模式\n     * @param {string} mode - 操作模式 ('pan' 或 'select')\n     */\n    setMode(mode) {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      console.log(`ScatterBrainSingle: 设置操作模式为 ${mode}`);\n      \n      try {\n        if (typeof this.renderer.setMode === 'function') {\n          this.renderer.setMode(mode);\n        }\n      } catch (error) {\n        console.error(`ScatterBrainSingle: 设置操作模式为 ${mode} 时出错:`, error);\n      }\n    }\n  },\n};\n</script>\n\n<style>\ncanvas {\n  width: 100%;\n  height: 100%;\n  display: block; /* 避免inline元素的默认间距 */\n  user-select: none;  /* 禁用文本选择 */\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  /* 确保Canvas能正确适应容器尺寸变化 */\n  box-sizing: border-box;\n  /* 防止图像模糊 */\n  image-rendering: -webkit-optimize-contrast;\n  image-rendering: crisp-edges;\n  image-rendering: pixelated;\n  /* 确保Canvas在容器中正确定位 */\n  position: relative;\n  /* 防止Canvas被拉伸变形 */\n  object-fit: contain;\n}\n\n/* 确保容器能正确处理尺寸变化 */\n#canvasContainer {\n  position: relative;\n  overflow: hidden; /* 防止滚动条出现 */\n  /* 确保容器能正确响应尺寸变化 */\n  resize: both;\n}\n\n/* 确保tooltip样式设置为明显可见的样式 */\n.tooltip-main {\n  position: fixed !important; /* 使用fixed确保相对于视口定位 */\n  background-color: rgba(255, 255, 255, 0.98) !important;\n  color: #333 !important;\n  padding: 12px !important;\n  text-align: left !important;\n  border: 3px solid #ff0000 !important; /* 使用鲜艳的红色边框 */\n  border-radius: 6px !important;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4) !important;\n  z-index: 100000 !important; /* 确保在最上层 */\n  pointer-events: none !important;\n  font-size: 14px !important;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif !important;\n  transition: opacity 0.15s ease-in-out !important;\n  min-width: 150px !important;\n  max-width: 300px !important;\n  word-wrap: break-word !important;\n}\n</style>\n\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ScatterBrainSingle.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ScatterBrainSingle.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ScatterBrainSingle.vue?vue&type=template&id=5a85b488\"\nimport script from \"./ScatterBrainSingle.vue?vue&type=script&lang=js\"\nexport * from \"./ScatterBrainSingle.vue?vue&type=script&lang=js\"\nimport style0 from \"./ScatterBrainSingle.vue?vue&type=style&index=0&id=5a85b488&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('div',{staticClass:\"select-list ml-3 mr-3\"},[_c('div',{staticClass:\"select-item\"},_vm._l((_vm.source.node),function(value,key,index){return _c('p',{key:index,staticClass:\"info-item\"},[(key !== 'x' && key !== 'y')?[_c('span',{staticClass:\"text-hidden\",staticStyle:{\"width\":\"40%\"}},[_vm._v(_vm._s(key))]),_c('span',{staticClass:\"text-hidden\",staticStyle:{\"width\":\"50%\"}},[_vm._v(_vm._s(value))])]:_vm._e()],2)}),0)])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n <div>\r\n     <div\r\n          class=\"select-list ml-3 mr-3\"\r\n        >\r\n          <div class=\"select-item\">\r\n            <p\r\n              class=\"info-item\"\r\n              v-for=\"(value, key, index) in source.node\"\r\n              :key=\"index\"\r\n            >\r\n              <template v-if=\"key !== 'x' && key !== 'y'\">\r\n                <span class=\"text-hidden\" style=\"width: 40%\">{{ key }}</span>\r\n                <span class=\"text-hidden\" style=\"width: 50%\">{{ value }}</span>\r\n              </template>\r\n            </p>\r\n          </div>\r\n    </div>\r\n </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'infoList',\r\n  props: {\r\n    index: {\r\n      type: Number\r\n    },// 每一行的索引\r\n    source: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },// 每一行的内容\r\n    label: {\r\n      type: String\r\n    },// 需要显示的名称\r\n    value: {\r\n      type: String\r\n    },// 绑定的值\r\n  },\r\n  mounted(){\r\n  }\r\n}\r\n</script>\r\n<style scoped lang=\"scss\">\r\n.text-hidden {\r\n  display: inline-block;\r\n  white-space: nowrap;\r\n  /* 2. 溢出的部分隐藏起来 */\r\n  overflow: hidden;\r\n  /* 3. 文字溢出的时候用省略号来显示 */\r\n  text-overflow: ellipsis;\r\n}\r\n.select-list {\r\n  text-align: left;\r\n  border-bottom: 1px solid #eee;\r\n  padding: 10px 0;\r\n}\r\n.info-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n</style>\r\n\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./infoList.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./infoList.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./infoList.vue?vue&type=template&id=07b8a7c6&scoped=true\"\nimport script from \"./infoList.vue?vue&type=script&lang=js\"\nexport * from \"./infoList.vue?vue&type=script&lang=js\"\nimport style0 from \"./infoList.vue?vue&type=style&index=0&id=07b8a7c6&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"07b8a7c6\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"graph-controls\"},[_c('v-row',{staticClass:\"graph-row\",class:{'flex-column': _vm.$vuetify.breakpoint.xs}},[_c('v-col',{staticClass:\"dataset-info\",attrs:{\"cols\":_vm.$vuetify.breakpoint.xs ? 12 : (5 / _vm.graphNum)}},[_c('p',{staticClass:\"mb-2 dataset-name text-truncate\"},[_vm._v(\" \"+_vm._s(_vm.datasetName)+\" \")]),_c('p',{staticClass:\"status-line\"},[_c('svg',{staticClass:\"v-icon__svg mr-1\",attrs:{\"viewBox\":\"0 0 24 24\",\"role\":\"img\",\"aria-hidden\":\"true\"}},[_c('path',{attrs:{\"d\":\"M12,19.58V19.58C10.4,19.58 8.89,18.96 7.76,17.83C6.62,16.69 6,15.19 6,13.58C6,12 6.62,10.47 7.76,9.34L12,5.1M17.66,7.93L12,2.27V2.27L6.34,7.93C3.22,11.05 3.22,16.12 6.34,19.24C7.9,20.8 9.95,21.58 12,21.58C14.05,21.58 16.1,20.8 17.66,19.24C20.78,16.12 20.78,11.05 17.66,7.93Z\"}})]),_c('span',{staticClass:\"mr-2 text-truncate\"},[_vm._v(_vm._s(_vm.colorBy))]),_c('v-icon',{staticClass:\"mr-1\",attrs:{\"small\":\"\"}},[_vm._v(\"mdi-link\")]),(!_vm.filterNum)?_c('span',{staticClass:\"mr-2\"},[_vm._v(\"None\")]):_c('span',{staticClass:\"mr-2\"},[_vm._v(_vm._s(_vm.filterNum)+\" filters\")]),_c('v-icon',{staticClass:\"mr-1\",attrs:{\"small\":\"\"}},[_vm._v(\"mdi-camera-outline\")]),_c('span',[_vm._v(\"Sync Camera\")])],1)]),_c('v-col',{staticClass:\"control-buttons\",attrs:{\"cols\":_vm.$vuetify.breakpoint.xs ? 12 : (7 / _vm.graphNum)}},[_c('div',{staticClass:\"icons-container\"},[_c('v-icon',{staticClass:\"graph-icon\",class:{ opearate_active: _vm.operateActive === 1 },on:{\"click\":function($event){return _vm.changeOperator(1)}}},[_vm._v(\"mdi-arrow-expand-all\")]),_c('v-icon',{staticClass:\"graph-icon\",class:{ opearate_active: _vm.operateActive === 2 },on:{\"click\":_vm.openSelectDrawer}},[_vm._v(\"mdi-select-arrow-up\")]),_c('v-divider',{staticClass:\"mx-2\",staticStyle:{\"height\":\"20px\"},attrs:{\"inset\":\"\",\"vertical\":\"\"}}),_c('v-icon',{staticClass:\"graph-icon\",class:{ opearate_active: _vm.operateActive === 3 },on:{\"click\":_vm.separateGraph}},[_vm._v(\"mdi-plus-circle-multiple-outline\")]),_c('v-icon',{staticClass:\"graph-icon\",class:{ opearate_active: _vm.operateActive === 4 },on:{\"click\":_vm.downloadImage}},[_vm._v(\"mdi-arrow-down\")]),_c('v-icon',{staticClass:\"graph-icon\",class:{ opearate_active: _vm.operateActive === 5 },on:{\"click\":_vm.deleteSeparateGraph}},[_vm._v(\"mdi-delete\")])],1)])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!--\n * 图表控制组件\n * 从SingleCellGraph.vue中拆分出的控制栏逻辑\n -->\n<template>\n  <div class=\"graph-controls\">\n    <v-row class=\"graph-row\" :class=\"{'flex-column': $vuetify.breakpoint.xs}\">\n      <v-col\n        :cols=\"$vuetify.breakpoint.xs ? 12 : (5 / graphNum)\"\n        class=\"dataset-info\"\n      >\n        <p class=\"mb-2 dataset-name text-truncate\">\n          {{ datasetName }}\n        </p>\n        <p class=\"status-line\">\n          <svg\n            viewBox=\"0 0 24 24\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            class=\"v-icon__svg mr-1\"\n          >\n            <path\n              d=\"M12,19.58V19.58C10.4,19.58 8.89,18.96 7.76,17.83C6.62,16.69 6,15.19 6,13.58C6,12 6.62,10.47 7.76,9.34L12,5.1M17.66,7.93L12,2.27V2.27L6.34,7.93C3.22,11.05 3.22,16.12 6.34,19.24C7.9,20.8 9.95,21.58 12,21.58C14.05,21.58 16.1,20.8 17.66,19.24C20.78,16.12 20.78,11.05 17.66,7.93Z\"\n            ></path>\n          </svg>\n          <span class=\"mr-2 text-truncate\">{{ colorBy }}</span>\n          <v-icon class=\"mr-1\" small>mdi-link</v-icon>\n          <span class=\"mr-2\" v-if=\"!filterNum\">None</span>\n          <span class=\"mr-2\" v-else>{{ filterNum }} filters</span>\n          <v-icon class=\"mr-1\" small>mdi-camera-outline</v-icon>\n          <span>Sync Camera</span>\n        </p>\n      </v-col>\n      <v-col\n        :cols=\"$vuetify.breakpoint.xs ? 12 : (7 / graphNum)\"\n        class=\"control-buttons\"\n      >\n        <div class=\"icons-container\">\n          <v-icon\n            class=\"graph-icon\"\n            :class=\"{ opearate_active: operateActive === 1 }\"\n            @click=\"changeOperator(1)\"\n            >mdi-arrow-expand-all</v-icon\n          >\n          <v-icon\n            class=\"graph-icon\"\n            :class=\"{ opearate_active: operateActive === 2 }\"\n            @click=\"openSelectDrawer\"\n            >mdi-select-arrow-up</v-icon\n          >\n          <v-divider\n            class=\"mx-2\"\n            inset\n            vertical\n            style=\"height: 20px\"\n          ></v-divider>\n          <v-icon\n            class=\"graph-icon\"\n            :class=\"{ opearate_active: operateActive === 3 }\"\n            @click=\"separateGraph\"\n            >mdi-plus-circle-multiple-outline</v-icon\n          >\n          <v-icon\n            class=\"graph-icon\"\n            :class=\"{ opearate_active: operateActive === 4 }\"\n            @click=\"downloadImage\"\n            >mdi-arrow-down</v-icon\n          >\n          <v-icon\n            class=\"graph-icon\"\n            :class=\"{ opearate_active: operateActive === 5 }\"\n            @click=\"deleteSeparateGraph\"\n            >mdi-delete</v-icon\n          >\n        </div>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from 'vuex';\n\nexport default {\n  name: 'GraphControls',\n  props: {\n    // 数据集名称\n    datasetName: {\n      type: String,\n      default: ''\n    },\n    // 颜色字段\n    colorBy: {\n      type: String,\n      default: ''\n    },\n    // 过滤数量\n    filterNum: {\n      type: Number,\n      default: 0\n    },\n    // 操作类型\n    operateActive: {\n      type: Number,\n      default: 1\n    },\n    // 图表数量\n    graphNum: {\n      type: Number,\n      default: 1\n    }\n  },\n  methods: {\n    ...mapActions('uiState', [\n      'setOperateActive',\n      'openDrawer'\n    ]),\n    \n    /**\n     * 改变操作模式\n     * @param {number} type - 操作类型\n     */\n    changeOperator(type) {\n      this.setOperateActive(type);\n      this.$emit('changeOperator', type);\n    },\n    \n    /**\n     * 打开选择抽屉\n     */\n    openSelectDrawer() {\n      this.setOperateActive(2);\n      this.openDrawer();\n      this.$emit('openSelectDrawer');\n    },\n    \n    /**\n     * 分离图表\n     */\n    separateGraph() {\n      this.setOperateActive(3);\n      this.$emit('separateGraph');\n    },\n    \n    /**\n     * 删除分离的图表\n     */\n    deleteSeparateGraph() {\n      this.setOperateActive(5);\n      this.$emit('deleteSeparateGraph');\n    },\n    \n    /**\n     * 下载图表为PNG图像\n     */\n    downloadImage() {\n      this.$emit('downloadImage');\n    }\n  }\n};\n</script>\n\n<style scoped>\n.graph-controls {\n  padding: 8px;\n  border-bottom: 1px solid #eee;\n  width: 100%;\n}\n\n.graph-row {\n  width: 100%;\n}\n\n.dataset-info {\n  text-align: left;\n  font-size: 14px;\n  color: #000;\n  min-width: 0;\n}\n\n.dataset-name {\n  white-space: nowrap;\n  max-width: 100%;\n}\n\n.status-line {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  max-width: 100%;\n}\n\n.control-buttons {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  padding-right: 0;\n}\n\n.icons-container {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  margin-left: auto;\n  flex-wrap: wrap;\n}\n\n@media (max-width: 600px) {\n  .control-buttons {\n    justify-content: center;\n    margin-top: 10px;\n  }\n  \n  .icons-container {\n    margin-left: 0;\n    justify-content: center;\n  }\n  \n  .graph-icon {\n    margin: 4px;\n  }\n  \n  .status-line {\n    justify-content: flex-start;\n  }\n}\n\n.graph-icon {\n  cursor: pointer;\n  color: #777;\n  transition: all 0.3s;\n  margin-right: 8px;\n}\n\n.graph-icon:hover {\n  color: #000;\n}\n\n.opearate_active {\n  color: #1976d2 !important;\n}\n\n.text-truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n</style> ","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GraphControls.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GraphControls.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./GraphControls.vue?vue&type=template&id=30eed7df&scoped=true\"\nimport script from \"./GraphControls.vue?vue&type=script&lang=js\"\nexport * from \"./GraphControls.vue?vue&type=script&lang=js\"\nimport style0 from \"./GraphControls.vue?vue&type=style&index=0&id=30eed7df&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"30eed7df\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <v-row style=\"height: 100%\" class=\"single-cell-graph\">\n    <v-col\n      :cols=\"drawer ? 9 : 12 / graphNum\"\n      style=\"height: 100%\"\n      v-for=\"i in graphNum\"\n      :key=\"i\"\n    >\n      <v-progress-linear\n        v-show=\"loading\"\n        indeterminate\n        color=\"yellow darken-2\"\n      ></v-progress-linear>\n      <div class=\"graph-brain\">\n        <GraphControls\n          :datasetName=\"datasetName\"\n          :colorBy=\"colorBy\"\n          :filterNum=\"filterNum\"\n          :operateActive=\"operateActive\"\n          :graphNum=\"graphNum\"\n          @changeOperator=\"changeOperator\"\n          @openSelectDrawer=\"openSelectDrawer\"\n          @separateGraph=\"separateGraph\"\n          @deleteSeparateGraph=\"deleteSeparateGraph\" \n          @downloadImage=\"downloadImage\"\n\n        ></GraphControls>\n        <v-row style=\"flex-shrink: 0; flex: 1\">\n          <v-col cols=\"12\">\n            <ScatterBrainSingle\n              v-if=\"datasetType==='single'\"\n              ref=\"singleChart\"\n              :operate=\"operateActive\"\n              :typeInfo=\"typeInfo\"\n              :colorData=\"colorData\"\n              :umapData=\"partialData\"\n              :dataRange=\"dataRange\"\n              :colorRange=\"colorRange\"\n              :total=\"total\"\n              :quadTree=\"quadTree\"\n              :key=\"refKey\"\n              :hoverVal=\"hoverCategory\"\n              :nodeMap=\"nodeMap\"\n              :sizeData=\"sizeData\"\n              :colorBy=\"colorBy\"\n              @selectArea=\"selectArea\"\n              :selectedTypes=\"selectedTypes\"\n              :typeClass=\"typeClass\"\n              :typeItem=\"typeItem\"\n              :typeValue=\"typeValue\"\n              :operatorType=\"operatorType\"\n              :filterNum=\"filterNum\"\n              :field=\"field\"\n              :fieldValue=\"fieldValue\"\n              :geneData=\"geneData\"\n              :geneExpRange=\"geneExpRange\"\n            ></ScatterBrainSingle>\n            <ScatterBrainMultiple\n              v-else\n              ref=\"multipleChart\"\n              :operate=\"operateActive\"\n              :typeInfo=\"typeInfo\"\n              :colorData=\"colorData\"\n              :umapData=\"partialData\"\n              :dataRange=\"dataRange\"\n              :colorRange=\"colorRange\"\n              :total=\"total\"\n              :quadTree=\"quadTree\"\n              :key=\"refKey\"\n              :hoverVal=\"hoverCategory\"\n              :nodeMap=\"nodeMap\"\n              :sizeData=\"sizeData\"\n              :colorBy=\"colorBy\"\n              @selectArea=\"selectArea\"\n              :selectedTypes=\"selectedTypes\"\n              :typeClass=\"typeClass\"\n              :typeItem=\"typeItem\"\n              :typeValue=\"typeValue\"\n              :operatorType=\"operatorType\"\n              :filterNum=\"filterNum\"\n              :field=\"field\"\n              :fieldValue=\"fieldValue\"\n              :summaryData=\"summaryData\"\n            ></ScatterBrainMultiple>\n          </v-col>\n        </v-row>\n      </div>\n    </v-col>\n    <v-col\n      :cols=\"3\"\n      style=\"height: 100vh; border-left: 1px solid #eee\"\n      v-if=\"drawer\"\n    >\n      <div class=\"drawer-title\">\n        <h3>Selected Cells</h3>\n        <v-icon @click=\"handleCloseDrawer\">mdi-close</v-icon>\n      </div>\n      <v-list style=\"overflow-y: auto\" height=\"30vh\">\n        <v-list-item-group v-model=\"selectedItem\" color=\"primary\">\n          <v-list-item\n            v-for=\"(item, index) in selectNodes\"\n            :key=\"index\"\n            @click=\"changeCellItem(index)\"\n          >\n            <v-list-item-avatar>\n              <span\n                class=\"color-circle\"\n                :style=\"{ backgroundColor: _.get(item, 'key', '#fff') }\"\n              ></span>\n            </v-list-item-avatar>\n\n            <v-list-item-content>\n              <v-list-item-title>\n                {{ _.get(item, ['value', 0, 'node', colorBy], '') }}\n              </v-list-item-title>\n            </v-list-item-content>\n\n            <v-list-item-action>\n              <span>{{ _.get(item, [\"value\", \"length\"], \"\") }}</span>\n            </v-list-item-action>\n          </v-list-item>\n        </v-list-item-group>\n      </v-list>\n      <div style=\"border-top: 2px solid #eee; height: 60vh; overflow-y: auto\">\n        <div class=\"drawer-title ml-2\">\n          <div style=\"display: flex; align-items: center; width: 60%\">\n            <span\n              class=\"color-circle\"\n              :style=\"{ backgroundColor: _.get(selectInfo, 'key', '#fff') }\"\n            ></span>\n            <span class=\"ml-3 text-hidden\" style=\"width: 50%\">{{\n              _.get(\n                selectInfo,\n                [\"value\", 0, \"node\", \"Siletti_modf_SCANVI_L1\"],\n                \"\"\n              )\n            }}</span>\n          </div>\n          <v-icon style=\"flex: 1\">mdi-download</v-icon>\n        </div>\n        <virtual-list\n          :data-key=\"'id'\"\n          :data-sources=\"_.get(selectInfo, 'value', [])\"\n          :data-component=\"itemComponent\"\n          :keeps=\"_.get(selectInfo, ['value', 'length'], 0)\"\n        />\n      </div>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\nimport ScatterBrainSingle from \"./ScatterBrainSingle.vue\";\n// import ScatterBrainMultiple from \"./ScatterBrainMultiple.vue\";\nimport VirtualList from \"vue-virtual-scroll-list\";\nimport infoList from \"./components/infoList.vue\";\nimport { mapState, mapGetters, mapActions } from 'vuex';\nimport { nonReactiveDataMixin } from '@/utils/nonReactiveDataStore';\nimport GraphControls from \"../components/visualization/GraphControls.vue\";\n\nexport default {\n  mixins: [nonReactiveDataMixin], // 🔄 添加非响应式数据mixin\n  props: {\n    // 数据集类型\n    datasetType: {\n      type: String,\n      default: 'single'\n    },\n    // 可视化类型\n    visualizationType: {\n      type: String,\n      default: 'umap'\n    }\n  },\n  components: {\n    VirtualList,\n    // ScatterBrainMultiple,\n    ScatterBrainSingle,\n    GraphControls,\n  },\n  data() {\n    return {\n      itemComponent: infoList,\n      graphNum: 1,\n      selectedItem: 0,\n      selectInfo: {},\n      colorData: [],\n      orginColorData: [],\n      refKey: 0,\n      umapData: [],\n      partialData: [],\n      colorRange: {},\n      sizeData: [],\n      quadTree: null,\n      nodeMap: null,\n      hoverCategory: -1,\n      treeMap: new Map(),\n      typeClass: [],\n      typeItem: [],\n      typeValue: [],\n      operatorType: [],\n      geneData: [],\n      selectedTypes: [] // 添加缺失的 selectedTypes 属性\n    };\n  },\n  computed: {\n    // 🔄 修改computed以使用新的getters（从nonReactiveDataStore获取大数据）\n    ...mapState('cellData', [\n      'typeInfo',\n      'classInfo',\n      // 'geneExp',      // 已迁移到nonReactiveDataStore\n      'hoverInfo',\n      'field',\n      // 'fieldValue',   // 已迁移到nonReactiveDataStore\n      'total',\n      'dataRange',\n      'summaryData',\n      'colorField',\n      'geneExpRange'\n    ]),\n    ...mapGetters('cellData', [\n      'getFieldValue'\n    ]),\n    ...mapState('uiState', [\n      'drawer',\n      'operateActive',\n      'selectNodes'\n    ]),\n    ...mapGetters('uiState', [\n      'isDrawerOpen'\n    ]),\n    \n    // 使用getters获取大数据（自动从nonReactiveDataStore获取）\n    geneExp() {\n      return this.getNonReactiveData('geneExp') || {};\n    },\n    fieldValue() {\n      return this.getFieldValue;\n    },\n    \n    colorBy() {\n      return this.colorField;\n    },\n    datasetName() {\n      return this.$store.state.cellData.datasetName;\n    },\n    filterNum() {\n      return this.typeClass.length;\n    },\n    ...mapState({\n      loading: state => state.loading\n    }),\n    // 使用props中的datasetType\n    // datasetType() {\n    //   return this.datasetType;\n    // }\n  },\n  watch: {\n    drawer: {\n      handler(newDrawerState, oldDrawerState) {\n        this.$nextTick(() => {\n          setTimeout(() => {\n            this.handleDrawerStateChange(newDrawerState);\n          }, 100);\n        });\n      },\n      immediate: false\n    },\n    typeInfo: {\n      handler(val) {\n        this.filterTypeData(val);\n      },\n      deep: true\n    },\n    classInfo: {\n      handler(val) {\n        this.filterTypeData(this.typeInfo);\n      },\n      deep: true,\n    },\n    geneExp: {\n      handler(val) {\n        console.log('🧬 SingleCellGraph geneExp watcher triggered:', {\n          isEmpty: _.isEmpty(val),\n          geneCount: val ? Object.keys(val).length : 0,\n          genes: val ? Object.keys(val) : [],\n          datasetType: this.datasetType\n        });\n        \n        if (_.isEmpty(val)) {\n          console.log('🧬 设置 geneData 为空数组');\n          this.geneData = [];\n        } else {\n          console.log('🧬 调用 filterGeneExp 处理基因数据');\n          this.filterGeneExp(val);\n        }\n      },\n      deep: true,\n    },\n    hoverInfo: {\n      handler(val) {\n        console.log('🖱️ SingleCellGraph hoverInfo watcher:', val);\n        if (!_.isEmpty(val)) {\n          this.getHoverFilterData(val);\n        } else {\n          console.log('🖱️ 清除悬浮高亮，恢复选中状态');\n          this.hoverCategory = -1;\n          this.filterTypeData(this.typeInfo);\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    ...mapActions('uiState', [\n      'setOperateActive',\n      'toggleDrawer',\n      'closeDrawer',\n      'openDrawer',\n      'setSelectNodes'\n    ]),\n    filterTypeData(typeInfo) {\n      const typeClass = [];\n      const typeItem = [];\n      const typeValue = [];\n      const operateActive = [];\n      let filterNum = 0;\n      let flag = false;\n      \n      for (const key in typeInfo) {\n        if (key !== \"Class\") {\n          // 处理普通类型\n          const types = typeInfo[key];\n          const index = _.indexOf(this.field, key);\n          \n          // 跳过无效索引\n          if (index === -1) continue;\n          \n          const classValue = Math.floor(index / 4);\n          const itemValue = index % 4;\n          \n          for (const type of types) {\n            // 检查是否有重复条件\n            let exitOther = false;\n            for (let i = 0; i < filterNum; i++) {\n              if (typeClass[i] === classValue && typeItem[i] === itemValue) {\n                if (!flag && operateActive[i] === 0) {\n                  flag = true;\n                } else {\n                  exitOther = true;\n                }\n              }\n            }\n            \n            typeClass.push(classValue);\n            typeItem.push(itemValue);\n            \n            const valueIndex = _.indexOf(this.fieldValue[key], type);\n            typeValue.push(valueIndex);\n            \n            // 确定操作符类型\n            if (flag) {\n              operateActive.push(2); // OR\n            } else if (exitOther || operateActive.length === 0) {\n              operateActive.push(1);\n            } else {\n              operateActive.push(0); // AND\n            }\n            \n            filterNum++;\n          }\n        } else {\n          // 处理Class类型\n          // 现在classData是直接的子节点数组，不再是分组对象\n          const classData = typeInfo[key];\n          \n          // 检查classData是否为数组（新格式）还是对象（旧格式）\n          if (Array.isArray(classData)) {\n            // 新格式：直接处理子节点数组\n            const index = _.indexOf(this.field, \"Siletti_modf_SCANVI_L2\");\n            \n            // 跳过无效索引\n            if (index === -1) continue;\n            \n            const classPositionValue = Math.floor(index / 4);\n            const itemPositionValue = index % 4;\n            \n            // 直接遍历子节点数组\n            for (const childNode of classData) {\n              typeClass.push(classPositionValue);\n              typeItem.push(itemPositionValue);\n              \n              const valueIndex = _.indexOf(this.fieldValue[\"Siletti_modf_SCANVI_L2\"], childNode);\n              if (valueIndex !== -1) { // 只添加找到索引的项目\n                typeValue.push(valueIndex);\n                operateActive.push(1); // OR\n                filterNum++;\n              }\n            }\n          } else {\n            // 兼容旧格式：按分组对象处理（保持向后兼容）\n            for (const classKey in classData) {\n              const lv2Value = classData[classKey];\n              const index = _.indexOf(this.field, \"Siletti_modf_SCANVI_L2\");\n              \n              // 跳过无效索引\n              if (index === -1) continue;\n              \n              const classPositionValue = Math.floor(index / 4);\n              const itemPositionValue = index % 4;\n              \n              for (const lv2 of lv2Value) {\n                typeClass.push(classPositionValue);\n                typeItem.push(itemPositionValue);\n                \n                const valueIndex = _.indexOf(this.fieldValue[\"Siletti_modf_SCANVI_L2\"], lv2);\n                typeValue.push(valueIndex);\n                \n                operateActive.push(1); // OR\n                filterNum++;\n              }\n            }\n          }\n        }\n      }\n\n      this.typeClass = typeClass;\n      this.typeItem = typeItem;\n      this.typeValue = typeValue;\n      this.operatorType = operateActive;\n      \n      // 将筛选数据设置到store中，供ScatterBrainSingle组件使用\n      this.$store.commit('uiState/SET_FILTER_DATA', {\n        typeClass,\n        typeItem,\n        typeValue,\n        operatorType: operateActive,\n        filterNum\n      });\n    },\n    \n    /**\n     * 处理悬浮高亮数据\n     * @param {Object} hoverInfo - 悬浮信息 { key, value, type }\n     */\n    getHoverFilterData(hoverInfo) {\n      console.log('🖱️ 处理悬浮高亮:', hoverInfo);\n      \n      if (!hoverInfo || !hoverInfo.key) {\n        console.warn('悬浮信息不完整:', hoverInfo);\n        return;\n      }\n      \n      const { key, value, type, valueIndex } = hoverInfo;\n      \n      // 找到属性在 field 中的索引\n      const fieldIndex = _.indexOf(this.field, key);\n      if (fieldIndex === -1) {\n        console.warn(`属性 ${key} 在 field 中未找到`);\n        return;\n      }\n      \n      // 优先使用传递的 valueIndex，如果没有则查找\n      let actualValueIndex = valueIndex;\n      if (actualValueIndex === undefined || actualValueIndex < 0) {\n        // 查找属性值的索引\n        if (this.fieldValue[key] && Array.isArray(this.fieldValue[key])) {\n          if (type === 'treeView') {\n            // 对于树形视图，直接使用 value 作为属性值名称\n            actualValueIndex = this.fieldValue[key].indexOf(value);\n          } else {\n            // 对于普通视图，value 应该是属性值名称\n            actualValueIndex = this.fieldValue[key].indexOf(value);\n          }\n        }\n      }\n      \n      if (actualValueIndex === undefined || actualValueIndex < 0) {\n        console.warn(`无法确定属性值 ${value} 在 ${key} 中的索引`);\n        return;\n      }\n      \n      console.log(`🖱️ 悬浮高亮: ${key}[${fieldIndex}] = ${value}[${actualValueIndex}]`);\n      \n      // 设置悬浮高亮数据（单一条件，优先级最高）\n      const typeClass = [Math.floor(fieldIndex / 4)];\n      const typeItem = [fieldIndex % 4];\n      const typeValue = [actualValueIndex];\n      const operatorType = [0]; // 0 表示普通筛选\n      const filterNum = 1;\n      \n      // 设置悬浮类别，用于区分悬浮和选中状态\n      this.hoverCategory = actualValueIndex;\n      \n      // 将悬浮筛选数据设置到store中\n      this.$store.commit('uiState/SET_FILTER_DATA', {\n        typeClass,\n        typeItem,\n        typeValue,\n        operatorType: operatorType,\n        filterNum,\n        isHover: true // 标记为悬浮状态\n      });\n      \n      console.log('🖱️ 悬浮高亮数据已设置');\n    },\n    filterGeneExp(geneExp) {\n      let keys = Object.keys(geneExp);\n      let key = keys[0];\n      console.log('🧬 filterGeneExp:', {\n        keys: keys,\n        selectedKey: key,\n        dataLength: geneExp[key] ? geneExp[key].length : 0,\n        sampleData: geneExp[key] ? geneExp[key].slice(0, 5) : []\n      });\n      this.geneData = geneExp[key];\n      console.log('🧬 设置 geneData 完成，长度:', this.geneData ? this.geneData.length : 0);\n    },\n    separateGraph() {\n      this.setOperateActive(3);\n      this.graphNum = 2;\n      this.colorData = this.orginColorData;\n      this.partialData = this.umapData;\n      this.refKey = this.refKey + 1;\n    },\n    deleteSeparateGraph() {\n      if (this.graphNum > 1) {\n        this.graphNum = 1;\n        this.setOperateActive(1);\n      }\n    },\n    selectArea(selected) {\n      if (!selected || !selected.length) return;\n      \n      const selectNodes = [];\n      \n      // 处理每个选中项\n      for (let i = 0; i < selected.length; i++) {\n        const node = {};\n        let currentInfo = selected[i].slice(2, selected[i].length-1) || [];\n        \n        // 处理属性\n        currentInfo.forEach((item, index) => {\n          if (index < selected[i].length - 1) {\n            node[this.field[index]] = this.fieldValue[this.field[index]][item];\n          }\n        });\n        \n        // 处理颜色\n        const colors = selected[i][selected[i].length - 1] || [];\n        let color = colors.map(item => Math.round(item * 255)).join(\",\");\n        color = `rgba(${color})`;\n        \n        selectNodes.push({ node, color, id: i });\n      }\n      \n      // 按颜色分组\n      const groupNodes = _.groupBy(selectNodes, \"color\");\n      const selectGroupNodes = Object.keys(groupNodes).map(key => ({ \n        key, \n        value: groupNodes[key] \n      }));\n      \n      this.setSelectNodes(selectGroupNodes);\n      this.selectInfo = selectGroupNodes[0] || {};\n      this.colorData = this.orginColorData;\n      this.partialData = this.umapData;\n    },\n    changeCellItem(index = 0) {\n      this.selectInfo = this.selectNodes[index];\n    },\n    changeOperator(index) {\n      this.setOperateActive(index);\n      if (index === 1) {\n        // 点击arrow-expand-all图标时，清除选区效果并恢复图形原状\n        this.clearSelectionAndRestore();\n        \n        // 如果抽屉是打开的，关闭它\n        if (this.drawer) {\n          this.closeDrawer();\n        }\n      }\n    },\n    openSelectDrawer() {\n      this.openDrawer();\n      this.setOperateActive(2);\n    },\n    getHoverFilterData(hoverInfo) {\n      if (!hoverInfo || !hoverInfo.key) return;\n      \n      const index = _.indexOf(this.field, hoverInfo.key);\n      if (index === -1) return;\n      \n      const classValue = Math.floor(index / 4);\n      const itemValue = index % 4;\n      const valueIndex = _.indexOf(this.fieldValue[hoverInfo.key], hoverInfo.value);\n      \n      if (valueIndex === -1) return;\n      \n      // 检查是否已存在相同的过滤条件\n      for (let i = 0; i < this.filterNum; i++) {\n        if (this.typeClass[i] === classValue && \n            this.typeItem[i] === itemValue && \n            this.typeValue[i] === valueIndex) {\n          return; // 已存在相同的过滤条件，无需添加\n        }\n      }\n      \n      // 添加新的过滤条件\n      this.typeClass.push(classValue);\n      this.typeItem.push(itemValue);\n      this.typeValue.push(valueIndex);\n      this.operatorType.push(1); // OR操作\n      this.hoverCategory = valueIndex;\n    },\n    downloadImage() {\n      const chartComponent = this.datasetType === 'single' \n        ? this.$refs.singleChart \n        : this.$refs.multipleChart;\n      \n      if (!chartComponent) {\n        this.directDownload();\n        return;\n      }\n      \n      if (typeof chartComponent.downloadImage !== 'function') {\n        if (this.datasetType === 'single' && chartComponent.backupDownload) {\n          chartComponent.backupDownload();\n          return;\n        }\n        \n        this.directDownload();\n        return;\n      }\n      \n      try {\n        chartComponent.downloadImage();\n      } catch (error) {\n        this.directDownload();\n      }\n    },\n    \n    directDownload() {\n      try {\n        const container = this.datasetType === 'single' \n          ? document.querySelector('#canvasContainer')\n          : document.querySelector('.scatter-container');\n        \n        if (!container) return;\n        \n        const canvas = container.querySelector('canvas');\n        if (!canvas) return;\n        \n        const link = document.createElement('a');\n        const fileName = `scatter_plot_${this.colorBy || 'default'}.png`;\n        link.download = fileName;\n        link.href = canvas.toDataURL('image/png');\n        \n        document.body.appendChild(link);\n        link.click();\n        \n        setTimeout(() => {\n          document.body.removeChild(link);\n          URL.revokeObjectURL(link.href);\n        }, 100);\n      } catch (error) {\n        console.error('直接下载失败:', error);\n      }\n    },\n    handleDrawerStateChange(newDrawerState) {\n      console.log(`抽屉状态变化: ${newDrawerState ? '打开' : '关闭'}`);\n      \n      // 如果抽屉关闭，清除选区效果\n      if (!newDrawerState) {\n        console.log('抽屉关闭，清除选区效果');\n        try {\n          // 重置操作模式为平移模式\n          this.setOperateActive(1);\n          \n          // 清除选中的节点数据\n          this.setSelectNodes([]);\n          this.selectInfo = {};\n          \n          // 通知图表组件清除选区\n          const chartComponent = this.datasetType === 'single' \n            ? this.$refs.singleChart \n            : this.$refs.multipleChart;\n          \n          if (chartComponent) {\n            // 清除选区状态\n            if (typeof chartComponent.clearSelection === 'function') {\n              chartComponent.clearSelection();\n            }\n            \n            // 切换回平移模式\n            if (typeof chartComponent.setMode === 'function') {\n              chartComponent.setMode('pan');\n            }\n            \n            // 如果是ScatterBrainSingle，还需要清除渲染器的选区状态\n            if (this.datasetType === 'single' && chartComponent.renderer) {\n              if (typeof chartComponent.renderer.clearSelection === 'function') {\n                chartComponent.renderer.clearSelection();\n              }\n              if (typeof chartComponent.renderer.setMode === 'function') {\n                chartComponent.renderer.setMode('pan');\n              }\n            }\n          }\n          \n          // 重置数据状态\n          this.colorData = this.orginColorData;\n          this.partialData = this.umapData;\n          \n          console.log('抽屉关闭时的选区效果已清除');\n        } catch (error) {\n          console.error('抽屉关闭时清除选区效果出错:', error);\n        }\n      }\n      \n      // 通知所有图表组件更新渲染器尺寸\n      if (this.datasetType === 'single' && this.$refs.singleChart) {\n        // 单图表模式\n        if (this.$refs.singleChart.handleContainerResize) {\n          this.$refs.singleChart.handleContainerResize();\n        }\n      } else if (this.datasetType === 'multiple' && this.$refs.multipleChart) {\n        // 多图表模式\n        if (this.$refs.multipleChart.handleContainerResize) {\n          this.$refs.multipleChart.handleContainerResize();\n        }\n      }\n      \n      // 如果有多个图表实例，也需要更新它们\n      if (this.graphNum > 1) {\n        // 处理多图表情况\n        const chartRefs = this.$refs.singleChart || this.$refs.multipleChart;\n        if (Array.isArray(chartRefs)) {\n          chartRefs.forEach(chart => {\n            if (chart && chart.handleContainerResize) {\n              chart.handleContainerResize();\n            }\n          });\n        }\n      }\n    },\n    /**\n     * 清除选区效果并恢复图形原状\n     */\n    clearSelectionAndRestore() {\n      console.log('清除选区效果并恢复图形原状');\n      \n      try {\n        // 1. 重置操作模式为平移模式\n        this.setOperateActive(1);\n        \n        // 2. 清除选中的节点数据\n        this.setSelectNodes([]);\n        this.selectInfo = {};\n        \n        // 3. 通知图表组件清除选区\n        const chartComponent = this.datasetType === 'single' \n          ? this.$refs.singleChart \n          : this.$refs.multipleChart;\n        \n        if (chartComponent) {\n          // 清除选区状态\n          if (typeof chartComponent.clearSelection === 'function') {\n            chartComponent.clearSelection();\n          }\n          \n          // 切换回平移模式\n          if (typeof chartComponent.setMode === 'function') {\n            chartComponent.setMode('pan');\n          }\n          \n          // 如果是ScatterBrainSingle，还需要清除渲染器的选区状态\n          if (this.datasetType === 'single' && chartComponent.renderer) {\n            if (typeof chartComponent.renderer.clearSelection === 'function') {\n              chartComponent.renderer.clearSelection();\n            }\n            if (typeof chartComponent.renderer.setMode === 'function') {\n              chartComponent.renderer.setMode('pan');\n            }\n          }\n        }\n        \n        // 4. 重置数据状态\n        this.colorData = this.orginColorData;\n        this.partialData = this.umapData;\n        \n        console.log('选区效果已清除，图形已恢复原状');\n      } catch (error) {\n        console.error('清除选区效果时出错:', error);\n      }\n    },\n    /**\n     * 处理关闭抽屉事件\n     * 关闭抽屉时同时清除选区效果\n     */\n    handleCloseDrawer() {\n      console.log('点击关闭按钮，关闭Selected Cells抽屉');\n      \n      try {\n        // 先清除选区效果，确保选区框立即消失\n        this.clearSelectionAndRestore();\n        \n        // 然后关闭抽屉，抽屉关闭的watch也会再次清除选区（防止遗漏）\n        this.closeDrawer();\n        \n        console.log('抽屉关闭指令已发送，选区效果已清除');\n      } catch (error) {\n        console.error('关闭抽屉时出错:', error);\n      }\n    },\n    \n\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.v-icon__svg {\n  width: 1.25rem;\n  height: 1.25rem;\n  fill: #000;\n}\n.graph-icon {\n  width: 2.5rem;\n  height: 2.5rem;\n  cursor: pointer;\n  &:hover {\n    background-color: #eee;\n  }\n}\n.opearate_active {\n  background-color: #eee;\n}\n.color-circle {\n  flex-shrink: 0;\n  display: inline-block;\n  width: 2rem;\n  height: 2rem;\n  border-radius: 50%;\n}\n.drawer-title {\n  display: flex;\n  justify-content: space-between;\n  padding: 10px;\n}\n.info-item {\n  display: flex;\n  justify-content: space-between;\n}\n.text-hidden {\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.select-list {\n  text-align: left;\n  border-bottom: 1px solid #eee;\n  padding: 10px 0;\n}\n.graph-brain {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n.single-cell-graph {\n    user-select: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SingleCellGraph.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SingleCellGraph.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./SingleCellGraph.vue?vue&type=template&id=5b87b382&scoped=true\"\nimport script from \"./SingleCellGraph.vue?vue&type=script&lang=js\"\nexport * from \"./SingleCellGraph.vue?vue&type=script&lang=js\"\nimport style0 from \"./SingleCellGraph.vue?vue&type=style&index=0&id=5b87b382&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5b87b382\",\n  null\n  \n)\n\nexport default component.exports","<template>\n <div class=\"home\">\n    <!-- 侧边栏部分 -->\n    <div class=\"sidebar\" :style=\"{ width: sidebarWidth + 'px' }\">\n      <v-tabs\n        vertical\n        v-model=\"tab\"\n        class=\"sidebar-tabs\"\n      >\n        <div class=\"tab-buttons\">\n          <v-tab v-for=\"item in tabList\" :key=\"item.text\" class=\"tab-button\">\n            <v-icon>{{ item.icon }}</v-icon>\n          </v-tab>\n        </div>\n        <div class=\"sidebar-actions\">\n          <span class=\"action-icon\"><v-icon>mdi-redo</v-icon></span>\n          <span class=\"action-icon\"><v-icon>mdi-undo</v-icon></span>\n          <hr class=\"action-divider\" />\n          <span class=\"action-icon\"><v-icon>mdi-launch</v-icon></span>\n        </div>\n      </v-tabs>\n      \n      <!-- 侧边栏内容 -->\n      <v-tabs-items v-model=\"tab\" reverse class=\"sidebar-content\">\n        <v-tab-item v-for=\"item in tabList\" :key=\"item.text\">\n          <v-card color=\"basil\" flat class=\"full-height\">\n            <component\n              v-bind:is=\"item.component\"\n              @getType=\"getType\"\n              @getHover=\"getHover\"\n              @getGeneExp=\"getGeneExp\"\n              @getColorBy=\"getColorBy\"\n              @changeLayout=\"changeLayout\"\n              @currentRangeSelected=\"getRangeSelected\"\n              @panelStateChange=\"handlePanelStateChange\"\n              @dataset-changed=\"handleDatasetChanged\"\n            ></component>\n          </v-card>\n        </v-tab-item>\n      </v-tabs-items>\n      \n      <!-- 拖拽调整宽度的分隔条 -->\n      <div class=\"resize-handle\" v-if=\"!isPanelOpen\" @mousedown=\"initResize\"></div>\n    </div>\n    \n    <!-- 可视化图表区域 -->\n    <div class=\"visualization-area\" :class=\"gridClass\" :key=\"flag\">\n      <SingleCellGraphVue \n        v-for=\"(item, i) in datasetList\" \n        :key=\"datasetList[i]\"\n        class=\"grid-item\"\n        :summaryData=\"summaryData\" \n        :isDelete=\"signDelete\" \n        :currentIndex=\"i\" \n        :classInfo=\"classInfo\" \n        :datasetType=\"datasetList[i]\" \n        @deleteGrap=\"deleteGrap\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport ViewManager from \"./tab/ViewManager.vue\";\nimport CellProperties from \"./tab/CellProperties.vue\";\nimport Genes from \"./tab/Genes.vue\";\nimport SingleCellGraphVue from \"./SingleCellGraph.vue\";\nimport _ from \"lodash\";\nimport { mapState, mapGetters, mapActions } from 'vuex';\nimport { nonReactiveDataMixin } from '@/utils/nonReactiveDataStore';\n\nexport default {\n  name: \"HomeView\",\n  mixins: [nonReactiveDataMixin], // 🔄 添加非响应式数据mixin\n  components: { \n    ViewManager, \n    CellProperties, \n    Genes, \n    SingleCellGraphVue\n  },\n  \n  data() {\n    return {\n      tab: 1,\n      tabList: [\n        {\n          text: \"View Manager\",\n          component: \"ViewManager\",\n          icon: \"mdi-hub\",\n        },\n        {\n          text: \"Cell Properties\",\n          component: \"CellProperties\",\n          icon: \"mdi-cog\",\n        },\n        {\n          text: \"Genes\",\n          component: \"Genes\",\n          icon: \"mdi-magnify\",\n        },\n      ],\n      notCellType: ['x', 'y', 'Siletti_modf_SCANVI_L1', 'Siletti_modf_SCANVI_L2', 'region', 'subregion'],\n      addCellType: ['Class'],\n      classInfo: {},\n      flag: 'a',\n      signDelete: false,\n      summaryData: {},\n      sidebarWidth: 400, // 初始侧边栏宽度（像素）\n      minSidebarWidth: 400, // 最小宽度限制\n      maxSidebarWidth: 600, // 最大宽度限制\n      initialX: 0,\n      initialWidth: 0,\n      isPanelOpen: false // 初始值设为false，表示面板未打开\n    };\n  },\n  \n  async mounted() {\n    await this.loadInitialData();\n  },\n  \n  computed: {\n    // 🔄 修改computed以使用新的getters（从nonReactiveDataStore获取大数据）\n    ...mapState('cellData', [\n      // 'cellInfoList', // 已迁移到nonReactiveDataStore\n      // 'geneExp',      // 已迁移到nonReactiveDataStore  \n      // 'fieldValue',   // 已迁移到nonReactiveDataStore\n      'typeInfo',\n      'hoverInfo',\n      'colorField',\n      'datasetList',\n      'field',\n      'total',\n      'dataRange',\n      'geneList',\n      'datasetName',\n      'geneExpRange'\n    ]),\n    ...mapGetters('cellData', [\n      'getCellInfoList',\n      'getFieldValue'\n    ]),\n    ...mapGetters('uiState', [\n      'getGridClass'\n    ]),\n    \n    // 使用getters获取大数据（自动从nonReactiveDataStore获取）\n    cellInfoList() {\n      return this.getCellInfoList;\n    },\n    fieldValue() {\n      return this.getFieldValue;\n    },\n    geneExp() {\n      return this.getNonReactiveData('geneExp') || {};\n    },\n    \n    gridClass() {\n      return this.getGridClass || '';\n    }\n  },\n  \n  watch: {\n    datasetList: {\n      async handler(val) {\n        if (val.includes('multiple')) {\n          await this.loadDatasetSummary();\n        }\n      }\n    }\n  },\n  \n  methods: {\n    ...mapActions('cellData', [\n      'loadFieldsInfo',\n      'loadCellTypeValues',\n      'setTypeInfo',\n      'setHoverInfo',\n      'setColorField',\n      'loadGeneList'\n    ]),\n    ...mapActions('uiState', [\n      'updateGridClass',\n      'setCurrentRangeSelected'\n    ]),\n    /**\n     * 加载初始数据\n     */\n    async loadInitialData() {\n      try {\n        // 使用Vuex action加载数据\n        await this.loadFieldsInfo();\n        \n        // 异步加载cell_type_values.json\n        await this.loadCellTypeValues();\n        \n        // 加载基因列表\n        await this.$store.dispatch('cellData/loadGeneList');\n      } catch (error) {\n        console.error('加载初始数据失败:', error);\n      }\n    },\n    \n    /**\n     * 加载数据集摘要\n     */\n    async loadDatasetSummary() {\n      try {\n        const response = await fetch('/multiple_outputs/dataset_summary.json');\n        this.summaryData = await response.json();\n      } catch (error) {\n        console.error('加载数据集摘要失败:', error);\n      }\n    },\n    \n    /**\n     * 处理类型选择\n     */\n    getType(val) {\n      console.log('🏠 HomeView.getType 被调用:', val);\n      \n      const newTypeInfo = { ...this.typeInfo };\n      \n      if (val.type === 'plain') {\n        console.log('🏠 处理普通类型选择');\n        newTypeInfo[val.data.key] = val.data.value;\n        if (!val.data.value.length) {\n          delete newTypeInfo[val.data.key];\n        }\n      } else {\n        console.log('🏠 处理树形视图选择 (Class)');\n        newTypeInfo[val.data.key] = val.data.value;\n        if (_.isEmpty(newTypeInfo[val.data.key])) {\n          delete newTypeInfo[val.data.key];\n        }\n      }\n      \n      console.log('🏠 更新后的 typeInfo:', newTypeInfo);\n      this.setTypeInfo(newTypeInfo);\n    },\n    \n    /**\n     * 处理悬停事件\n     */\n    getHover(val) {\n      let hoverInfo = {};\n      \n      if (val.mode === 'over') {\n        const key = val.type === 'treeView' \n          ? (val.data.hasOwnProperty('children') ? 'Siletti_modf_SCANVI_L1' : 'Siletti_modf_SCANVI_L2') \n          : val.data.key;\n          \n        const value = val.type === 'treeView' ? val.data.name : val.data.value;\n        \n        hoverInfo = { key, value, type: val.type };\n        if (val.type === 'treeView' && !val.data.hasOwnProperty('children')) {\n          hoverInfo['parent'] = val.data.parent;\n        }\n      }\n      \n      this.setHoverInfo(hoverInfo);\n    },\n    \n    /**\n     * 获取基因表达\n     */\n    getGeneExp(val) {\n      if (_.isEmpty(val)) {\n        this.$store.commit('cellData/SET_GENE_EXP', {});\n      } else {\n        const keys = Object.keys(val);\n        const key = keys[keys.length - 1];\n        this.$store.commit('cellData/SET_GENE_EXP', { [key]: val[key] });\n      }\n    },\n    \n    /**\n     * 更新颜色配色方案\n     */\n    getColorBy(colorBy) {\n      this.setColorField(colorBy);\n      this.$store.commit('cellData/SET_GENE_EXP_RANGE', { ...this.geneExpRange, color: false });\n    },\n    \n    /**\n     * 改变布局\n     */\n    changeLayout(val) {\n      this.$store.commit('cellData/SET_DATASET_LIST', val);\n      this.updateGridClass();\n      this.flag = new Date().getTime();\n      this.signDelete = true;\n    },\n    \n    /**\n     * 删除图表\n     */\n    deleteGrap(index) {\n      console.log(`开始删除图表，索引: ${index}`);\n      \n      try {\n        // 先清理即将删除的组件的渲染器\n        const chartComponents = this.$children.filter(child => \n          child.$options.name === 'SingleCellGraphVue'\n        );\n        \n        if (chartComponents[index] && chartComponents[index].$refs.singleChart) {\n          const chartRef = chartComponents[index].$refs.singleChart;\n          if (chartRef.renderer && typeof chartRef.renderer.dispose === 'function') {\n            console.log(`清理第${index}个图表的渲染器`);\n            chartRef.renderer.dispose();\n            chartRef.renderer = null;\n          }\n        }\n        \n        // 延迟更新数据，确保组件清理完成\n        this.$nextTick(() => {\n          setTimeout(() => {\n            const newDatasetList = [...this.datasetList];\n            newDatasetList.splice(index, 1);\n            this.$store.commit('cellData/SET_DATASET_LIST', newDatasetList);\n            this.updateGridClass();\n            this.flag = new Date().getTime();\n            this.signDelete = newDatasetList.length > 1;\n            \n            console.log(`图表删除完成，剩余图表数量: ${newDatasetList.length}`);\n          }, 100); // 延迟100ms确保DOM稳定\n        });\n      } catch (error) {\n        console.error('删除图表时出错:', error);\n        \n        // 如果出错，仍然尝试删除\n        const newDatasetList = [...this.datasetList];\n        newDatasetList.splice(index, 1);\n        this.$store.commit('cellData/SET_DATASET_LIST', newDatasetList);\n        this.updateGridClass();\n        this.flag = new Date().getTime();\n        this.signDelete = newDatasetList.length > 1;\n      }\n    },\n    \n    /**\n     * 获取选定范围\n     */\n    getRangeSelected(val) {\n      this.$store.commit('cellData/SET_GENE_EXP_RANGE', val);\n      this.setCurrentRangeSelected(val);\n    },\n    \n    /**\n     * 初始化拖拽调整宽度\n     */\n    initResize(e) {\n      e.preventDefault();\n      document.addEventListener('mousemove', this.doResize);\n      document.addEventListener('mouseup', this.stopResize);\n      // 在body上添加样式，防止选中文本\n      document.body.style.userSelect = 'none';\n      this.initialX = e.clientX;\n      this.initialWidth = this.sidebarWidth;\n    },\n    \n    /**\n     * 执行宽度调整\n     */\n    doResize(e) {\n      this.sidebarWidth = this.initialWidth + (e.clientX - this.initialX);\n      // 限制最小宽度和最大宽度\n      if (this.sidebarWidth < this.minSidebarWidth) this.sidebarWidth = this.minSidebarWidth;\n      if (this.sidebarWidth > this.maxSidebarWidth) this.sidebarWidth = this.maxSidebarWidth;\n    },\n    \n    /**\n     * 停止拖拽\n     */\n    stopResize() {\n      document.removeEventListener('mousemove', this.doResize);\n      document.removeEventListener('mouseup', this.stopResize);\n      // 恢复正常的选择行为\n      document.body.style.userSelect = '';\n    },\n    \n    handlePanelStateChange(state) {\n      this.isPanelOpen = state;\n    },\n    \n    /**\n     * 处理数据集切换事件\n     */\n    async handleDatasetChanged(event) {\n      try {\n        console.log('HomeView: 接收到数据集切换事件', event);\n        \n        // 重新加载数据以适应新数据集\n        await this.loadInitialData();\n        \n        // 强制重新渲染图表组件\n        this.flag = this.flag === 'a' ? 'b' : 'a';\n        \n        console.log('HomeView: 数据集切换处理完成');\n      } catch (error) {\n        console.error('HomeView: 处理数据集切换失败:', error);\n      }\n    }\n  },\n  \n  // 确保组件销毁时清除事件监听\n  beforeDestroy() {\n    document.removeEventListener('mousemove', this.doResize);\n    document.removeEventListener('mouseup', this.stopResize);\n  },\n};\n</script>\n\n<style scoped>\n.home {\n  display: flex;\n  height: 100vh;\n}\n\n/* 侧边栏样式 */\n.sidebar {\n  /* width: 35%; 替换为动态宽度 */\n  height: 100vh;\n  display: flex;\n  position: relative;\n}\n\n/* 拖拽手柄样式 */\n.resize-handle {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 6px;\n  height: 100%;\n  cursor: ew-resize;\n  background-color: transparent;\n  transition: background-color 0.2s;\n  z-index: 10;\n}\n\n.resize-handle:hover, .resize-handle:active {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n\n/* 禁用状态下的手柄样式 */\n.resize-handle.disabled {\n  cursor: default;\n  pointer-events: none;\n  background-color: transparent;\n}\n\n.sidebar-tabs {\n  width: 10%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  border-right: 1px solid #eee;\n}\n\n.tab-buttons {\n  width: 100%;\n}\n\n.tab-button {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 10px 0;\n}\n\n.tab-button ::v-deep .v-icon {\n  margin: 0 auto;\n}\n\n.sidebar-actions {\n  display: flex;\n  flex-direction: column;\n  padding-bottom: 10px;\n  align-items: center;\n}\n\n.action-icon {\n  cursor: pointer;\n  padding: 5px;\n  border-radius: 50%;\n  margin-bottom: 5px;\n}\n\n.action-icon:hover {\n  background-color: #f5f5f5;\n}\n\n.action-divider {\n  width: 70%;\n  margin: 5px 0;\n}\n\n.sidebar-content {\n  width: 94%;\n}\n\n.full-height {\n  height: 100vh;\n}\n\n/* 可视化区域样式 */\n.visualization-area {\n  flex: 1;\n}\n\n/* 网格布局样式 */\n.grid-2 {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 10px;\n  width: 100%;\n  height: 100vh;\n}\n\n.grid-3 {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 10px;\n  width: 100%;\n  height: 100vh;\n}\n\n.grid-4 {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  grid-gap: 10px;\n  width: 100%;\n  height: 100vh;\n}\n\n.grid-item {\n  position: relative;\n  min-height: 0;\n  overflow: hidden;\n}\n\n/* 修复tab图标对齐问题 */\n::v-deep .v-tabs-bar {\n  height: 100vh !important;\n}\n\n::v-deep .v-tabs-bar__content {\n  height: auto !important;\n  justify-content: space-between;\n  height: 100% !important;\n}\n\n::v-deep .v-tab {\n  min-width: 100% !important;\n  padding: 0 !important;\n  justify-content: center !important;\n}\n\n::v-deep .v-tabs--vertical .v-tab {\n  justify-content: center !important;\n}\n\n::v-deep .v-icon {\n  height: auto !important;\n  width: auto !important;\n  font-size: 24px !important;\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./HomeView.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./HomeView.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./HomeView.vue?vue&type=template&id=d53030e6&scoped=true\"\nimport script from \"./HomeView.vue?vue&type=script&lang=js\"\nexport * from \"./HomeView.vue?vue&type=script&lang=js\"\nimport style0 from \"./HomeView.vue?vue&type=style&index=0&id=d53030e6&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"d53030e6\",\n  null\n  \n)\n\nexport default component.exports","// src/utils/indexedDB.js\n/**\n * IndexDB数据库操作工具\n * 用于存储和缓存大型数据\n */\n \nconst DB_NAME = 'cellVisDB';\nconst DB_VERSION = 2; // 🔥 升级到版本2以解决版本冲突问题\nconst STORE_NAME = 'dataCache';\n\n/**\n * 打开数据库连接\n * @returns {Promise<IDBDatabase>} 数据库实例\n */\nexport function openDB() {\n  return new Promise((resolve, reject) => {\n    // 🔥 首先尝试检查当前数据库版本，避免版本冲突\n    const checkRequest = window.indexedDB.open(DB_NAME);\n    \n    checkRequest.onsuccess = (event) => {\n      const existingDb = event.target.result;\n      const currentVersion = existingDb.version;\n      existingDb.close();\n      \n      // 使用当前版本或更高版本打开数据库\n      const targetVersion = Math.max(currentVersion, DB_VERSION);\n      console.log(`IndexedDB: 当前版本=${currentVersion}, 目标版本=${targetVersion}`);\n      \n      const request = window.indexedDB.open(DB_NAME, targetVersion);\n\n      // 当数据库首次创建或版本升级时触发\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        console.log(`IndexedDB: 升级数据库从版本 ${event.oldVersion} 到 ${event.newVersion}`);\n        \n        // 如果对象仓库不存在，则创建\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          console.log(`IndexedDB: 创建对象仓库 ${STORE_NAME}`);\n          db.createObjectStore(STORE_NAME, { autoIncrement: true });\n        }\n      };\n\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        console.log(`IndexedDB: 成功打开数据库，版本=${db.version}`);\n        resolve(db);\n      };\n\n      request.onerror = (event) => {\n        console.error('IndexedDB: 打开数据库失败:', event.target.error);\n        reject(event.target.error);\n      };\n    };\n    \n    checkRequest.onerror = (event) => {\n      // 如果检查失败，可能是数据库不存在，直接创建\n      console.log('IndexedDB: 数据库不存在，创建新数据库');\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          db.createObjectStore(STORE_NAME, { autoIncrement: true });\n        }\n      };\n\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        resolve(db);\n      };\n\n      request.onerror = (event) => {\n        console.error('IndexedDB: 创建数据库失败:', event.target.error);\n        reject(event.target.error);\n      };\n    };\n  });\n}\n\n/**\n * 存储数据到IndexDB\n * @param {string|number} key - 数据键名\n * @param {any} value - 要存储的数据\n * @returns {Promise<number>} 结果ID\n */\nexport function storeMapData(key, value) {\n  return openDB().then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      // 将value存储，同时手动指定key\n      const request = store.put(value, key);\n      \n      request.onsuccess = () => resolve(request.result);\n      \n      request.onerror = (event) => {\n        console.error('存储数据失败:', event.target.error);\n        reject(event.target.error);\n      };\n      \n      // 事务完成处理\n      transaction.oncomplete = () => {\n        console.log(`数据 ${key} 成功存储到IndexDB`);\n      };\n      \n      transaction.onerror = (event) => {\n        console.error('事务执行失败:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  });\n}\n\n/**\n * 从IndexDB获取数据\n * @param {string|number} key - 数据键名\n * @returns {Promise<any>} 查询结果\n */\nexport function getMapData(key) {\n  return openDB().then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(key);\n      \n      request.onsuccess = () => resolve(request.result);\n      \n      request.onerror = (event) => {\n        console.error('获取数据失败:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  });\n}\n\n/**\n * 从IndexDB删除数据\n * @param {string|number} key - 要删除的数据键名\n * @returns {Promise<void>}\n */\nexport function deleteMapData(key) {\n  return openDB().then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.delete(key);\n      \n      request.onsuccess = () => {\n        console.log(`数据 ${key} 成功从IndexDB删除`);\n        resolve();\n      };\n      \n      request.onerror = (event) => {\n        console.error('删除数据失败:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  });\n}\n\n/**\n * 清空数据库存储\n * @returns {Promise<void>}\n */\nexport function clearStore() {\n  return openDB().then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.clear();\n      \n      request.onsuccess = () => {\n        console.log('数据库存储已清空');\n        resolve();\n      };\n      \n      request.onerror = (event) => {\n        console.error('清空数据库失败:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  });\n}\n\n/**\n * 获取所有存储的键\n * @returns {Promise<Array>} 键数组\n */\nexport function getAllKeys() {\n  return openDB().then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.getAllKeys();\n      \n      request.onsuccess = () => resolve(request.result);\n      \n      request.onerror = (event) => {\n        console.error('获取键列表失败:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  });\n}\n\n/**\n * 完全删除IndexedDB数据库（用于解决版本冲突问题）\n * @returns {Promise<void>}\n */\nexport function deleteDatabase() {\n  return new Promise((resolve, reject) => {\n    console.log('IndexedDB: 开始删除数据库以解决版本冲突...');\n    \n    const deleteRequest = window.indexedDB.deleteDatabase(DB_NAME);\n    \n    deleteRequest.onsuccess = () => {\n      console.log('IndexedDB: 数据库删除成功');\n      resolve();\n    };\n    \n    deleteRequest.onerror = (event) => {\n      console.error('IndexedDB: 数据库删除失败:', event.target.error);\n      reject(event.target.error);\n    };\n    \n    deleteRequest.onblocked = () => {\n      console.warn('IndexedDB: 数据库删除被阻止，可能有其他连接未关闭');\n      // 等待一段时间后重试\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    };\n  });\n}\n\n/**\n * 重置IndexedDB（删除并重新创建）\n * @returns {Promise<void>}\n */\nexport async function resetDatabase() {\n  try {\n    await deleteDatabase();\n    // 删除后重新打开数据库，这将创建新的数据库\n    const db = await openDB();\n    db.close();\n    console.log('IndexedDB: 数据库重置完成');\n  } catch (error) {\n    console.error('IndexedDB: 重置数据库失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 清理特定数据集的缓存数据\n * @param {string} datasetName - 数据集名称\n * @returns {Promise<void>}\n */\nexport async function clearDatasetCache(datasetName) {\n  try {\n    console.log(`IndexedDB: 开始清理数据集 ${datasetName} 的缓存...`);\n    \n    const db = await openDB();\n    const transaction = db.transaction(STORE_NAME, 'readwrite');\n    const store = transaction.objectStore(STORE_NAME);\n    \n    // 获取所有键\n    const allKeys = await new Promise((resolve, reject) => {\n      const request = store.getAllKeys();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n    \n    // 过滤出属于指定数据集的键\n    const datasetKeys = allKeys.filter(key => \n      typeof key === 'string' && key.startsWith(`${datasetName}_`)\n    );\n    \n    console.log(`IndexedDB: 找到 ${datasetKeys.length} 个需要清理的缓存项`);\n    \n    // 删除这些键对应的数据\n    const deletePromises = datasetKeys.map(key => \n      new Promise((resolve, reject) => {\n        const deleteRequest = store.delete(key);\n        deleteRequest.onsuccess = () => resolve();\n        deleteRequest.onerror = () => reject(deleteRequest.error);\n      })\n    );\n    \n    await Promise.all(deletePromises);\n    \n    // 等待事务完成\n    await new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve();\n      transaction.onerror = () => reject(transaction.error);\n    });\n    \n    db.close();\n    console.log(`IndexedDB: 数据集 ${datasetName} 的缓存清理完成`);\n    \n  } catch (error) {\n    console.error(`IndexedDB: 清理数据集缓存失败 (${datasetName}):`, error);\n    throw error;\n  }\n}\n","/**\n * 数据加载工具\n * 实现数据分块加载，提高大数据集加载性能\n */\nimport { storeMapData, getMapData, resetDatabase } from './indexDB';\nimport { getDataSource, DataSourceType } from '@/api';\nimport { perfTracker, perfWatcher } from './performance';\nimport { buildDatasetPath, getDataset, createDedupedRequest } from '../api/config';\n\n/**\n * 生成数据集特定的缓存键\n * @param {string} baseKey - 基础缓存键\n * @returns {string} - 包含数据集信息的缓存键\n */\nfunction createDatasetCacheKey(baseKey) {\n  const currentDataset = getDataset();\n  if (!currentDataset) {\n    console.warn('无法获取当前数据集，使用默认缓存键');\n    return baseKey;\n  }\n  return `${currentDataset}_${baseKey}`;\n}\n\n/**\n * 检查数据是否已缓存\n * @param {string} key - 缓存键名\n * @returns {Promise<Object|null>} - 缓存数据或null\n */\nexport async function checkCache(key) {\n  try {\n    const data = await getMapData(key);\n    return data || null;\n  } catch (error) {\n    console.error('检查缓存失败:', error);\n    return null;\n  }\n}\n\n/**\n * 缓存数据到IndexedDB\n * @param {string} key - 缓存键名\n * @param {Object} data - 要缓存的数据\n * @returns {Promise<boolean>} - 是否缓存成功\n */\nexport async function cacheData(key, data) {\n  try {\n    await storeMapData(key, data);\n    return true;\n  } catch (error) {\n    console.error('缓存数据失败:', error);\n    return false;\n  }\n}\n\n/**\n * 加载二进制文件并解析为Float32Array\n * @param {string} url - 二进制文件URL\n * @param {string} [cacheKey=null] - 缓存键名，为null则不缓存\n * @returns {Promise<Float32Array>} - 解析后的浮点数数组\n */\nexport async function loadBinaryFile(url, cacheKey = null) {\n  // 先检查缓存\n  if (cacheKey) {\n    const cachedData = await checkCache(cacheKey);\n    if (cachedData) {\n      console.log(`使用缓存数据: ${cacheKey}`);\n      return new Float32Array(cachedData);\n    }\n  }\n  \n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`加载二进制文件失败: ${response.status} ${response.statusText}`);\n    }\n    \n    const arrayBuffer = await response.arrayBuffer();\n    const data = new Float32Array(arrayBuffer);\n    \n    // 缓存数据（如果需要）\n    if (cacheKey) {\n      // 将TypedArray转换为普通数组以便存储\n      const dataArray = Array.from(data);\n      await cacheData(cacheKey, dataArray);\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`加载二进制文件失败: ${url}`, error);\n    return new Float32Array(0);\n  }\n}\n\n/**\n * 加载坐标数据（二进制格式）\n * @param {string} blockPath - 数据块路径\n * @returns {Promise<{points: Float32Array, count: number}>} - 坐标数据和点数\n */\nexport async function loadCoordinatesBin(blockPath) {\n  const baseCacheKey = `coords_${blockPath.split('/').pop()}`;\n  const cacheKey = createDatasetCacheKey(baseCacheKey);\n  \n  try {\n    perfTracker.startMark(`loadCoords:${blockPath}`);\n    \n    const data = await loadBinaryFile(blockPath, cacheKey);\n    \n    // 验证数据是否有效\n    if (data.length === 0 || data.length % 2 !== 0) {\n      throw new Error(`坐标数据格式无效: ${blockPath}`);\n    }\n    \n    const count = data.length / 2; // 每个点有X,Y两个坐标\n    \n    const duration = perfTracker.endMark(`loadCoords:${blockPath}`);\n    perfWatcher.checkLoadTime(duration);\n    \n    return { points: data, count };\n  } catch (error) {\n    console.error(`加载坐标数据失败: ${blockPath}`, error);\n    return { points: new Float32Array(0), count: 0 };\n  }\n}\n\n/**\n * 加载细胞属性数据（二进制格式）\n * @param {string} attrPath - 属性数据路径\n * @returns {Promise<Float32Array>} - 属性数据\n */\nexport async function loadCellAttributeBin(attrPath) {\n  const baseCacheKey = `attr_${attrPath.split('/').pop()}`;\n  const cacheKey = createDatasetCacheKey(baseCacheKey);\n  const dataset = getDataset();\n  const requestKey = `cell_attr_bin_${dataset}_${attrPath.split('/').pop()}`;\n  \n  return createDedupedRequest(requestKey, async () => {\n    try {\n      perfTracker.startMark(`loadAttr:${attrPath}`);\n      \n      const data = await loadBinaryFile(attrPath, cacheKey);\n      \n      const duration = perfTracker.endMark(`loadAttr:${attrPath}`);\n      perfWatcher.checkLoadTime(duration);\n      \n      return data;\n    } catch (error) {\n      console.error(`加载细胞属性数据失败: ${attrPath}`, error);\n      return new Float32Array(0);\n    }\n  });\n}\n\n/**\n * 分块加载数据\n * @param {string} url - 数据URL\n * @param {number} offset - 起始字节位置\n * @param {number} chunkSize - 块大小（字节）\n * @returns {Promise<Object>} - 加载的数据块\n */\nexport async function fetchDataChunk(url, offset, chunkSize) {\n  try {\n    // 根据数据源类型决定如何获取数据\n    const dataSource = getDataSource();\n    let response;\n    \n    if (dataSource === DataSourceType.LOCAL) {\n      // 本地文件加载，使用Range头\n      response = await fetch(url, {\n        headers: { Range: `bytes=${offset}-${offset + chunkSize - 1}` }\n      });\n    } else {\n      // 从API获取，传递分块参数\n      const apiUrl = url.replace(/^\\//, '/api/');\n      response = await fetch(`${apiUrl}?offset=${offset}&size=${chunkSize}`);\n    }\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const text = await response.text();\n    \n    // 处理不完整的JSON字符串\n    let jsonText = text;\n    const lastBrace = text.lastIndexOf('}');\n    const lastBracket = text.lastIndexOf(']');\n    \n    // 找到最后一个完整的JSON对象或数组\n    const lastComplete = Math.max(lastBrace, lastBracket);\n    if (lastComplete > 0) {\n      jsonText = text.substring(0, lastComplete + 1);\n    }\n    \n    try {\n      // 尝试解析JSON，如果是片段则包装为数组\n      return JSON.parse(`[${jsonText}]`);\n    } catch (parseError) {\n      console.error('JSON解析错误，可能是数据片段不完整:', parseError);\n      return [];\n    }\n  } catch (error) {\n    console.error('获取数据块失败:', error);\n    return [];\n  }\n}\n\n/**\n * 加载分块数据并合并\n * @param {string} url - 数据URL\n * @param {number} [chunkSize=1000000] - 块大小（字节）\n * @param {string} [cacheKey=null] - 缓存键名，为null则不缓存\n * @returns {Promise<Object>} - 合并后的完整数据\n */\nexport async function loadChunkedData(url, chunkSize = 1000000, cacheKey = null) {\n  if (cacheKey) {\n    const cachedData = await checkCache(cacheKey);\n    if (cachedData) {\n      console.log(`使用缓存数据: ${cacheKey}`);\n      return cachedData;\n    }\n  }\n  \n  let allData = [];\n  let offset = 0;\n  let hasMore = true;\n  let attempts = 0;\n  const MAX_ATTEMPTS = 5;\n  \n  while (hasMore && attempts < MAX_ATTEMPTS) {\n    try {\n      const chunk = await fetchDataChunk(url, offset, chunkSize);\n      \n      if (chunk.length === 0) {\n        hasMore = false;\n      } else {\n        allData = [...allData, ...chunk];\n        offset += chunkSize;\n      }\n      \n      attempts = 0; // 重置尝试次数\n    } catch (error) {\n      attempts++;\n      console.error(`加载数据块失败，重试 ${attempts}/${MAX_ATTEMPTS}:`, error);\n      \n      if (attempts >= MAX_ATTEMPTS) {\n        console.error('达到最大重试次数，停止加载');\n        hasMore = false;\n      }\n      \n      // 等待后重试\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  }\n  \n  // 如果需要，缓存合并后的数据\n  if (cacheKey && allData.length > 0) {\n    await cacheData(cacheKey, allData);\n  }\n  \n  return allData;\n}\n\n/**\n * 加载特定基因表达数据\n * @param {string} geneName - 基因名称\n * @returns {Promise<Object>} - 基因表达数据\n */\nexport async function loadGeneExpression(geneName) {\n  const baseCacheKey = `gene_${geneName}`;\n  const cacheKey = createDatasetCacheKey(baseCacheKey);\n  const cachedData = await checkCache(cacheKey);\n  \n  if (cachedData) {\n    return cachedData;\n  }\n  \n  try {\n    let response;\n    const dataSource = getDataSource();\n    \n    if (dataSource === DataSourceType.LOCAL) {\n      response = await fetch(`/gene_expressions/${geneName}.json`);\n    } else {\n      response = await fetch(`/api/single-cell/gene-expression/${geneName}`);\n    }\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // 缓存数据\n    await cacheData(cacheKey, data);\n    \n    return data;\n  } catch (error) {\n    console.error(`加载基因${geneName}表达数据失败:`, error);\n    return null;\n  }\n}\n\n/**\n * 使用WebWorker处理大型数据集\n * @param {Array} data - 要处理的数据\n * @param {string} operationType - 处理类型\n * @returns {Promise<Object>} - 处理结果\n */\nexport function processDataInWorker(data, operationType) {\n  return new Promise((resolve, reject) => {\n    // 创建Blob对象，包含Worker代码\n    const workerCode = `\n      self.onmessage = function(e) {\n        const { data, operationType } = e.data;\n        \n        let result;\n        switch (operationType) {\n          case 'buildQuadTree':\n            result = buildQuadTree(data);\n            break;\n          case 'calculateStatistics':\n            result = calculateStatistics(data);\n            break;\n          default:\n            self.postMessage({ error: '未知操作类型' });\n            return;\n        }\n        \n        self.postMessage({ result });\n      };\n      \n      // 四叉树构建函数\n      function buildQuadTree(data) {\n        // 实际的四叉树构建逻辑\n        return { message: '四叉树构建完成' };\n      }\n      \n      // 计算统计数据函数\n      function calculateStatistics(data) {\n        // 计算统计数据\n        return { message: '统计计算完成' };\n      }\n    `;\n    \n    const blob = new Blob([workerCode], { type: 'application/javascript' });\n    const worker = new Worker(URL.createObjectURL(blob));\n    \n    worker.onmessage = function(e) {\n      if (e.data.error) {\n        reject(new Error(e.data.error));\n      } else {\n        resolve(e.data.result);\n      }\n      worker.terminate();\n    };\n    \n    worker.onerror = function(error) {\n      reject(error);\n      worker.terminate();\n    };\n    \n    worker.postMessage({ data, operationType });\n  });\n}\n\n// 数据加载器 - 负责处理异步数据加载和错误处理\n\n/**\n * 数据加载管理器类\n */\nexport class DataLoader {\n  constructor() {\n    this.maxRetries = 3;\n    this.retryDelay = 500; // 基础重试延迟（毫秒）\n    this.abortController = null;\n    this.loadStatus = {\n      inProgress: false,\n      loaded: 0,\n      total: 0,\n      errors: []\n    };\n  }\n\n  /**\n   * 加载四叉树结构\n   * @param {string} path - 四叉树数据路径\n   * @returns {Promise<Object>} - 四叉树数据\n   */\n  async loadQuadTree(path) {\n    const dataset = getDataset();\n    const requestKey = `quadtree_${dataset}`;\n    \n    return createDedupedRequest(requestKey, async () => {\n      perfTracker.startMark('loadQuadTree');\n      \n      try {\n        const response = await this.fetchWithRetry(path);\n        if (!response.ok) {\n          throw new Error(`加载四叉树失败: ${response.status} ${response.statusText}`);\n        }\n        \n        const data = await response.json();\n        \n        const duration = perfTracker.endMark('loadQuadTree');\n        perfWatcher.checkLoadTime(duration);\n        \n        return data;\n      } catch (error) {\n        this.handleError('加载四叉树失败', error);\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * 加载数据块\n   * @param {string} blockPath - 数据块路径\n   * @returns {Promise<Array>} - 数据块内容\n   */\n  async loadDataBlock(blockPath) {\n    perfTracker.startMark(`loadBlock:${blockPath}`);\n    \n    try {\n      const response = await this.fetchWithRetry(blockPath);\n      if (!response.ok) {\n        throw new Error(`加载数据块失败: ${response.status} ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      const duration = perfTracker.endMark(`loadBlock:${blockPath}`);\n      perfWatcher.checkLoadTime(duration);\n      \n      return data;\n    } catch (error) {\n      this.handleError(`加载数据块失败: ${blockPath}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 加载坐标数据块\n   * @param {string} blockId - 数据块ID\n   * @returns {Promise<{points: Float32Array, count: number}>} - 坐标数据和点数量\n   */\n  async loadCoordinateBlock(blockId) {\n    try {\n      // 首先尝试从IndexedDB缓存获取 - 使用数据集特定的缓存键\n      const baseCacheKey = blockId;\n      const cacheKey = createDatasetCacheKey(baseCacheKey);\n      let data = await getMapData(cacheKey);\n      \n      // 如果缓存中没有数据或数据为空，则直接从文件加载\n      if (!data || data.length === 0) {\n        console.log(`节点 ${blockId} 未从缓存中获取到数据，尝试从文件加载`);\n        \n        // 构建文件路径\n        const blockPath = buildDatasetPath(`blocks/${blockId}.bin`);\n        \n        try {\n          // 直接从文件加载\n          const { points, count } = await loadCoordinatesBin(blockPath);\n          \n          if (count > 0) {\n            // 将数据转换为普通点坐标数组\n            data = [];\n            for (let i = 0; i < points.length; i += 2) {\n              data.push([points[i], points[i + 1]]);\n            }\n            \n            // 将新加载的数据存储到缓存\n            await storeMapData(cacheKey, data);\n            console.log(`节点 ${blockId} 数据已重新加载并缓存，共 ${count} 个点`);\n          } else {\n            console.warn(`节点 ${blockId} 文件加载失败或为空`);\n            return { points: new Float32Array(0), count: 0 };\n          }\n        } catch (fileError) {\n          console.error(`从文件加载节点 ${blockId} 失败:`, fileError);\n          return { points: new Float32Array(0), count: 0 };\n        }\n      }\n      \n      // 将数据转换为Float32Array\n      const flatArray = new Float32Array(data.flat());\n      const count = data.length;\n      \n      return { points: flatArray, count };\n    } catch (error) {\n      // 🔥 处理IndexedDB版本冲突错误\n      if (error.name === 'VersionError') {\n        console.warn(`IndexedDB版本冲突，重置数据库后重试加载节点 ${blockId}`);\n        try {\n          await resetDatabase();\n          // 重置后递归重试一次\n          return await this.loadCoordinateBlock(blockId);\n        } catch (resetError) {\n          console.error('重置IndexedDB失败:', resetError);\n        }\n      }\n      \n      console.error(`加载节点 ${blockId} 数据失败:`, error);\n      \n      // 作为最后的备选方案，直接从文件加载而不使用缓存\n      try {\n        console.log(`作为备选方案，直接从文件加载节点 ${blockId}`);\n        const blockPath = buildDatasetPath(`blocks/${blockId}.bin`);\n        const { points, count } = await loadCoordinatesBin(blockPath);\n        \n        if (count > 0) {\n          const data = [];\n          for (let i = 0; i < points.length; i += 2) {\n            data.push([points[i], points[i + 1]]);\n          }\n          const flatArray = new Float32Array(data.flat());\n          return { points: flatArray, count: data.length };\n        }\n      } catch (fallbackError) {\n        console.error(`备选方案也失败:`, fallbackError);\n      }\n      \n      return { points: new Float32Array(0), count: 0 };\n    }\n  }\n\n  /**\n   * 加载细胞属性数据（二进制格式）\n   * @param {string} fieldName - 字段名称\n   * @param {Function} progressCallback - 可选进度回调函数\n   * @returns {Promise<Float32Array>} - 属性数据\n   */\n  async loadCellAttribute(fieldName, progressCallback = null) {\n    const dataset = getDataset();\n    const requestKey = `cell_attr_${dataset}_${fieldName}`;\n    \n    return createDedupedRequest(requestKey, async () => {\n      try {\n        const attrPath = buildDatasetPath(`cell_types/${fieldName}.bin`);\n        \n        // 记录加载状态\n        this.loadStatus.inProgress = true;\n        this.loadStatus.field = fieldName;\n        \n        console.log(`从路径加载属性数据: ${attrPath} (去重键: ${requestKey})`);\n        \n        // 创建新的abort控制器\n        this.abortController = new AbortController();\n        \n        // 带进度指示器的加载\n        const response = await this.fetchWithRetry(attrPath, {\n          signal: this.abortController.signal,\n          // 添加随机参数避免缓存\n          cache: 'no-store',\n          headers: {\n            'Cache-Control': 'no-cache, no-store, must-revalidate',\n            'Pragma': 'no-cache'\n          }\n        });\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        // 获取总大小\n        const contentLength = response.headers.get('Content-Length');\n        const total = contentLength ? parseInt(contentLength, 10) : 0;\n        \n        // 创建响应读取器和接收缓冲区\n        const reader = response.body.getReader();\n        const chunks = [];\n        let received = 0;\n        \n        // 读取数据流\n        while (true) {\n          const { done, value } = await reader.read();\n          \n          if (done) {\n            break;\n          }\n          \n          chunks.push(value);\n          received += value.length;\n          \n          // 报告进度\n          if (progressCallback && total > 0) {\n            progressCallback(Math.min(received / total, 0.99)); // 最多到99%，留1%给处理部分\n          }\n        }\n        \n        // 合并chunks到一个ArrayBuffer\n        const dataArray = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks) {\n          dataArray.set(chunk, position);\n          position += chunk.length;\n        }\n        \n        // 将Uint8Array转换为Float32Array\n        const dataBuffer = dataArray.buffer;\n        const floatArray = new Float32Array(dataBuffer);\n        \n        console.log(`属性 ${fieldName} 加载完成，数据长度: ${floatArray.length}`);\n        \n        // 更新缓存 - 使用数据集特定的缓存键\n        const baseCacheKey = `attr_${fieldName}`;\n        const cacheKey = createDatasetCacheKey(baseCacheKey);\n        await cacheData(cacheKey, Array.from(floatArray));\n        \n        // 完成进度报告\n        if (progressCallback) {\n          progressCallback(1.0);\n        }\n        \n        this.loadStatus.inProgress = false;\n        return floatArray;\n      } catch (error) {\n        this.loadStatus.inProgress = false;\n        \n        if (error.name === 'AbortError') {\n          console.log(`加载属性 ${fieldName} 已取消`);\n          return new Float32Array(0);\n        }\n        \n        this.handleError(`加载属性 ${fieldName} 失败`, error);\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * 加载所有细胞属性数据\n   * @param {Array<string>} fields - 字段名称数组\n   * @param {Function} progressCallback - 进度回调函数\n   * @returns {Promise<Map<string, Float32Array>>} - 属性数据映射\n   */\n  async loadAllCellAttributes(fields, progressCallback) {\n    this.loadStatus.inProgress = true;\n    this.loadStatus.loaded = 0;\n    this.loadStatus.total = fields.length;\n    this.loadStatus.errors = [];\n    \n    const attributesMap = new Map();\n    \n    try {\n      // 使用Promise.allSettled处理部分失败情况\n      const results = await Promise.allSettled(\n        fields.map(async (field, index) => {\n          try {\n            const data = await this.loadCellAttribute(field);\n            attributesMap.set(field, data);\n            \n            this.loadStatus.loaded++;\n            if (progressCallback) {\n              progressCallback({\n                loaded: this.loadStatus.loaded,\n                total: this.loadStatus.total,\n                progress: this.loadStatus.loaded / this.loadStatus.total,\n                field\n              });\n            }\n            \n            return { field, success: true };\n          } catch (error) {\n            this.loadStatus.errors.push({ field, error: error.message });\n            return { field, success: false, error: error.message };\n          }\n        })\n      );\n      \n      // 处理失败的结果\n      const failures = results.filter(result => result.status === 'rejected' || \n                                      (result.status === 'fulfilled' && !result.value.success));\n      \n      if (failures.length > 0) {\n        console.warn(`${failures.length}个细胞属性数据加载失败`);\n      }\n      \n      return attributesMap;\n    } catch (error) {\n      this.handleError('加载细胞属性数据失败', error);\n      throw error;\n    } finally {\n      this.loadStatus.inProgress = false;\n    }\n  }\n\n  /**\n   * 取消正在进行的数据加载\n   */\n  cancelLoading() {\n    if (this.abortController) {\n      this.abortController.abort();\n      this.loadStatus.inProgress = false;\n      console.log('数据加载已取消');\n    }\n  }\n\n  /**\n   * 获取当前加载状态\n   * @returns {Object} - 加载状态对象\n   */\n  getLoadStatus() {\n    return { ...this.loadStatus };\n  }\n\n  /**\n   * 带重试的fetch请求\n   * @param {string} url - 请求URL\n   * @param {Object} options - fetch选项\n   * @returns {Promise<Response>} - fetch响应\n   */\n  async fetchWithRetry(url, options = {}) {\n    let lastError;\n    \n    for (let attempt = 0; attempt <= this.maxRetries; attempt++) {\n      try {\n        if (this.abortController) {\n          options.signal = this.abortController.signal;\n        }\n        \n        return await fetch(url, options);\n      } catch (error) {\n        lastError = error;\n        \n        // 如果是abort错误或已达到最大重试次数，则直接抛出错误\n        if (error.name === 'AbortError' || attempt === this.maxRetries) {\n          throw error;\n        }\n        \n        // 否则等待一段时间后重试\n        const delay = this.retryDelay * Math.pow(2, attempt);\n        console.warn(`请求失败，${delay}ms后重试(${attempt + 1}/${this.maxRetries}): ${url}`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError;\n  }\n\n  /**\n   * 统一处理错误\n   * @param {string} context - 错误上下文\n   * @param {Error} error - 错误对象\n   */\n  handleError(context, error) {\n    if (error.name === 'AbortError') {\n      console.log(`${context}: 操作已取消`);\n      return;\n    }\n    \n    console.error(`${context}:`, error);\n    \n    // 记录到加载状态\n    this.loadStatus.errors.push({\n      context,\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n}\n\n// 导出单例实例供全局使用\nexport const dataLoader = new DataLoader(); ","// Compatability layer to make regl work with webgl2.\n// See https://github.com/regl-project/regl/issues/561\nvar GL_DEPTH_COMPONENT = 0x1902\nvar GL_DEPTH_STENCIL = 0x84F9\nvar HALF_FLOAT_OES = 0x8D61\n\n// webgl1 extensions natively supported by webgl2\nvar gl2Extensions = {\n  'WEBGL_depth_texture': {\n    'UNSIGNED_INT_24_8_WEBGL': 0x84FA\n  },\n  'OES_element_index_uint': {},\n  'OES_texture_float': {},\n  // 'OES_texture_float_linear': {},\n  'OES_texture_half_float': {\n    'HALF_FLOAT_OES': HALF_FLOAT_OES\n  },\n  // 'OES_texture_half_float_linear': {},\n  'EXT_color_buffer_float': {},\n  'OES_standard_derivatives': {},\n  'EXT_frag_depth': {},\n  'EXT_blend_minmax': {\n    'MIN_EXT': 0x8007,\n    'MAX_EXT': 0x8008\n  },\n  'EXT_shader_texture_lod': {}\n}\n\nvar extensions = {};\nmodule.exports = {\n  overrideContextType: function (callback) {\n    const webgl2 = this;\n    // Monkey-patch context creation to override the context type.\n    const origGetContext = HTMLCanvasElement.prototype.getContext\n    HTMLCanvasElement.prototype.getContext = function (ignoredContextType, contextAttributes) {\n      return webgl2.wrapGLContext(origGetContext.bind(this)(\"webgl2\", contextAttributes), extensions);\n    };\n    // Execute the callback with overridden context type.\n    var rv = callback();\n\n    // Restore the original method.\n    HTMLCanvasElement.prototype.getContext = origGetContext;\n    return rv;\n  },\n\n  // webgl1 extensions natively supported by webgl2\n  // this is called when initializing regl context\n  wrapGLContext: function (gl, extensions) {\n    gl[this.versionProperty] = 2\n    for (var p in gl2Extensions) {\n      extensions[p.toLowerCase()] = gl2Extensions[p]\n    }\n\n    // to support float and half-float textures\n    gl.getExtension('EXT_color_buffer_float');\n\n    // Now override getExtension to return ours.\n    const origGetExtension = gl.getExtension;\n    gl.getExtension = function(n) {\n      return extensions[n.toLowerCase()] || origGetExtension.apply(gl, [n]);\n    }\n\n    // And texImage2D to convert the internalFormat to webgl2.\n    const webgl2 = this;\n    const origTexImage = gl.texImage2D;\n    gl.texImage2D = function(target, miplevel, iformat, a, typeFor6, c, d, typeFor9, f) {\n      if (arguments.length == 6) {\n        var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor6);\n        origTexImage.apply(gl, [target, miplevel, ifmt, a, webgl.getTextureType(gl, typeFor6), c]);\n      } else { // arguments.length == 9\n        var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor9);\n        origTexImage.apply(gl, [target, miplevel, ifmt, a, typeFor6, c, d, webgl2.getTextureType(gl, typeFor9), f]);\n      }\n    }\n\n    // mocks of draw buffers's functions\n    extensions['webgl_draw_buffers'] = {\n      drawBuffersWEBGL: function () {\n        return gl.drawBuffers.apply(gl, arguments)\n      }\n    }\n\n    // mocks of vao extension\n    extensions['oes_vertex_array_object'] = {\n      'VERTEX_ARRAY_BINDING_OES':   0x85B5,\n      'createVertexArrayOES': function () {\n        return gl.createVertexArray()\n      },\n      'deleteVertexArrayOES': function () {\n        return gl.deleteVertexArray.apply(gl, arguments)\n      },\n      'isVertexArrayOES': function () {\n        return gl.isVertexArray.apply(gl, arguments)\n      },\n      'bindVertexArrayOES': function () {\n        return gl.bindVertexArray.apply(gl, arguments)\n      }\n    }\n\n    // mocks of instancing extension\n    extensions['angle_instanced_arrays'] = {\n      'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE': 0x88FE,\n      'drawArraysInstancedANGLE': function () {\n        return gl.drawArraysInstanced.apply(gl, arguments)\n      },\n      'drawElementsInstancedANGLE': function () {\n        return gl.drawElementsInstanced.apply(gl, arguments)\n      },\n      'vertexAttribDivisorANGLE': function () {\n        return gl.vertexAttribDivisor.apply(gl, arguments)\n      }\n    }\n\n    return gl;\n  },\n\n  versionProperty: '___regl_gl_version___',\n\n  // texture internal format to update on the fly\n  getInternalFormat: function (gl, format, type) {\n    if (gl[this.versionProperty] !== 2) {\n      return format\n    }\n    // webgl2 texture formats\n    // reference:\n    // https://webgl2fundamentals.org/webgl/lessons/webgl-data-textures.html\n    if (format === GL_DEPTH_COMPONENT) {\n      return gl.DEPTH_COMPONENT24\n    } else if (format === GL_DEPTH_STENCIL) {\n      return gl.DEPTH24_STENCIL8\n    } else if (type === HALF_FLOAT_OES && format === gl.RGBA) {\n      return gl.RGBA16F;\n    } else if (type === HALF_FLOAT_OES && format === gl.RGB) {\n      return gl.RGB16F\n    } else if (type === gl.FLOAT && format === gl.RGBA) {\n      return gl.RGBA32F\n    } else if (type === gl.FLOAT && format === gl.RGB) {\n      return gl.RGB32F\n    }\n    return format\n  },\n\n  // texture type to update on the fly\n  getTextureType: function (gl, type) {\n    if (gl[this.versionProperty] !== 2) {\n      return type\n    }\n    if (type === HALF_FLOAT_OES) {\n      return gl.HALF_FLOAT\n    }\n    return type\n  },\n}","/*!\n * vue-virtual-scroll-list v2.3.4\n * open source under the MIT license\n * https://github.com/tangbc/vue-virtual-scroll-list#readme\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vue')) :\n  typeof define === 'function' && define.amd ? define(['vue'], factory) :\n  (global = global || self, global.VirtualList = factory(global.Vue));\n}(this, (function (Vue) { 'use strict';\n\n  Vue = Vue && Object.prototype.hasOwnProperty.call(Vue, 'default') ? Vue['default'] : Vue;\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      enumerableOnly && (symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n  }\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = null != arguments[i] ? arguments[i] : {};\n      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n    return target;\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n      writable: false\n    });\n    return Constructor;\n  }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  /**\n   * virtual list core calculating center\n   */\n\n  var DIRECTION_TYPE = {\n    FRONT: 'FRONT',\n    // scroll up or left\n    BEHIND: 'BEHIND' // scroll down or right\n  };\n\n  var CALC_TYPE = {\n    INIT: 'INIT',\n    FIXED: 'FIXED',\n    DYNAMIC: 'DYNAMIC'\n  };\n  var LEADING_BUFFER = 0;\n  var Virtual = /*#__PURE__*/function () {\n    function Virtual(param, callUpdate) {\n      _classCallCheck(this, Virtual);\n      this.init(param, callUpdate);\n    }\n    _createClass(Virtual, [{\n      key: \"init\",\n      value: function init(param, callUpdate) {\n        // param data\n        this.param = param;\n        this.callUpdate = callUpdate;\n\n        // size data\n        this.sizes = new Map();\n        this.firstRangeTotalSize = 0;\n        this.firstRangeAverageSize = 0;\n        this.fixedSizeValue = 0;\n        this.calcType = CALC_TYPE.INIT;\n\n        // scroll data\n        this.offset = 0;\n        this.direction = '';\n\n        // range data\n        this.range = Object.create(null);\n        if (param) {\n          this.checkRange(0, param.keeps - 1);\n        }\n\n        // benchmark test data\n        // this.__bsearchCalls = 0\n        // this.__getIndexOffsetCalls = 0\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this.init(null, null);\n      }\n\n      // return current render range\n    }, {\n      key: \"getRange\",\n      value: function getRange() {\n        var range = Object.create(null);\n        range.start = this.range.start;\n        range.end = this.range.end;\n        range.padFront = this.range.padFront;\n        range.padBehind = this.range.padBehind;\n        return range;\n      }\n    }, {\n      key: \"isBehind\",\n      value: function isBehind() {\n        return this.direction === DIRECTION_TYPE.BEHIND;\n      }\n    }, {\n      key: \"isFront\",\n      value: function isFront() {\n        return this.direction === DIRECTION_TYPE.FRONT;\n      }\n\n      // return start index offset\n    }, {\n      key: \"getOffset\",\n      value: function getOffset(start) {\n        return (start < 1 ? 0 : this.getIndexOffset(start)) + this.param.slotHeaderSize;\n      }\n    }, {\n      key: \"updateParam\",\n      value: function updateParam(key, value) {\n        var _this = this;\n        if (this.param && key in this.param) {\n          // if uniqueIds change, find out deleted id and remove from size map\n          if (key === 'uniqueIds') {\n            this.sizes.forEach(function (v, key) {\n              if (!value.includes(key)) {\n                _this.sizes[\"delete\"](key);\n              }\n            });\n          }\n          this.param[key] = value;\n        }\n      }\n\n      // save each size map by id\n    }, {\n      key: \"saveSize\",\n      value: function saveSize(id, size) {\n        this.sizes.set(id, size);\n\n        // we assume size type is fixed at the beginning and remember first size value\n        // if there is no size value different from this at next comming saving\n        // we think it's a fixed size list, otherwise is dynamic size list\n        if (this.calcType === CALC_TYPE.INIT) {\n          this.fixedSizeValue = size;\n          this.calcType = CALC_TYPE.FIXED;\n        } else if (this.calcType === CALC_TYPE.FIXED && this.fixedSizeValue !== size) {\n          this.calcType = CALC_TYPE.DYNAMIC;\n          // it's no use at all\n          delete this.fixedSizeValue;\n        }\n\n        // calculate the average size only in the first range\n        if (this.calcType !== CALC_TYPE.FIXED && typeof this.firstRangeTotalSize !== 'undefined') {\n          if (this.sizes.size < Math.min(this.param.keeps, this.param.uniqueIds.length)) {\n            this.firstRangeTotalSize = _toConsumableArray(this.sizes.values()).reduce(function (acc, val) {\n              return acc + val;\n            }, 0);\n            this.firstRangeAverageSize = Math.round(this.firstRangeTotalSize / this.sizes.size);\n          } else {\n            // it's done using\n            delete this.firstRangeTotalSize;\n          }\n        }\n      }\n\n      // in some special situation (e.g. length change) we need to update in a row\n      // try goiong to render next range by a leading buffer according to current direction\n    }, {\n      key: \"handleDataSourcesChange\",\n      value: function handleDataSourcesChange() {\n        var start = this.range.start;\n        if (this.isFront()) {\n          start = start - LEADING_BUFFER;\n        } else if (this.isBehind()) {\n          start = start + LEADING_BUFFER;\n        }\n        start = Math.max(start, 0);\n        this.updateRange(this.range.start, this.getEndByStart(start));\n      }\n\n      // when slot size change, we also need force update\n    }, {\n      key: \"handleSlotSizeChange\",\n      value: function handleSlotSizeChange() {\n        this.handleDataSourcesChange();\n      }\n\n      // calculating range on scroll\n    }, {\n      key: \"handleScroll\",\n      value: function handleScroll(offset) {\n        this.direction = offset < this.offset || offset === 0 ? DIRECTION_TYPE.FRONT : DIRECTION_TYPE.BEHIND;\n        this.offset = offset;\n        if (!this.param) {\n          return;\n        }\n        if (this.direction === DIRECTION_TYPE.FRONT) {\n          this.handleFront();\n        } else if (this.direction === DIRECTION_TYPE.BEHIND) {\n          this.handleBehind();\n        }\n      }\n\n      // ----------- public method end -----------\n    }, {\n      key: \"handleFront\",\n      value: function handleFront() {\n        var overs = this.getScrollOvers();\n        // should not change range if start doesn't exceed overs\n        if (overs > this.range.start) {\n          return;\n        }\n\n        // move up start by a buffer length, and make sure its safety\n        var start = Math.max(overs - this.param.buffer, 0);\n        this.checkRange(start, this.getEndByStart(start));\n      }\n    }, {\n      key: \"handleBehind\",\n      value: function handleBehind() {\n        var overs = this.getScrollOvers();\n        // range should not change if scroll overs within buffer\n        if (overs < this.range.start + this.param.buffer) {\n          return;\n        }\n        this.checkRange(overs, this.getEndByStart(overs));\n      }\n\n      // return the pass overs according to current scroll offset\n    }, {\n      key: \"getScrollOvers\",\n      value: function getScrollOvers() {\n        // if slot header exist, we need subtract its size\n        var offset = this.offset - this.param.slotHeaderSize;\n        if (offset <= 0) {\n          return 0;\n        }\n\n        // if is fixed type, that can be easily\n        if (this.isFixedType()) {\n          return Math.floor(offset / this.fixedSizeValue);\n        }\n        var low = 0;\n        var middle = 0;\n        var middleOffset = 0;\n        var high = this.param.uniqueIds.length;\n        while (low <= high) {\n          // this.__bsearchCalls++\n          middle = low + Math.floor((high - low) / 2);\n          middleOffset = this.getIndexOffset(middle);\n          if (middleOffset === offset) {\n            return middle;\n          } else if (middleOffset < offset) {\n            low = middle + 1;\n          } else if (middleOffset > offset) {\n            high = middle - 1;\n          }\n        }\n        return low > 0 ? --low : 0;\n      }\n\n      // return a scroll offset from given index, can efficiency be improved more here?\n      // although the call frequency is very high, its only a superposition of numbers\n    }, {\n      key: \"getIndexOffset\",\n      value: function getIndexOffset(givenIndex) {\n        if (!givenIndex) {\n          return 0;\n        }\n        var offset = 0;\n        var indexSize = 0;\n        for (var index = 0; index < givenIndex; index++) {\n          // this.__getIndexOffsetCalls++\n          indexSize = this.sizes.get(this.param.uniqueIds[index]);\n          offset = offset + (typeof indexSize === 'number' ? indexSize : this.getEstimateSize());\n        }\n        return offset;\n      }\n\n      // is fixed size type\n    }, {\n      key: \"isFixedType\",\n      value: function isFixedType() {\n        return this.calcType === CALC_TYPE.FIXED;\n      }\n\n      // return the real last index\n    }, {\n      key: \"getLastIndex\",\n      value: function getLastIndex() {\n        return this.param.uniqueIds.length - 1;\n      }\n\n      // in some conditions range is broke, we need correct it\n      // and then decide whether need update to next range\n    }, {\n      key: \"checkRange\",\n      value: function checkRange(start, end) {\n        var keeps = this.param.keeps;\n        var total = this.param.uniqueIds.length;\n\n        // datas less than keeps, render all\n        if (total <= keeps) {\n          start = 0;\n          end = this.getLastIndex();\n        } else if (end - start < keeps - 1) {\n          // if range length is less than keeps, corrent it base on end\n          start = end - keeps + 1;\n        }\n        if (this.range.start !== start) {\n          this.updateRange(start, end);\n        }\n      }\n\n      // setting to a new range and rerender\n    }, {\n      key: \"updateRange\",\n      value: function updateRange(start, end) {\n        this.range.start = start;\n        this.range.end = end;\n        this.range.padFront = this.getPadFront();\n        this.range.padBehind = this.getPadBehind();\n        this.callUpdate(this.getRange());\n      }\n\n      // return end base on start\n    }, {\n      key: \"getEndByStart\",\n      value: function getEndByStart(start) {\n        var theoryEnd = start + this.param.keeps - 1;\n        var truelyEnd = Math.min(theoryEnd, this.getLastIndex());\n        return truelyEnd;\n      }\n\n      // return total front offset\n    }, {\n      key: \"getPadFront\",\n      value: function getPadFront() {\n        if (this.isFixedType()) {\n          return this.fixedSizeValue * this.range.start;\n        } else {\n          return this.getIndexOffset(this.range.start);\n        }\n      }\n\n      // return total behind offset\n    }, {\n      key: \"getPadBehind\",\n      value: function getPadBehind() {\n        var end = this.range.end;\n        var lastIndex = this.getLastIndex();\n        if (this.isFixedType()) {\n          return (lastIndex - end) * this.fixedSizeValue;\n        }\n        return (lastIndex - end) * this.getEstimateSize();\n      }\n\n      // get the item estimate size\n    }, {\n      key: \"getEstimateSize\",\n      value: function getEstimateSize() {\n        return this.isFixedType() ? this.fixedSizeValue : this.firstRangeAverageSize || this.param.estimateSize;\n      }\n    }]);\n    return Virtual;\n  }();\n\n  /**\n   * props declaration for default, item and slot component\n   */\n\n  var VirtualProps = {\n    dataKey: {\n      type: [String, Function],\n      required: true\n    },\n    dataSources: {\n      type: Array,\n      required: true\n    },\n    dataComponent: {\n      type: [Object, Function],\n      required: true\n    },\n    keeps: {\n      type: Number,\n      \"default\": 30\n    },\n    extraProps: {\n      type: Object\n    },\n    estimateSize: {\n      type: Number,\n      \"default\": 50\n    },\n    direction: {\n      type: String,\n      \"default\": 'vertical' // the other value is horizontal\n    },\n\n    start: {\n      type: Number,\n      \"default\": 0\n    },\n    offset: {\n      type: Number,\n      \"default\": 0\n    },\n    topThreshold: {\n      type: Number,\n      \"default\": 0\n    },\n    bottomThreshold: {\n      type: Number,\n      \"default\": 0\n    },\n    pageMode: {\n      type: Boolean,\n      \"default\": false\n    },\n    rootTag: {\n      type: String,\n      \"default\": 'div'\n    },\n    wrapTag: {\n      type: String,\n      \"default\": 'div'\n    },\n    wrapClass: {\n      type: String,\n      \"default\": ''\n    },\n    wrapStyle: {\n      type: Object\n    },\n    itemTag: {\n      type: String,\n      \"default\": 'div'\n    },\n    itemClass: {\n      type: String,\n      \"default\": ''\n    },\n    itemClassAdd: {\n      type: Function\n    },\n    itemStyle: {\n      type: Object\n    },\n    headerTag: {\n      type: String,\n      \"default\": 'div'\n    },\n    headerClass: {\n      type: String,\n      \"default\": ''\n    },\n    headerStyle: {\n      type: Object\n    },\n    footerTag: {\n      type: String,\n      \"default\": 'div'\n    },\n    footerClass: {\n      type: String,\n      \"default\": ''\n    },\n    footerStyle: {\n      type: Object\n    },\n    itemScopedSlots: {\n      type: Object\n    }\n  };\n  var ItemProps = {\n    index: {\n      type: Number\n    },\n    event: {\n      type: String\n    },\n    tag: {\n      type: String\n    },\n    horizontal: {\n      type: Boolean\n    },\n    source: {\n      type: Object\n    },\n    component: {\n      type: [Object, Function]\n    },\n    slotComponent: {\n      type: Function\n    },\n    uniqueKey: {\n      type: [String, Number]\n    },\n    extraProps: {\n      type: Object\n    },\n    scopedSlots: {\n      type: Object\n    }\n  };\n  var SlotProps = {\n    event: {\n      type: String\n    },\n    uniqueKey: {\n      type: String\n    },\n    tag: {\n      type: String\n    },\n    horizontal: {\n      type: Boolean\n    }\n  };\n\n  var Wrapper = {\n    created: function created() {\n      this.shapeKey = this.horizontal ? 'offsetWidth' : 'offsetHeight';\n    },\n    mounted: function mounted() {\n      var _this = this;\n      if (typeof ResizeObserver !== 'undefined') {\n        this.resizeObserver = new ResizeObserver(function () {\n          _this.dispatchSizeChange();\n        });\n        this.resizeObserver.observe(this.$el);\n      }\n    },\n    // since componet will be reused, so disptach when updated\n    updated: function updated() {\n      // this.dispatchSizeChange()\n      this.resizeObserver.observe(this.$el);\n    },\n    beforeDestroy: function beforeDestroy() {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n      }\n    },\n    methods: {\n      getCurrentSize: function getCurrentSize() {\n        return this.$el ? this.$el[this.shapeKey] : 0;\n      },\n      // tell parent current size identify by unqiue key\n      dispatchSizeChange: function dispatchSizeChange() {\n        this.$parent.$emit(this.event, this.uniqueKey, this.getCurrentSize(), this.hasInitial);\n      }\n    }\n  };\n\n  // wrapping for item\n  var Item = Vue.component('virtual-list-item', {\n    mixins: [Wrapper],\n    props: ItemProps,\n    render: function render(h) {\n      var tag = this.tag,\n        component = this.component,\n        _this$extraProps = this.extraProps,\n        extraProps = _this$extraProps === void 0 ? {} : _this$extraProps,\n        index = this.index,\n        source = this.source,\n        _this$scopedSlots = this.scopedSlots,\n        scopedSlots = _this$scopedSlots === void 0 ? {} : _this$scopedSlots,\n        uniqueKey = this.uniqueKey,\n        slotComponent = this.slotComponent;\n      var props = _objectSpread2(_objectSpread2({}, extraProps), {}, {\n        source: source,\n        index: index\n      });\n      return h(tag, {\n        key: uniqueKey,\n        attrs: {\n          role: 'listitem'\n        }\n      }, [slotComponent ? slotComponent({\n        item: source,\n        index: index,\n        scope: props\n      }) : h(component, {\n        props: props,\n        scopedSlots: scopedSlots\n      })]);\n    }\n  });\n\n  // wrapping for slot\n  var Slot = Vue.component('virtual-list-slot', {\n    mixins: [Wrapper],\n    props: SlotProps,\n    render: function render(h) {\n      var tag = this.tag,\n        uniqueKey = this.uniqueKey;\n      return h(tag, {\n        key: uniqueKey,\n        attrs: {\n          role: uniqueKey\n        }\n      }, this.$slots[\"default\"]);\n    }\n  });\n\n  /**\n   * virtual list default component\n   */\n  var EVENT_TYPE = {\n    ITEM: 'item_resize',\n    SLOT: 'slot_resize'\n  };\n  var SLOT_TYPE = {\n    HEADER: 'thead',\n    // string value also use for aria role attribute\n    FOOTER: 'tfoot'\n  };\n  var VirtualList = Vue.component('virtual-list', {\n    props: VirtualProps,\n    data: function data() {\n      return {\n        range: null\n      };\n    },\n    watch: {\n      'dataSources.length': function dataSourcesLength() {\n        this.virtual.updateParam('uniqueIds', this.getUniqueIdFromDataSources());\n        this.virtual.handleDataSourcesChange();\n      },\n      keeps: function keeps(newValue) {\n        this.virtual.updateParam('keeps', newValue);\n        this.virtual.handleSlotSizeChange();\n      },\n      start: function start(newValue) {\n        this.scrollToIndex(newValue);\n      },\n      offset: function offset(newValue) {\n        this.scrollToOffset(newValue);\n      }\n    },\n    created: function created() {\n      this.isHorizontal = this.direction === 'horizontal';\n      this.directionKey = this.isHorizontal ? 'scrollLeft' : 'scrollTop';\n      this.installVirtual();\n\n      // listen item size change\n      this.$on(EVENT_TYPE.ITEM, this.onItemResized);\n\n      // listen slot size change\n      if (this.$slots.header || this.$slots.footer) {\n        this.$on(EVENT_TYPE.SLOT, this.onSlotResized);\n      }\n    },\n    activated: function activated() {\n      // set back offset when awake from keep-alive\n      this.scrollToOffset(this.virtual.offset);\n      if (this.pageMode) {\n        document.addEventListener('scroll', this.onScroll, {\n          passive: false\n        });\n      }\n    },\n    deactivated: function deactivated() {\n      if (this.pageMode) {\n        document.removeEventListener('scroll', this.onScroll);\n      }\n    },\n    mounted: function mounted() {\n      // set position\n      if (this.start) {\n        this.scrollToIndex(this.start);\n      } else if (this.offset) {\n        this.scrollToOffset(this.offset);\n      }\n\n      // in page mode we bind scroll event to document\n      if (this.pageMode) {\n        this.updatePageModeFront();\n        document.addEventListener('scroll', this.onScroll, {\n          passive: false\n        });\n      }\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.virtual.destroy();\n      if (this.pageMode) {\n        document.removeEventListener('scroll', this.onScroll);\n      }\n    },\n    methods: {\n      // get item size by id\n      getSize: function getSize(id) {\n        return this.virtual.sizes.get(id);\n      },\n      // get the total number of stored (rendered) items\n      getSizes: function getSizes() {\n        return this.virtual.sizes.size;\n      },\n      // return current scroll offset\n      getOffset: function getOffset() {\n        if (this.pageMode) {\n          return document.documentElement[this.directionKey] || document.body[this.directionKey];\n        } else {\n          var root = this.$refs.root;\n          return root ? Math.ceil(root[this.directionKey]) : 0;\n        }\n      },\n      // return client viewport size\n      getClientSize: function getClientSize() {\n        var key = this.isHorizontal ? 'clientWidth' : 'clientHeight';\n        if (this.pageMode) {\n          return document.documentElement[key] || document.body[key];\n        } else {\n          var root = this.$refs.root;\n          return root ? Math.ceil(root[key]) : 0;\n        }\n      },\n      // return all scroll size\n      getScrollSize: function getScrollSize() {\n        var key = this.isHorizontal ? 'scrollWidth' : 'scrollHeight';\n        if (this.pageMode) {\n          return document.documentElement[key] || document.body[key];\n        } else {\n          var root = this.$refs.root;\n          return root ? Math.ceil(root[key]) : 0;\n        }\n      },\n      // set current scroll position to a expectant offset\n      scrollToOffset: function scrollToOffset(offset) {\n        if (this.pageMode) {\n          document.body[this.directionKey] = offset;\n          document.documentElement[this.directionKey] = offset;\n        } else {\n          var root = this.$refs.root;\n          if (root) {\n            root[this.directionKey] = offset;\n          }\n        }\n      },\n      // set current scroll position to a expectant index\n      scrollToIndex: function scrollToIndex(index) {\n        // scroll to bottom\n        if (index >= this.dataSources.length - 1) {\n          this.scrollToBottom();\n        } else {\n          var offset = this.virtual.getOffset(index);\n          this.scrollToOffset(offset);\n        }\n      },\n      // set current scroll position to bottom\n      scrollToBottom: function scrollToBottom() {\n        var _this = this;\n        var shepherd = this.$refs.shepherd;\n        if (shepherd) {\n          var offset = shepherd[this.isHorizontal ? 'offsetLeft' : 'offsetTop'];\n          this.scrollToOffset(offset);\n\n          // check if it's really scrolled to the bottom\n          // maybe list doesn't render and calculate to last range\n          // so we need retry in next event loop until it really at bottom\n          setTimeout(function () {\n            if (_this.getOffset() + _this.getClientSize() + 1 < _this.getScrollSize()) {\n              _this.scrollToBottom();\n            }\n          }, 3);\n        }\n      },\n      // when using page mode we need update slot header size manually\n      // taking root offset relative to the browser as slot header size\n      updatePageModeFront: function updatePageModeFront() {\n        var root = this.$refs.root;\n        if (root) {\n          var rect = root.getBoundingClientRect();\n          var defaultView = root.ownerDocument.defaultView;\n          var offsetFront = this.isHorizontal ? rect.left + defaultView.pageXOffset : rect.top + defaultView.pageYOffset;\n          this.virtual.updateParam('slotHeaderSize', offsetFront);\n        }\n      },\n      // reset all state back to initial\n      reset: function reset() {\n        this.virtual.destroy();\n        this.scrollToOffset(0);\n        this.installVirtual();\n      },\n      // ----------- public method end -----------\n      installVirtual: function installVirtual() {\n        this.virtual = new Virtual({\n          slotHeaderSize: 0,\n          slotFooterSize: 0,\n          keeps: this.keeps,\n          estimateSize: this.estimateSize,\n          buffer: Math.round(this.keeps / 3),\n          // recommend for a third of keeps\n          uniqueIds: this.getUniqueIdFromDataSources()\n        }, this.onRangeChanged);\n\n        // sync initial range\n        this.range = this.virtual.getRange();\n      },\n      getUniqueIdFromDataSources: function getUniqueIdFromDataSources() {\n        var dataKey = this.dataKey;\n        return this.dataSources.map(function (dataSource) {\n          return typeof dataKey === 'function' ? dataKey(dataSource) : dataSource[dataKey];\n        });\n      },\n      // event called when each item mounted or size changed\n      onItemResized: function onItemResized(id, size) {\n        this.virtual.saveSize(id, size);\n        this.$emit('resized', id, size);\n      },\n      // event called when slot mounted or size changed\n      onSlotResized: function onSlotResized(type, size, hasInit) {\n        if (type === SLOT_TYPE.HEADER) {\n          this.virtual.updateParam('slotHeaderSize', size);\n        } else if (type === SLOT_TYPE.FOOTER) {\n          this.virtual.updateParam('slotFooterSize', size);\n        }\n        if (hasInit) {\n          this.virtual.handleSlotSizeChange();\n        }\n      },\n      // here is the rerendering entry\n      onRangeChanged: function onRangeChanged(range) {\n        this.range = range;\n      },\n      onScroll: function onScroll(evt) {\n        var offset = this.getOffset();\n        var clientSize = this.getClientSize();\n        var scrollSize = this.getScrollSize();\n\n        // \biOS scroll-spring-back behavior will make direction mistake\n        if (offset < 0 || offset + clientSize > scrollSize + 1 || !scrollSize) {\n          return;\n        }\n        this.virtual.handleScroll(offset);\n        this.emitEvent(offset, clientSize, scrollSize, evt);\n      },\n      // emit event in special position\n      emitEvent: function emitEvent(offset, clientSize, scrollSize, evt) {\n        this.$emit('scroll', evt, this.virtual.getRange());\n        if (this.virtual.isFront() && !!this.dataSources.length && offset - this.topThreshold <= 0) {\n          this.$emit('totop');\n        } else if (this.virtual.isBehind() && offset + clientSize + this.bottomThreshold >= scrollSize) {\n          this.$emit('tobottom');\n        }\n      },\n      // get the real render slots based on range data\n      // in-place patch strategy will try to reuse components as possible\n      // so those components that are reused will not trigger lifecycle mounted\n      getRenderSlots: function getRenderSlots(h) {\n        var slots = [];\n        var _this$range = this.range,\n          start = _this$range.start,\n          end = _this$range.end;\n        var dataSources = this.dataSources,\n          dataKey = this.dataKey,\n          itemClass = this.itemClass,\n          itemTag = this.itemTag,\n          itemStyle = this.itemStyle,\n          isHorizontal = this.isHorizontal,\n          extraProps = this.extraProps,\n          dataComponent = this.dataComponent,\n          itemScopedSlots = this.itemScopedSlots;\n        var slotComponent = this.$scopedSlots && this.$scopedSlots.item;\n        for (var index = start; index <= end; index++) {\n          var dataSource = dataSources[index];\n          if (dataSource) {\n            var uniqueKey = typeof dataKey === 'function' ? dataKey(dataSource) : dataSource[dataKey];\n            if (typeof uniqueKey === 'string' || typeof uniqueKey === 'number') {\n              slots.push(h(Item, {\n                props: {\n                  index: index,\n                  tag: itemTag,\n                  event: EVENT_TYPE.ITEM,\n                  horizontal: isHorizontal,\n                  uniqueKey: uniqueKey,\n                  source: dataSource,\n                  extraProps: extraProps,\n                  component: dataComponent,\n                  slotComponent: slotComponent,\n                  scopedSlots: itemScopedSlots\n                },\n                style: itemStyle,\n                \"class\": \"\".concat(itemClass).concat(this.itemClassAdd ? ' ' + this.itemClassAdd(index) : '')\n              }));\n            } else {\n              console.warn(\"Cannot get the data-key '\".concat(dataKey, \"' from data-sources.\"));\n            }\n          } else {\n            console.warn(\"Cannot get the index '\".concat(index, \"' from data-sources.\"));\n          }\n        }\n        return slots;\n      }\n    },\n    // render function, a closer-to-the-compiler alternative to templates\n    // https://vuejs.org/v2/guide/render-function.html#The-Data-Object-In-Depth\n    render: function render(h) {\n      var _this$$slots = this.$slots,\n        header = _this$$slots.header,\n        footer = _this$$slots.footer;\n      var _this$range2 = this.range,\n        padFront = _this$range2.padFront,\n        padBehind = _this$range2.padBehind;\n      var isHorizontal = this.isHorizontal,\n        pageMode = this.pageMode,\n        rootTag = this.rootTag,\n        wrapTag = this.wrapTag,\n        wrapClass = this.wrapClass,\n        wrapStyle = this.wrapStyle,\n        headerTag = this.headerTag,\n        headerClass = this.headerClass,\n        headerStyle = this.headerStyle,\n        footerTag = this.footerTag,\n        footerClass = this.footerClass,\n        footerStyle = this.footerStyle;\n      var paddingStyle = {\n        padding: isHorizontal ? \"0px \".concat(padBehind, \"px 0px \").concat(padFront, \"px\") : \"\".concat(padFront, \"px 0px \").concat(padBehind, \"px\")\n      };\n      var wrapperStyle = wrapStyle ? Object.assign({}, wrapStyle, paddingStyle) : paddingStyle;\n      return h(rootTag, {\n        ref: 'root',\n        on: {\n          '&scroll': !pageMode && this.onScroll\n        }\n      }, [\n      // header slot\n      header ? h(Slot, {\n        \"class\": headerClass,\n        style: headerStyle,\n        props: {\n          tag: headerTag,\n          event: EVENT_TYPE.SLOT,\n          uniqueKey: SLOT_TYPE.HEADER\n        }\n      }, header) : null,\n      // main list\n      h(wrapTag, {\n        \"class\": wrapClass,\n        attrs: {\n          role: 'group'\n        },\n        style: wrapperStyle\n      }, this.getRenderSlots(h)),\n      // footer slot\n      footer ? h(Slot, {\n        \"class\": footerClass,\n        style: footerStyle,\n        props: {\n          tag: footerTag,\n          event: EVENT_TYPE.SLOT,\n          uniqueKey: SLOT_TYPE.FOOTER\n        }\n      }, footer) : null,\n      // an empty element use to scroll to bottom\n      h('div', {\n        ref: 'shepherd',\n        style: {\n          width: isHorizontal ? '0px' : '100%',\n          height: isHorizontal ? '100%' : '0px'\n        }\n      })]);\n    }\n  });\n\n  return VirtualList;\n\n})));\n"],"names":["FpsCounter","constructor","updateInterval","this","frames","lastTime","performance","now","fps","update","elapsed","PerformanceTracker","marks","Map","timings","lastRenderTime","averageRenderTime","renderCount","startMark","name","set","endMark","has","startTime","get","duration","total","count","average","min","max","timing","Math","delete","trackRenderTime","getTimings","getAverageRenderTime","clear","PerformanceWatcher","thresholds","renderTime","loadTime","memoryLimit","warnings","checkRenderTime","warning","toFixed","push","type","message","time","checkLoadTime","checkMemoryUsage","window","memory","usedJSHeapSize","getWarnings","clearWarnings","perfTracker","perfWatcher","fpsCounter","render","_vm","_c","_self","staticClass","style","width","sidebarWidth","attrs","model","value","tab","callback","$$v","expression","_l","tabList","item","key","text","_v","_s","icon","component","tag","on","getType","getHover","getGeneExp","getColorBy","changeLayout","getRangeSelected","handlePanelStateChange","handleDatasetChanged","isPanelOpen","_e","initResize","flag","class","gridClass","datasetList","i","summaryData","signDelete","classInfo","deleteGrap","staticRenderFns","staticStyle","isConfigLoading","_m","allVisualization","index","openEdit","currentDatasetInfo","title","description","cellsDisplay","colorField","length","openAdd","showEditClass","$event","datasetOptions","handleDatasetChange","selectedDataset","visualList","selectVisual","ticksLabels","resulution","pointSize","checkbox","filteredCell","showAddVis","changeAddDataset","newSelectDataset","newVisualList","newSelectVisual","data","seasons","icons","selectDataset","isDatasetLoading","isLoadingDatasetInfo","datasetInfoCache","visual","computed","mapState","currentOption","find","opt","info","config","displayName","formatNumber","total_cells","metadata","estimatedCells","mounted","addEventListener","handleDatasetChangedEvent","initializeDynamicConfig","loadAllDatasetInfo","beforeDestroy","removeEventListener","methods","mapActions","initializeDatasetConfig","getDatasetsConfig","Error","datasets","map","dataset","id","buildVisualizationOptions","currentDataset","getDataset","defaultDataset","console","log","configDefault","availableDatasets","error","warn","loadDatasetsConfig","fallbackError","supportedVisualizations","visualizations","tsne","label","umap","pca","Object","entries","toUpperCase","v","newDataset","setDataset","$emit","oldDataset","getDatasetInfo","getDatasetDisplayName","setTimeout","event","detail","loadPromises","option","loadDatasetInfo","estimated","Promise","all","datasetType","matrixInfoPath","buildDatasetPath","response","fetch","ok","json","status","getDatasetVisualizationOptions","filter","vis","includes","num","toString","season","val","changeDataset","currentDatasetOption","defaultVis","defaultVisualization","selectedVisualization","newDatasetOption","unshift","datasetName","formatFileSize","cellInfoList","scopedSlots","_u","fn","open","getFilterNum","stopPropagation","changeByColor","currentColorBy","currentComponent","children","field","fieldValue","getCheckList","getHoverItem","nativeOn","handleAttributeMouseEnter","apply","arguments","handleAttributeMouseLeave","getTreeSelected","handleMouseOver","handleMouseOut","backgroundColor","getColor","getColorList","color","treeSelection","hsv2rgb","h","s","rgb","floor","f","p","q","t","getColorFromValue","colorIndex","baseHue","colorGroup","secondaryShift","hue","saturation","brightness","onComponentEnter","onComponentLeave","typeList","onMouseEnter","onMouseLeave","checkList","typeName","colors","classes","highlightTimeout","componentHovered","props","Array","default","String","mapGetters","getFieldValue","keys","hasCurrentType","currentTypeLength","safeFieldValue","safeField","watch","handler","typeIndex","indexOf","items","isArray","immediate","join","mode","valueIndices","checkItem","selectedItem","valueIndex","CustomEvent","bubbles","attributeName","attributeValueIndices","$el","dispatchEvent","clearEvent","clearHoverEvent","clearHighlightEvent","reason","clearTimeout","attributeValue","onOver","_","onLeave","typeItemIndex","clearAllHighlights","mixins","nonReactiveDataMixin","components","typeListItem","expandPanelList","highlightedAttribute","highlightedValue","getCellInfoList","addGlobalEventListeners","removeGlobalEventListeners","resolve","loadDataWithRetry","actionName","maxRetries","delay","lastError","attempt","retryDelay","pow","typeInfo","hasOwnProperty","categoryData","categorizedData","actualAttributeName","selectedItemName","isCheckHighlight","force","treeData","forEach","prefix","match","trim","parent","highlightTreeItem","clearHighlight","hoverItem","colorKey","bytes","loadCellAttribute","attrPath","fieldName","split","pop","replace","dataLoader","floatArray","Float32Array","document","handlePropertyItemMouseEnter","handlePropertyItemMouseLeave","undefined","clearHoverCategory","setHoverCategory","$store","dispatch","highlightAttribute","highlightEvent","itemName","attributeValues","checkForCheckedItems","geneList","showBatchInput","_k","keyCode","batchInput","selectGene","_b","selected","select","remove","geneSelected","clearGenes","addBatchGenes","handlePanelClick","activeGeneForRendering","handleColorIconClick","removeItem","selectedRange","formatExpression","start","end","getSelectionStats","percentage","getExpressionPercentage","ref","refInFor","startSelection","updateSelection","endSelection","cancelSelection","getExpressionRange","getAxisTickValue","currentSelectedGeneInfo","generateHistogramData","bar","height","getBarColor","isInSelectionRange","selectionActive","currentSelectionGene","selectionStart","x","getSelectionWidth","isNaN","getSelectionRangePosition","getAverageExpression","clearSelection","histogramData","y","selectionEnd","isUpdating","geneTotal","geneData","chunkCache","selectionStats","currentOpenPanel","geneColor","geneExp","getNonReactiveData","loadGeneList","loadMatrixInfo","autoSelectFirstGene","loadSavedRanges","gene","range","stats","firstGene","geneInfo","statusText","total_genes","genes_per_chunk","geneNames","validGenes","geneName","found","toLowerCase","remainingGenes","splice","activeGeneData","selectedGeneInfo","chunksToLoad","Set","geneIndexMap","findIndex","chunkIndex","geneIndex","add","loadChunkData","slice","nonZeroCount","maxVal","minVal","validateGeneDataDifferences","calculateSelectionStats","saveSelectedRanges","$nextTick","$forceUpdate","chunkPath","chunkData","arrayBuffer","dataView","DataView","allExps","rowLength","rowCount","byteLength","row","j","offset","getFloat32","getGeneData","exps","expressionData","nonZeroValues","bins","binWidth","fill","binStart","binEnd","binIndex","maxCount","d","bin","totalCounts","reduce","sum","nonEmptyBins","acc","avg","toExponential","calculateExpressionValue","svgWidth","leftMargin","rightMargin","effectiveWidth","adjustedX","normalizedPos","preventDefault","svgElement","currentTarget","rect","getBoundingClientRect","clientX","left","startVal","endVal","abs","improveSelectionAccuracy","geneExpressionData","scaledX","localStorage","setItem","JSON","stringify","savedRanges","getItem","savedStats","parse","minRange","maxRange","cellsInRange","totalCells","svg","getElementById","exprRange","totalRange","startRatio","endRatio","startX","endX","position","emitAllSelectionRanges","allRanges","emitCurrentSelectionRange","handleColorClicked","intensity","round","singleGeneData","gene1","gene2","data1","data2","sample1","sample2","areSame","stats1","getGeneStats","stats2","nonZero","a","b","adjustedStart","adjustedEnd","minStartDiff","Infinity","minEndDiff","startDiff","endDiff","startAdjustmentRatio","endAdjustmentRatio","graphNum","drawer","directives","rawName","loading","colorBy","filterNum","operateActive","changeOperator","openSelectDrawer","separateGraph","deleteSeparateGraph","downloadImage","refKey","colorData","partialData","dataRange","colorRange","quadTree","hoverCategory","nodeMap","sizeData","selectedTypes","typeClass","typeItem","typeValue","operatorType","geneExpRange","selectArea","handleCloseDrawer","selectNodes","changeCellItem","selectInfo","itemComponent","QuadNode","boundary","pointsCount","points_count","hasFile","has_file","points","nw","ne","sw","se","containsPoint","minX","minY","maxX","maxY","getArea","intersectsBounds","searchBounds","nodeMinX","nodeMinY","nodeMaxX","nodeMaxY","QuadTree","jsonData","root","blocksCount","total_blocks","nodeCache","cacheLimit","cacheHits","cacheMisses","totalSearches","getNodeArea","node","findNodeByPoint","cacheKey","result","_findNodeByPointInternal","size","firstKey","next","depth","smallestNode","smallestArea","child","values","area","findMultiplePoints","results","point","findNodesInRange","nodes","getPerformanceStats","cacheHitRate","cacheSize","clearCache","ScatterRenderer","container","options","defaultZoom","defaultOffset","antialiasing","responderActive","selectionEnabled","hoverThrottleTime","highlightSize","state","zoom","offsetX","offsetY","isPanning","isSelecting","selectionMode","selectionVisible","selectedIndices","isZooming","targetZoom","velocity","inertiaEnabled","lastMousePosition","isChunkLoading","renderPending","renderInterval","animationFrameId","viewportRatio","isDirty","selectionStartData","selectionEndData","lastHoverTime","highlightAttributeName","highlightAttributeValues","highlightFilter","isTransitioning","transitionTimer","isMouseInListArea","hoverAttributeName","hoverValueIndex","highlightByAttribute","multiAttributeHighlight","enabled","attributes","resources","canvas","regl","drawScatter","positionBuffer","geneBuffer","vertexIdBuffer","filterTexture","textureSize","colorTexture","highlightTexture","hoverTexture","geneColorTexture","textureIndex","treeMap","nodeIndices","geneExpressionRange","callbacks","onDataLoaded","onPointSelected","onPointHovered","renderFrame","bind","throttledHoverPoint","throttle","hoverPoint","func","limit","async","args","Date","initialize","createElement","appendChild","pixelRatio","devicePixelRatio","offsetWidth","offsetHeight","requiredExtensions","webgl2","createREGL","extensions","alpha","antialias","preserveDrawingBuffer","onDone","err","setupEventListeners","texture","format","mag","wrapS","wrapT","startRenderLoop","handleError","smoothZoom","deltaY","setPanningMode","handleResize","ResizeObserver","debouncedResize","createDebouncedResize","resizeObserver","entry","target","observe","timeoutId","isProcessing","loadData","quadTreePath","treeRes","loadQuadTree","min_x","max_x","min_y","max_y","geneBufferSize","buffer","wrap","loadTreeChunks","bufferCapacity","ceil","bufferSize","usage","positionBufferCapacity","MAX_TEXTURE_SIZE","_gl","getParameter","textureCapacity","textureWidth","sqrt","textureHeight","from","shape","nodeIds","collectNodeIds","currentField","queue","renderedChunkCount","chunkRenderInterval","updateProgress","progress","shift","chunkPointCount","loadCoordinateBlock","startIndex","chunkPoints","newTotalCount","expandBuffers","subdata","updateTextureForAttribute","scheduleRender","createDrawCommand","requiredCapacity","newCapacity","newBufferSize","oldBuffer","needsDataReload","newTextureWidth","newTextureHeight","oldColorTexture","destroy","resetForNewDataset","clearDatasetCache","cacheError","hasValidData","createDatasetCacheKey","baseKey","safeGetMapData","datasetSpecificKey","getMapData","resetDatabase","resetError","attributeCache","fieldIndex","attrData","texWidth","texHeight","startPointIndex","pointsInRow","rowData","globalPointIndex","subimage","pointCount","nodeId","textureData","currentStartX","currentStartY","pointsToUpdate","availableInRow","updateWidth","floatArrayPart","subarray","setColorAttribute","newColorIndex","loadSuccess","commandCreated","setHighlightAttribute","attributeIndex","loadHighlightAttributeData","maxValue","isHighlighted","pointValue","some","highlightValue","cachedData","validAttrData","emptyData","requestAnimationFrame","hasRegl","hasPositionBuffer","hasColorTexture","hasGeneBuffer","hasGeneColorTexture","dataTotal","dataCount","vertexShader","fragmentShader","viewport","frag","vert","prop","vertexId","uniforms","transform","xRange","yRange","aspectRatio","clientWidth","clientHeight","pointDataTexture[0]","context","currentColorField","useAntialiasing","hasHighlight","isAttributeHighlight","hasGeneData","primitive","enable","blend","srcRGB","srcAlpha","dstRGB","dstAlpha","boundStartSelection","capture","boundUpdateSelection","boundEndSelection","boundStartPanning","startPanning","boundEndPanning","endPanning","boundHandleMouseMove","handleMouseMove","cursor","setSelectionMode","clientY","applyInertia","getMode","pan","createTransformMatrix","dispose","cancelAnimationFrame","boundHandleResize","disconnect","textures","gl","getExtension","loseContext","maxTextureUnits","MAX_TEXTURE_IMAGE_UNITS","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","bindRenderbuffer","RENDERBUFFER","bindFramebuffer","FRAMEBUFFER","maxVertexAttribs","MAX_VERTEX_ATTRIBS","disableVertexAttribArray","parentNode","removeChild","gc","errorDiv","className","textContent","cssText","closeBtn","onclick","dt","dx","movementX","dy","movementY","decay","animate","scaleAmount","animateZoom","contains","containerWidth","containerHeight","newCanvasWidth","newCanvasHeight","getMousePositionInWebGL","mouseX","mouseY","top","getDataCoordinates","transformMatrix","scaleFactor","normalizedX","normalizedY","dataX","dataY","getWebGLCoordinates","transformedX","transformedY","webGLCoords","dataCoords","hasSelection","selectionBox","selectedPoints","getSelectedPoints","startY","endY","attributeDataMap","nodeData","nodeIndexInfo","globalIndex","pointData","colorValue","currentFieldName","currentAttrData","attrValue","drawSelectionBox","startWebGL","endWebGL","drawMaskLayer","drawBorders","positions","src","dst","generateMaskLayerFragmentShader","lineWidth","thickLineVertices","thickLineBuffer","hideTooltip","baseThreshold","zoomAdjustment","threshold","hoveredPoint","closestDistance","localPointIndex","px","py","distX","distY","distance","showTooltip","category","savedHighlightState","tooltip","tooltipStyle","colorStr","categoryName","innerHTML","canvasRect","display","tooltipWidth","tooltipHeight","tooltipX","tooltipY","transition","opacity","shouldRender","isHoverMode","isMouseInEmptyArea","isCheckMode","effectiveHighlight","renderError","setMode","testSelection","enableSelection","drawTestBox","currentMode","statusMessage","forceDrawSelectionBox","alert","VERSION","setSelectionVisible","visible","clearAfter","centerX","centerY","downloadCanvasAsPNG","fileName","safeFileName","link","download","toISOString","href","toDataURL","body","click","URL","revokeObjectURL","setMouseInListArea","isInArea","setHoverByAttribute","isHovered","clearHoverByAttribute","loadAttributeAndHighlight","clearAttributeHighlight","setMultipleAttributeHighlight","validValueIndices","setMultiAttributeIntersectionHighlight","clearMultiAttributeHighlight","calculateIntersectionHighlight","attributeMap","attributeNames","highlightedPointsCount","matchesThisAttribute","updateGeneData","expressionRange","updateGeneColorTexture","validValues","minValue","filterRange","expressionValue","inFilterRange","normalizedValue","red","blue","green","clearGeneData","updateFilter","filterData","filterTextureData","renderer","isInitialized","highlightListener","multipleHighlightListener","multiAttributeIntersectionListener","clearHighlightListener","hoverListener","clearHoverListener","mouseEnterListAreaListener","mouseLeaveListAreaListener","currentHighlight","currentCheckedHighlight","operate","uiState","cellData","hoverVal","newMode","switchMode","newColorBy","newRange","deep","newGeneData","newTotal","initRenderer","newField","fieldLength","geneDataLength","setupHighlightListeners","removeHighlightListeners","disposeError","$refs","scatterBrain","handlePointSelected","validColorIndex","handleKeyDown","handleHighlightEvent","handleMultipleHighlightEvent","handleMultiAttributeIntersectionEvent","handleClearHighlightEvent","handleHoverEvent","handleClearHoverEvent","handleMouseEnterListArea","handleMouseLeaveListArea","eventDetail","targetAttributeName","checkedAttributeName","backupDownload","querySelector","handleContainerResize","source","Number","$vuetify","breakpoint","xs","opearate_active","setOperateActive","openDrawer","visualizationType","VirtualList","ScatterBrainSingle","GraphControls","infoList","orginColorData","umapData","newDrawerState","oldDrawerState","handleDrawerStateChange","filterTypeData","isEmpty","geneCount","genes","filterGeneExp","hoverInfo","getHoverFilterData","types","classValue","itemValue","exitOther","classData","classPositionValue","itemPositionValue","childNode","classKey","lv2Value","lv2","commit","actualValueIndex","isHover","selectedKey","dataLength","sampleData","currentInfo","groupNodes","groupBy","selectGroupNodes","setSelectNodes","clearSelectionAndRestore","closeDrawer","chartComponent","singleChart","multipleChart","directDownload","chartRefs","chart","ViewManager","CellProperties","Genes","SingleCellGraphVue","notCellType","addCellType","minSidebarWidth","maxSidebarWidth","initialX","initialWidth","loadInitialData","getGridClass","loadDatasetSummary","loadFieldsInfo","loadCellTypeValues","newTypeInfo","setTypeInfo","setHoverInfo","setColorField","updateGridClass","getTime","chartComponents","$children","$options","chartRef","newDatasetList","setCurrentRangeSelected","e","doResize","stopResize","userSelect","DB_NAME","DB_VERSION","STORE_NAME","openDB","reject","checkRequest","indexedDB","onsuccess","existingDb","currentVersion","version","close","targetVersion","request","onupgradeneeded","db","oldVersion","newVersion","objectStoreNames","createObjectStore","autoIncrement","onerror","storeMapData","then","transaction","store","objectStore","put","oncomplete","deleteDatabase","deleteRequest","onblocked","allKeys","getAllKeys","datasetKeys","startsWith","deletePromises","checkCache","cacheData","loadBinaryFile","url","dataArray","loadCoordinatesBin","blockPath","baseCacheKey","DataLoader","abortController","loadStatus","inProgress","loaded","errors","path","requestKey","createDedupedRequest","fetchWithRetry","loadDataBlock","blockId","fileError","flatArray","flat","progressCallback","AbortController","signal","cache","headers","contentLength","parseInt","reader","getReader","chunks","received","done","read","Uint8Array","chunk","dataBuffer","loadAllCellAttributes","fields","attributesMap","allSettled","success","failures","cancelLoading","abort","getLoadStatus","timestamp","GL_DEPTH_COMPONENT","GL_DEPTH_STENCIL","HALF_FLOAT_OES","gl2Extensions","module","exports","overrideContextType","origGetContext","HTMLCanvasElement","prototype","getContext","ignoredContextType","contextAttributes","wrapGLContext","rv","versionProperty","origGetExtension","n","origTexImage","texImage2D","miplevel","iformat","typeFor6","c","typeFor9","ifmt","getInternalFormat","webgl","getTextureType","drawBuffersWEBGL","drawBuffers","createVertexArray","deleteVertexArray","isVertexArray","bindVertexArray","drawArraysInstanced","drawElementsInstanced","vertexAttribDivisor","DEPTH_COMPONENT24","DEPTH24_STENCIL8","RGBA","RGBA16F","RGB","RGB16F","FLOAT","RGBA32F","RGB32F","HALF_FLOAT","global","factory","require","Vue","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","_objectSpread2","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_classCallCheck","instance","Constructor","TypeError","_defineProperties","descriptor","configurable","writable","_createClass","protoProps","staticProps","obj","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_arrayLikeToArray","iter","Symbol","iterator","o","minLen","call","test","len","arr2","DIRECTION_TYPE","FRONT","BEHIND","CALC_TYPE","INIT","FIXED","DYNAMIC","LEADING_BUFFER","Virtual","param","callUpdate","init","sizes","firstRangeTotalSize","firstRangeAverageSize","fixedSizeValue","calcType","direction","create","checkRange","keeps","padFront","padBehind","getIndexOffset","slotHeaderSize","_this","uniqueIds","isFront","isBehind","updateRange","getEndByStart","handleDataSourcesChange","handleFront","handleBehind","overs","getScrollOvers","isFixedType","low","middle","middleOffset","high","givenIndex","indexSize","getEstimateSize","getLastIndex","getPadFront","getPadBehind","getRange","theoryEnd","truelyEnd","lastIndex","estimateSize","VirtualProps","dataKey","Function","required","dataSources","dataComponent","extraProps","topThreshold","bottomThreshold","pageMode","Boolean","rootTag","wrapTag","wrapClass","wrapStyle","itemTag","itemClass","itemClassAdd","itemStyle","headerTag","headerClass","headerStyle","footerTag","footerClass","footerStyle","itemScopedSlots","ItemProps","horizontal","slotComponent","uniqueKey","SlotProps","Wrapper","created","shapeKey","dispatchSizeChange","updated","getCurrentSize","$parent","hasInitial","Item","_this$extraProps","_this$scopedSlots","role","scope","Slot","$slots","EVENT_TYPE","ITEM","SLOT","SLOT_TYPE","HEADER","FOOTER","virtual","updateParam","getUniqueIdFromDataSources","newValue","handleSlotSizeChange","scrollToIndex","scrollToOffset","isHorizontal","directionKey","installVirtual","$on","onItemResized","header","footer","onSlotResized","activated","onScroll","passive","deactivated","updatePageModeFront","getSize","getSizes","getOffset","documentElement","getClientSize","getScrollSize","scrollToBottom","shepherd","defaultView","ownerDocument","offsetFront","pageXOffset","pageYOffset","reset","slotFooterSize","onRangeChanged","dataSource","saveSize","hasInit","evt","clientSize","scrollSize","handleScroll","emitEvent","getRenderSlots","slots","_this$range","$scopedSlots","concat","_this$$slots","_this$range2","paddingStyle","padding","wrapperStyle","assign"],"sourceRoot":""}