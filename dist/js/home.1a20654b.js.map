{"version":3,"file":"js/home.1a20654b.js","mappings":"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","sources":["webpack://single_cell_vis/./src/render/regl-webgl2-compat.js","webpack://single_cell_vis/./node_modules/vue-virtual-scroll-list/dist/index.js","webpack://single_cell_vis/./src/views/HomeView.vue","webpack://single_cell_vis/./src/views/tab/ViewManager.vue","webpack://single_cell_vis/src/views/tab/ViewManager.vue","webpack://single_cell_vis/./src/views/tab/ViewManager.vue?82f9","webpack://single_cell_vis/./src/views/tab/ViewManager.vue?699b","webpack://single_cell_vis/./src/views/tab/CellProperties.vue","webpack://single_cell_vis/./src/utils/tool.js","webpack://single_cell_vis/./src/views/components/typeListItem.vue","webpack://single_cell_vis/src/views/components/typeListItem.vue","webpack://single_cell_vis/./src/views/components/typeListItem.vue?f8e8","webpack://single_cell_vis/./src/views/components/typeListItem.vue?e359","webpack://single_cell_vis/src/views/tab/CellProperties.vue","webpack://single_cell_vis/./src/views/tab/CellProperties.vue?a646","webpack://single_cell_vis/./src/views/tab/CellProperties.vue?cc09","webpack://single_cell_vis/./src/views/tab/Genes.vue","webpack://single_cell_vis/src/views/tab/Genes.vue","webpack://single_cell_vis/./src/views/tab/Genes.vue?a261","webpack://single_cell_vis/./src/views/tab/Genes.vue?6a32","webpack://single_cell_vis/./src/views/SingleCellGraph.vue","webpack://single_cell_vis/./src/views/ScatterBrainSingle.vue","webpack://single_cell_vis/./src/render/quadTree.js","webpack://single_cell_vis/./src/render/indexDB.js","webpack://single_cell_vis/./src/render/performance.js","webpack://single_cell_vis/./src/render/dataLoader.js","webpack://single_cell_vis/./src/render/ScatterRenderer.js","webpack://single_cell_vis/src/views/ScatterBrainSingle.vue","webpack://single_cell_vis/./src/views/ScatterBrainSingle.vue?03fb","webpack://single_cell_vis/./src/views/ScatterBrainSingle.vue?b226","webpack://single_cell_vis/./src/views/components/infoList.vue","webpack://single_cell_vis/src/views/components/infoList.vue","webpack://single_cell_vis/./src/views/components/infoList.vue?3246","webpack://single_cell_vis/./src/views/components/infoList.vue?a8e1","webpack://single_cell_vis/./src/components/visualization/GraphControls.vue","webpack://single_cell_vis/src/components/visualization/GraphControls.vue","webpack://single_cell_vis/./src/components/visualization/GraphControls.vue?d7bf","webpack://single_cell_vis/./src/components/visualization/GraphControls.vue?a88b","webpack://single_cell_vis/src/views/SingleCellGraph.vue","webpack://single_cell_vis/./src/views/SingleCellGraph.vue?1e6f","webpack://single_cell_vis/./src/views/SingleCellGraph.vue?2588","webpack://single_cell_vis/src/views/HomeView.vue","webpack://single_cell_vis/./src/views/HomeView.vue?5167","webpack://single_cell_vis/./src/views/HomeView.vue?aae2"],"sourcesContent":["// Compatability layer to make regl work with webgl2.\n// See https://github.com/regl-project/regl/issues/561\nvar GL_DEPTH_COMPONENT = 0x1902\nvar GL_DEPTH_STENCIL = 0x84F9\nvar HALF_FLOAT_OES = 0x8D61\n\n// webgl1 extensions natively supported by webgl2\nvar gl2Extensions = {\n  'WEBGL_depth_texture': {\n    'UNSIGNED_INT_24_8_WEBGL': 0x84FA\n  },\n  'OES_element_index_uint': {},\n  'OES_texture_float': {},\n  // 'OES_texture_float_linear': {},\n  'OES_texture_half_float': {\n    'HALF_FLOAT_OES': HALF_FLOAT_OES\n  },\n  // 'OES_texture_half_float_linear': {},\n  'EXT_color_buffer_float': {},\n  'OES_standard_derivatives': {},\n  'EXT_frag_depth': {},\n  'EXT_blend_minmax': {\n    'MIN_EXT': 0x8007,\n    'MAX_EXT': 0x8008\n  },\n  'EXT_shader_texture_lod': {}\n}\n\nvar extensions = {};\nmodule.exports = {\n  overrideContextType: function (callback) {\n    const webgl2 = this;\n    // Monkey-patch context creation to override the context type.\n    const origGetContext = HTMLCanvasElement.prototype.getContext\n    HTMLCanvasElement.prototype.getContext = function (ignoredContextType, contextAttributes) {\n      return webgl2.wrapGLContext(origGetContext.bind(this)(\"webgl2\", contextAttributes), extensions);\n    };\n    // Execute the callback with overridden context type.\n    var rv = callback();\n\n    // Restore the original method.\n    HTMLCanvasElement.prototype.getContext = origGetContext;\n    return rv;\n  },\n\n  // webgl1 extensions natively supported by webgl2\n  // this is called when initializing regl context\n  wrapGLContext: function (gl, extensions) {\n    gl[this.versionProperty] = 2\n    for (var p in gl2Extensions) {\n      extensions[p.toLowerCase()] = gl2Extensions[p]\n    }\n\n    // to support float and half-float textures\n    gl.getExtension('EXT_color_buffer_float');\n\n    // Now override getExtension to return ours.\n    const origGetExtension = gl.getExtension;\n    gl.getExtension = function(n) {\n      return extensions[n.toLowerCase()] || origGetExtension.apply(gl, [n]);\n    }\n\n    // And texImage2D to convert the internalFormat to webgl2.\n    const webgl2 = this;\n    const origTexImage = gl.texImage2D;\n    gl.texImage2D = function(target, miplevel, iformat, a, typeFor6, c, d, typeFor9, f) {\n      if (arguments.length == 6) {\n        var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor6);\n        origTexImage.apply(gl, [target, miplevel, ifmt, a, webgl.getTextureType(gl, typeFor6), c]);\n      } else { // arguments.length == 9\n        var ifmt = webgl2.getInternalFormat(gl, iformat, typeFor9);\n        origTexImage.apply(gl, [target, miplevel, ifmt, a, typeFor6, c, d, webgl2.getTextureType(gl, typeFor9), f]);\n      }\n    }\n\n    // mocks of draw buffers's functions\n    extensions['webgl_draw_buffers'] = {\n      drawBuffersWEBGL: function () {\n        return gl.drawBuffers.apply(gl, arguments)\n      }\n    }\n\n    // mocks of vao extension\n    extensions['oes_vertex_array_object'] = {\n      'VERTEX_ARRAY_BINDING_OES':   0x85B5,\n      'createVertexArrayOES': function () {\n        return gl.createVertexArray()\n      },\n      'deleteVertexArrayOES': function () {\n        return gl.deleteVertexArray.apply(gl, arguments)\n      },\n      'isVertexArrayOES': function () {\n        return gl.isVertexArray.apply(gl, arguments)\n      },\n      'bindVertexArrayOES': function () {\n        return gl.bindVertexArray.apply(gl, arguments)\n      }\n    }\n\n    // mocks of instancing extension\n    extensions['angle_instanced_arrays'] = {\n      'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE': 0x88FE,\n      'drawArraysInstancedANGLE': function () {\n        return gl.drawArraysInstanced.apply(gl, arguments)\n      },\n      'drawElementsInstancedANGLE': function () {\n        return gl.drawElementsInstanced.apply(gl, arguments)\n      },\n      'vertexAttribDivisorANGLE': function () {\n        return gl.vertexAttribDivisor.apply(gl, arguments)\n      }\n    }\n\n    return gl;\n  },\n\n  versionProperty: '___regl_gl_version___',\n\n  // texture internal format to update on the fly\n  getInternalFormat: function (gl, format, type) {\n    if (gl[this.versionProperty] !== 2) {\n      return format\n    }\n    // webgl2 texture formats\n    // reference:\n    // https://webgl2fundamentals.org/webgl/lessons/webgl-data-textures.html\n    if (format === GL_DEPTH_COMPONENT) {\n      return gl.DEPTH_COMPONENT24\n    } else if (format === GL_DEPTH_STENCIL) {\n      return gl.DEPTH24_STENCIL8\n    } else if (type === HALF_FLOAT_OES && format === gl.RGBA) {\n      return gl.RGBA16F;\n    } else if (type === HALF_FLOAT_OES && format === gl.RGB) {\n      return gl.RGB16F\n    } else if (type === gl.FLOAT && format === gl.RGBA) {\n      return gl.RGBA32F\n    } else if (type === gl.FLOAT && format === gl.RGB) {\n      return gl.RGB32F\n    }\n    return format\n  },\n\n  // texture type to update on the fly\n  getTextureType: function (gl, type) {\n    if (gl[this.versionProperty] !== 2) {\n      return type\n    }\n    if (type === HALF_FLOAT_OES) {\n      return gl.HALF_FLOAT\n    }\n    return type\n  },\n}","/*!\n * vue-virtual-scroll-list v2.3.4\n * open source under the MIT license\n * https://github.com/tangbc/vue-virtual-scroll-list#readme\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vue')) :\n  typeof define === 'function' && define.amd ? define(['vue'], factory) :\n  (global = global || self, global.VirtualList = factory(global.Vue));\n}(this, (function (Vue) { 'use strict';\n\n  Vue = Vue && Object.prototype.hasOwnProperty.call(Vue, 'default') ? Vue['default'] : Vue;\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      enumerableOnly && (symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n  }\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = null != arguments[i] ? arguments[i] : {};\n      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n    return target;\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n      writable: false\n    });\n    return Constructor;\n  }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  /**\n   * virtual list core calculating center\n   */\n\n  var DIRECTION_TYPE = {\n    FRONT: 'FRONT',\n    // scroll up or left\n    BEHIND: 'BEHIND' // scroll down or right\n  };\n\n  var CALC_TYPE = {\n    INIT: 'INIT',\n    FIXED: 'FIXED',\n    DYNAMIC: 'DYNAMIC'\n  };\n  var LEADING_BUFFER = 0;\n  var Virtual = /*#__PURE__*/function () {\n    function Virtual(param, callUpdate) {\n      _classCallCheck(this, Virtual);\n      this.init(param, callUpdate);\n    }\n    _createClass(Virtual, [{\n      key: \"init\",\n      value: function init(param, callUpdate) {\n        // param data\n        this.param = param;\n        this.callUpdate = callUpdate;\n\n        // size data\n        this.sizes = new Map();\n        this.firstRangeTotalSize = 0;\n        this.firstRangeAverageSize = 0;\n        this.fixedSizeValue = 0;\n        this.calcType = CALC_TYPE.INIT;\n\n        // scroll data\n        this.offset = 0;\n        this.direction = '';\n\n        // range data\n        this.range = Object.create(null);\n        if (param) {\n          this.checkRange(0, param.keeps - 1);\n        }\n\n        // benchmark test data\n        // this.__bsearchCalls = 0\n        // this.__getIndexOffsetCalls = 0\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this.init(null, null);\n      }\n\n      // return current render range\n    }, {\n      key: \"getRange\",\n      value: function getRange() {\n        var range = Object.create(null);\n        range.start = this.range.start;\n        range.end = this.range.end;\n        range.padFront = this.range.padFront;\n        range.padBehind = this.range.padBehind;\n        return range;\n      }\n    }, {\n      key: \"isBehind\",\n      value: function isBehind() {\n        return this.direction === DIRECTION_TYPE.BEHIND;\n      }\n    }, {\n      key: \"isFront\",\n      value: function isFront() {\n        return this.direction === DIRECTION_TYPE.FRONT;\n      }\n\n      // return start index offset\n    }, {\n      key: \"getOffset\",\n      value: function getOffset(start) {\n        return (start < 1 ? 0 : this.getIndexOffset(start)) + this.param.slotHeaderSize;\n      }\n    }, {\n      key: \"updateParam\",\n      value: function updateParam(key, value) {\n        var _this = this;\n        if (this.param && key in this.param) {\n          // if uniqueIds change, find out deleted id and remove from size map\n          if (key === 'uniqueIds') {\n            this.sizes.forEach(function (v, key) {\n              if (!value.includes(key)) {\n                _this.sizes[\"delete\"](key);\n              }\n            });\n          }\n          this.param[key] = value;\n        }\n      }\n\n      // save each size map by id\n    }, {\n      key: \"saveSize\",\n      value: function saveSize(id, size) {\n        this.sizes.set(id, size);\n\n        // we assume size type is fixed at the beginning and remember first size value\n        // if there is no size value different from this at next comming saving\n        // we think it's a fixed size list, otherwise is dynamic size list\n        if (this.calcType === CALC_TYPE.INIT) {\n          this.fixedSizeValue = size;\n          this.calcType = CALC_TYPE.FIXED;\n        } else if (this.calcType === CALC_TYPE.FIXED && this.fixedSizeValue !== size) {\n          this.calcType = CALC_TYPE.DYNAMIC;\n          // it's no use at all\n          delete this.fixedSizeValue;\n        }\n\n        // calculate the average size only in the first range\n        if (this.calcType !== CALC_TYPE.FIXED && typeof this.firstRangeTotalSize !== 'undefined') {\n          if (this.sizes.size < Math.min(this.param.keeps, this.param.uniqueIds.length)) {\n            this.firstRangeTotalSize = _toConsumableArray(this.sizes.values()).reduce(function (acc, val) {\n              return acc + val;\n            }, 0);\n            this.firstRangeAverageSize = Math.round(this.firstRangeTotalSize / this.sizes.size);\n          } else {\n            // it's done using\n            delete this.firstRangeTotalSize;\n          }\n        }\n      }\n\n      // in some special situation (e.g. length change) we need to update in a row\n      // try goiong to render next range by a leading buffer according to current direction\n    }, {\n      key: \"handleDataSourcesChange\",\n      value: function handleDataSourcesChange() {\n        var start = this.range.start;\n        if (this.isFront()) {\n          start = start - LEADING_BUFFER;\n        } else if (this.isBehind()) {\n          start = start + LEADING_BUFFER;\n        }\n        start = Math.max(start, 0);\n        this.updateRange(this.range.start, this.getEndByStart(start));\n      }\n\n      // when slot size change, we also need force update\n    }, {\n      key: \"handleSlotSizeChange\",\n      value: function handleSlotSizeChange() {\n        this.handleDataSourcesChange();\n      }\n\n      // calculating range on scroll\n    }, {\n      key: \"handleScroll\",\n      value: function handleScroll(offset) {\n        this.direction = offset < this.offset || offset === 0 ? DIRECTION_TYPE.FRONT : DIRECTION_TYPE.BEHIND;\n        this.offset = offset;\n        if (!this.param) {\n          return;\n        }\n        if (this.direction === DIRECTION_TYPE.FRONT) {\n          this.handleFront();\n        } else if (this.direction === DIRECTION_TYPE.BEHIND) {\n          this.handleBehind();\n        }\n      }\n\n      // ----------- public method end -----------\n    }, {\n      key: \"handleFront\",\n      value: function handleFront() {\n        var overs = this.getScrollOvers();\n        // should not change range if start doesn't exceed overs\n        if (overs > this.range.start) {\n          return;\n        }\n\n        // move up start by a buffer length, and make sure its safety\n        var start = Math.max(overs - this.param.buffer, 0);\n        this.checkRange(start, this.getEndByStart(start));\n      }\n    }, {\n      key: \"handleBehind\",\n      value: function handleBehind() {\n        var overs = this.getScrollOvers();\n        // range should not change if scroll overs within buffer\n        if (overs < this.range.start + this.param.buffer) {\n          return;\n        }\n        this.checkRange(overs, this.getEndByStart(overs));\n      }\n\n      // return the pass overs according to current scroll offset\n    }, {\n      key: \"getScrollOvers\",\n      value: function getScrollOvers() {\n        // if slot header exist, we need subtract its size\n        var offset = this.offset - this.param.slotHeaderSize;\n        if (offset <= 0) {\n          return 0;\n        }\n\n        // if is fixed type, that can be easily\n        if (this.isFixedType()) {\n          return Math.floor(offset / this.fixedSizeValue);\n        }\n        var low = 0;\n        var middle = 0;\n        var middleOffset = 0;\n        var high = this.param.uniqueIds.length;\n        while (low <= high) {\n          // this.__bsearchCalls++\n          middle = low + Math.floor((high - low) / 2);\n          middleOffset = this.getIndexOffset(middle);\n          if (middleOffset === offset) {\n            return middle;\n          } else if (middleOffset < offset) {\n            low = middle + 1;\n          } else if (middleOffset > offset) {\n            high = middle - 1;\n          }\n        }\n        return low > 0 ? --low : 0;\n      }\n\n      // return a scroll offset from given index, can efficiency be improved more here?\n      // although the call frequency is very high, its only a superposition of numbers\n    }, {\n      key: \"getIndexOffset\",\n      value: function getIndexOffset(givenIndex) {\n        if (!givenIndex) {\n          return 0;\n        }\n        var offset = 0;\n        var indexSize = 0;\n        for (var index = 0; index < givenIndex; index++) {\n          // this.__getIndexOffsetCalls++\n          indexSize = this.sizes.get(this.param.uniqueIds[index]);\n          offset = offset + (typeof indexSize === 'number' ? indexSize : this.getEstimateSize());\n        }\n        return offset;\n      }\n\n      // is fixed size type\n    }, {\n      key: \"isFixedType\",\n      value: function isFixedType() {\n        return this.calcType === CALC_TYPE.FIXED;\n      }\n\n      // return the real last index\n    }, {\n      key: \"getLastIndex\",\n      value: function getLastIndex() {\n        return this.param.uniqueIds.length - 1;\n      }\n\n      // in some conditions range is broke, we need correct it\n      // and then decide whether need update to next range\n    }, {\n      key: \"checkRange\",\n      value: function checkRange(start, end) {\n        var keeps = this.param.keeps;\n        var total = this.param.uniqueIds.length;\n\n        // datas less than keeps, render all\n        if (total <= keeps) {\n          start = 0;\n          end = this.getLastIndex();\n        } else if (end - start < keeps - 1) {\n          // if range length is less than keeps, corrent it base on end\n          start = end - keeps + 1;\n        }\n        if (this.range.start !== start) {\n          this.updateRange(start, end);\n        }\n      }\n\n      // setting to a new range and rerender\n    }, {\n      key: \"updateRange\",\n      value: function updateRange(start, end) {\n        this.range.start = start;\n        this.range.end = end;\n        this.range.padFront = this.getPadFront();\n        this.range.padBehind = this.getPadBehind();\n        this.callUpdate(this.getRange());\n      }\n\n      // return end base on start\n    }, {\n      key: \"getEndByStart\",\n      value: function getEndByStart(start) {\n        var theoryEnd = start + this.param.keeps - 1;\n        var truelyEnd = Math.min(theoryEnd, this.getLastIndex());\n        return truelyEnd;\n      }\n\n      // return total front offset\n    }, {\n      key: \"getPadFront\",\n      value: function getPadFront() {\n        if (this.isFixedType()) {\n          return this.fixedSizeValue * this.range.start;\n        } else {\n          return this.getIndexOffset(this.range.start);\n        }\n      }\n\n      // return total behind offset\n    }, {\n      key: \"getPadBehind\",\n      value: function getPadBehind() {\n        var end = this.range.end;\n        var lastIndex = this.getLastIndex();\n        if (this.isFixedType()) {\n          return (lastIndex - end) * this.fixedSizeValue;\n        }\n        return (lastIndex - end) * this.getEstimateSize();\n      }\n\n      // get the item estimate size\n    }, {\n      key: \"getEstimateSize\",\n      value: function getEstimateSize() {\n        return this.isFixedType() ? this.fixedSizeValue : this.firstRangeAverageSize || this.param.estimateSize;\n      }\n    }]);\n    return Virtual;\n  }();\n\n  /**\n   * props declaration for default, item and slot component\n   */\n\n  var VirtualProps = {\n    dataKey: {\n      type: [String, Function],\n      required: true\n    },\n    dataSources: {\n      type: Array,\n      required: true\n    },\n    dataComponent: {\n      type: [Object, Function],\n      required: true\n    },\n    keeps: {\n      type: Number,\n      \"default\": 30\n    },\n    extraProps: {\n      type: Object\n    },\n    estimateSize: {\n      type: Number,\n      \"default\": 50\n    },\n    direction: {\n      type: String,\n      \"default\": 'vertical' // the other value is horizontal\n    },\n\n    start: {\n      type: Number,\n      \"default\": 0\n    },\n    offset: {\n      type: Number,\n      \"default\": 0\n    },\n    topThreshold: {\n      type: Number,\n      \"default\": 0\n    },\n    bottomThreshold: {\n      type: Number,\n      \"default\": 0\n    },\n    pageMode: {\n      type: Boolean,\n      \"default\": false\n    },\n    rootTag: {\n      type: String,\n      \"default\": 'div'\n    },\n    wrapTag: {\n      type: String,\n      \"default\": 'div'\n    },\n    wrapClass: {\n      type: String,\n      \"default\": ''\n    },\n    wrapStyle: {\n      type: Object\n    },\n    itemTag: {\n      type: String,\n      \"default\": 'div'\n    },\n    itemClass: {\n      type: String,\n      \"default\": ''\n    },\n    itemClassAdd: {\n      type: Function\n    },\n    itemStyle: {\n      type: Object\n    },\n    headerTag: {\n      type: String,\n      \"default\": 'div'\n    },\n    headerClass: {\n      type: String,\n      \"default\": ''\n    },\n    headerStyle: {\n      type: Object\n    },\n    footerTag: {\n      type: String,\n      \"default\": 'div'\n    },\n    footerClass: {\n      type: String,\n      \"default\": ''\n    },\n    footerStyle: {\n      type: Object\n    },\n    itemScopedSlots: {\n      type: Object\n    }\n  };\n  var ItemProps = {\n    index: {\n      type: Number\n    },\n    event: {\n      type: String\n    },\n    tag: {\n      type: String\n    },\n    horizontal: {\n      type: Boolean\n    },\n    source: {\n      type: Object\n    },\n    component: {\n      type: [Object, Function]\n    },\n    slotComponent: {\n      type: Function\n    },\n    uniqueKey: {\n      type: [String, Number]\n    },\n    extraProps: {\n      type: Object\n    },\n    scopedSlots: {\n      type: Object\n    }\n  };\n  var SlotProps = {\n    event: {\n      type: String\n    },\n    uniqueKey: {\n      type: String\n    },\n    tag: {\n      type: String\n    },\n    horizontal: {\n      type: Boolean\n    }\n  };\n\n  var Wrapper = {\n    created: function created() {\n      this.shapeKey = this.horizontal ? 'offsetWidth' : 'offsetHeight';\n    },\n    mounted: function mounted() {\n      var _this = this;\n      if (typeof ResizeObserver !== 'undefined') {\n        this.resizeObserver = new ResizeObserver(function () {\n          _this.dispatchSizeChange();\n        });\n        this.resizeObserver.observe(this.$el);\n      }\n    },\n    // since componet will be reused, so disptach when updated\n    updated: function updated() {\n      // this.dispatchSizeChange()\n      this.resizeObserver.observe(this.$el);\n    },\n    beforeDestroy: function beforeDestroy() {\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n      }\n    },\n    methods: {\n      getCurrentSize: function getCurrentSize() {\n        return this.$el ? this.$el[this.shapeKey] : 0;\n      },\n      // tell parent current size identify by unqiue key\n      dispatchSizeChange: function dispatchSizeChange() {\n        this.$parent.$emit(this.event, this.uniqueKey, this.getCurrentSize(), this.hasInitial);\n      }\n    }\n  };\n\n  // wrapping for item\n  var Item = Vue.component('virtual-list-item', {\n    mixins: [Wrapper],\n    props: ItemProps,\n    render: function render(h) {\n      var tag = this.tag,\n        component = this.component,\n        _this$extraProps = this.extraProps,\n        extraProps = _this$extraProps === void 0 ? {} : _this$extraProps,\n        index = this.index,\n        source = this.source,\n        _this$scopedSlots = this.scopedSlots,\n        scopedSlots = _this$scopedSlots === void 0 ? {} : _this$scopedSlots,\n        uniqueKey = this.uniqueKey,\n        slotComponent = this.slotComponent;\n      var props = _objectSpread2(_objectSpread2({}, extraProps), {}, {\n        source: source,\n        index: index\n      });\n      return h(tag, {\n        key: uniqueKey,\n        attrs: {\n          role: 'listitem'\n        }\n      }, [slotComponent ? slotComponent({\n        item: source,\n        index: index,\n        scope: props\n      }) : h(component, {\n        props: props,\n        scopedSlots: scopedSlots\n      })]);\n    }\n  });\n\n  // wrapping for slot\n  var Slot = Vue.component('virtual-list-slot', {\n    mixins: [Wrapper],\n    props: SlotProps,\n    render: function render(h) {\n      var tag = this.tag,\n        uniqueKey = this.uniqueKey;\n      return h(tag, {\n        key: uniqueKey,\n        attrs: {\n          role: uniqueKey\n        }\n      }, this.$slots[\"default\"]);\n    }\n  });\n\n  /**\n   * virtual list default component\n   */\n  var EVENT_TYPE = {\n    ITEM: 'item_resize',\n    SLOT: 'slot_resize'\n  };\n  var SLOT_TYPE = {\n    HEADER: 'thead',\n    // string value also use for aria role attribute\n    FOOTER: 'tfoot'\n  };\n  var VirtualList = Vue.component('virtual-list', {\n    props: VirtualProps,\n    data: function data() {\n      return {\n        range: null\n      };\n    },\n    watch: {\n      'dataSources.length': function dataSourcesLength() {\n        this.virtual.updateParam('uniqueIds', this.getUniqueIdFromDataSources());\n        this.virtual.handleDataSourcesChange();\n      },\n      keeps: function keeps(newValue) {\n        this.virtual.updateParam('keeps', newValue);\n        this.virtual.handleSlotSizeChange();\n      },\n      start: function start(newValue) {\n        this.scrollToIndex(newValue);\n      },\n      offset: function offset(newValue) {\n        this.scrollToOffset(newValue);\n      }\n    },\n    created: function created() {\n      this.isHorizontal = this.direction === 'horizontal';\n      this.directionKey = this.isHorizontal ? 'scrollLeft' : 'scrollTop';\n      this.installVirtual();\n\n      // listen item size change\n      this.$on(EVENT_TYPE.ITEM, this.onItemResized);\n\n      // listen slot size change\n      if (this.$slots.header || this.$slots.footer) {\n        this.$on(EVENT_TYPE.SLOT, this.onSlotResized);\n      }\n    },\n    activated: function activated() {\n      // set back offset when awake from keep-alive\n      this.scrollToOffset(this.virtual.offset);\n      if (this.pageMode) {\n        document.addEventListener('scroll', this.onScroll, {\n          passive: false\n        });\n      }\n    },\n    deactivated: function deactivated() {\n      if (this.pageMode) {\n        document.removeEventListener('scroll', this.onScroll);\n      }\n    },\n    mounted: function mounted() {\n      // set position\n      if (this.start) {\n        this.scrollToIndex(this.start);\n      } else if (this.offset) {\n        this.scrollToOffset(this.offset);\n      }\n\n      // in page mode we bind scroll event to document\n      if (this.pageMode) {\n        this.updatePageModeFront();\n        document.addEventListener('scroll', this.onScroll, {\n          passive: false\n        });\n      }\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.virtual.destroy();\n      if (this.pageMode) {\n        document.removeEventListener('scroll', this.onScroll);\n      }\n    },\n    methods: {\n      // get item size by id\n      getSize: function getSize(id) {\n        return this.virtual.sizes.get(id);\n      },\n      // get the total number of stored (rendered) items\n      getSizes: function getSizes() {\n        return this.virtual.sizes.size;\n      },\n      // return current scroll offset\n      getOffset: function getOffset() {\n        if (this.pageMode) {\n          return document.documentElement[this.directionKey] || document.body[this.directionKey];\n        } else {\n          var root = this.$refs.root;\n          return root ? Math.ceil(root[this.directionKey]) : 0;\n        }\n      },\n      // return client viewport size\n      getClientSize: function getClientSize() {\n        var key = this.isHorizontal ? 'clientWidth' : 'clientHeight';\n        if (this.pageMode) {\n          return document.documentElement[key] || document.body[key];\n        } else {\n          var root = this.$refs.root;\n          return root ? Math.ceil(root[key]) : 0;\n        }\n      },\n      // return all scroll size\n      getScrollSize: function getScrollSize() {\n        var key = this.isHorizontal ? 'scrollWidth' : 'scrollHeight';\n        if (this.pageMode) {\n          return document.documentElement[key] || document.body[key];\n        } else {\n          var root = this.$refs.root;\n          return root ? Math.ceil(root[key]) : 0;\n        }\n      },\n      // set current scroll position to a expectant offset\n      scrollToOffset: function scrollToOffset(offset) {\n        if (this.pageMode) {\n          document.body[this.directionKey] = offset;\n          document.documentElement[this.directionKey] = offset;\n        } else {\n          var root = this.$refs.root;\n          if (root) {\n            root[this.directionKey] = offset;\n          }\n        }\n      },\n      // set current scroll position to a expectant index\n      scrollToIndex: function scrollToIndex(index) {\n        // scroll to bottom\n        if (index >= this.dataSources.length - 1) {\n          this.scrollToBottom();\n        } else {\n          var offset = this.virtual.getOffset(index);\n          this.scrollToOffset(offset);\n        }\n      },\n      // set current scroll position to bottom\n      scrollToBottom: function scrollToBottom() {\n        var _this = this;\n        var shepherd = this.$refs.shepherd;\n        if (shepherd) {\n          var offset = shepherd[this.isHorizontal ? 'offsetLeft' : 'offsetTop'];\n          this.scrollToOffset(offset);\n\n          // check if it's really scrolled to the bottom\n          // maybe list doesn't render and calculate to last range\n          // so we need retry in next event loop until it really at bottom\n          setTimeout(function () {\n            if (_this.getOffset() + _this.getClientSize() + 1 < _this.getScrollSize()) {\n              _this.scrollToBottom();\n            }\n          }, 3);\n        }\n      },\n      // when using page mode we need update slot header size manually\n      // taking root offset relative to the browser as slot header size\n      updatePageModeFront: function updatePageModeFront() {\n        var root = this.$refs.root;\n        if (root) {\n          var rect = root.getBoundingClientRect();\n          var defaultView = root.ownerDocument.defaultView;\n          var offsetFront = this.isHorizontal ? rect.left + defaultView.pageXOffset : rect.top + defaultView.pageYOffset;\n          this.virtual.updateParam('slotHeaderSize', offsetFront);\n        }\n      },\n      // reset all state back to initial\n      reset: function reset() {\n        this.virtual.destroy();\n        this.scrollToOffset(0);\n        this.installVirtual();\n      },\n      // ----------- public method end -----------\n      installVirtual: function installVirtual() {\n        this.virtual = new Virtual({\n          slotHeaderSize: 0,\n          slotFooterSize: 0,\n          keeps: this.keeps,\n          estimateSize: this.estimateSize,\n          buffer: Math.round(this.keeps / 3),\n          // recommend for a third of keeps\n          uniqueIds: this.getUniqueIdFromDataSources()\n        }, this.onRangeChanged);\n\n        // sync initial range\n        this.range = this.virtual.getRange();\n      },\n      getUniqueIdFromDataSources: function getUniqueIdFromDataSources() {\n        var dataKey = this.dataKey;\n        return this.dataSources.map(function (dataSource) {\n          return typeof dataKey === 'function' ? dataKey(dataSource) : dataSource[dataKey];\n        });\n      },\n      // event called when each item mounted or size changed\n      onItemResized: function onItemResized(id, size) {\n        this.virtual.saveSize(id, size);\n        this.$emit('resized', id, size);\n      },\n      // event called when slot mounted or size changed\n      onSlotResized: function onSlotResized(type, size, hasInit) {\n        if (type === SLOT_TYPE.HEADER) {\n          this.virtual.updateParam('slotHeaderSize', size);\n        } else if (type === SLOT_TYPE.FOOTER) {\n          this.virtual.updateParam('slotFooterSize', size);\n        }\n        if (hasInit) {\n          this.virtual.handleSlotSizeChange();\n        }\n      },\n      // here is the rerendering entry\n      onRangeChanged: function onRangeChanged(range) {\n        this.range = range;\n      },\n      onScroll: function onScroll(evt) {\n        var offset = this.getOffset();\n        var clientSize = this.getClientSize();\n        var scrollSize = this.getScrollSize();\n\n        // \biOS scroll-spring-back behavior will make direction mistake\n        if (offset < 0 || offset + clientSize > scrollSize + 1 || !scrollSize) {\n          return;\n        }\n        this.virtual.handleScroll(offset);\n        this.emitEvent(offset, clientSize, scrollSize, evt);\n      },\n      // emit event in special position\n      emitEvent: function emitEvent(offset, clientSize, scrollSize, evt) {\n        this.$emit('scroll', evt, this.virtual.getRange());\n        if (this.virtual.isFront() && !!this.dataSources.length && offset - this.topThreshold <= 0) {\n          this.$emit('totop');\n        } else if (this.virtual.isBehind() && offset + clientSize + this.bottomThreshold >= scrollSize) {\n          this.$emit('tobottom');\n        }\n      },\n      // get the real render slots based on range data\n      // in-place patch strategy will try to reuse components as possible\n      // so those components that are reused will not trigger lifecycle mounted\n      getRenderSlots: function getRenderSlots(h) {\n        var slots = [];\n        var _this$range = this.range,\n          start = _this$range.start,\n          end = _this$range.end;\n        var dataSources = this.dataSources,\n          dataKey = this.dataKey,\n          itemClass = this.itemClass,\n          itemTag = this.itemTag,\n          itemStyle = this.itemStyle,\n          isHorizontal = this.isHorizontal,\n          extraProps = this.extraProps,\n          dataComponent = this.dataComponent,\n          itemScopedSlots = this.itemScopedSlots;\n        var slotComponent = this.$scopedSlots && this.$scopedSlots.item;\n        for (var index = start; index <= end; index++) {\n          var dataSource = dataSources[index];\n          if (dataSource) {\n            var uniqueKey = typeof dataKey === 'function' ? dataKey(dataSource) : dataSource[dataKey];\n            if (typeof uniqueKey === 'string' || typeof uniqueKey === 'number') {\n              slots.push(h(Item, {\n                props: {\n                  index: index,\n                  tag: itemTag,\n                  event: EVENT_TYPE.ITEM,\n                  horizontal: isHorizontal,\n                  uniqueKey: uniqueKey,\n                  source: dataSource,\n                  extraProps: extraProps,\n                  component: dataComponent,\n                  slotComponent: slotComponent,\n                  scopedSlots: itemScopedSlots\n                },\n                style: itemStyle,\n                \"class\": \"\".concat(itemClass).concat(this.itemClassAdd ? ' ' + this.itemClassAdd(index) : '')\n              }));\n            } else {\n              console.warn(\"Cannot get the data-key '\".concat(dataKey, \"' from data-sources.\"));\n            }\n          } else {\n            console.warn(\"Cannot get the index '\".concat(index, \"' from data-sources.\"));\n          }\n        }\n        return slots;\n      }\n    },\n    // render function, a closer-to-the-compiler alternative to templates\n    // https://vuejs.org/v2/guide/render-function.html#The-Data-Object-In-Depth\n    render: function render(h) {\n      var _this$$slots = this.$slots,\n        header = _this$$slots.header,\n        footer = _this$$slots.footer;\n      var _this$range2 = this.range,\n        padFront = _this$range2.padFront,\n        padBehind = _this$range2.padBehind;\n      var isHorizontal = this.isHorizontal,\n        pageMode = this.pageMode,\n        rootTag = this.rootTag,\n        wrapTag = this.wrapTag,\n        wrapClass = this.wrapClass,\n        wrapStyle = this.wrapStyle,\n        headerTag = this.headerTag,\n        headerClass = this.headerClass,\n        headerStyle = this.headerStyle,\n        footerTag = this.footerTag,\n        footerClass = this.footerClass,\n        footerStyle = this.footerStyle;\n      var paddingStyle = {\n        padding: isHorizontal ? \"0px \".concat(padBehind, \"px 0px \").concat(padFront, \"px\") : \"\".concat(padFront, \"px 0px \").concat(padBehind, \"px\")\n      };\n      var wrapperStyle = wrapStyle ? Object.assign({}, wrapStyle, paddingStyle) : paddingStyle;\n      return h(rootTag, {\n        ref: 'root',\n        on: {\n          '&scroll': !pageMode && this.onScroll\n        }\n      }, [\n      // header slot\n      header ? h(Slot, {\n        \"class\": headerClass,\n        style: headerStyle,\n        props: {\n          tag: headerTag,\n          event: EVENT_TYPE.SLOT,\n          uniqueKey: SLOT_TYPE.HEADER\n        }\n      }, header) : null,\n      // main list\n      h(wrapTag, {\n        \"class\": wrapClass,\n        attrs: {\n          role: 'group'\n        },\n        style: wrapperStyle\n      }, this.getRenderSlots(h)),\n      // footer slot\n      footer ? h(Slot, {\n        \"class\": footerClass,\n        style: footerStyle,\n        props: {\n          tag: footerTag,\n          event: EVENT_TYPE.SLOT,\n          uniqueKey: SLOT_TYPE.FOOTER\n        }\n      }, footer) : null,\n      // an empty element use to scroll to bottom\n      h('div', {\n        ref: 'shepherd',\n        style: {\n          width: isHorizontal ? '0px' : '100%',\n          height: isHorizontal ? '100%' : '0px'\n        }\n      })]);\n    }\n  });\n\n  return VirtualList;\n\n})));\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"home\"},[_c('div',{staticClass:\"sidebar\",style:({ width: _vm.sidebarWidth + 'px' })},[_c('v-tabs',{staticClass:\"sidebar-tabs\",attrs:{\"vertical\":\"\"},model:{value:(_vm.tab),callback:function ($$v) {_vm.tab=$$v},expression:\"tab\"}},[_c('div',{staticClass:\"tab-buttons\"},_vm._l((_vm.tabList),function(item){return _c('v-tab',{key:item.text,staticClass:\"tab-button\"},[_c('v-icon',[_vm._v(_vm._s(item.icon))])],1)}),1),_c('div',{staticClass:\"sidebar-actions\"},[_c('span',{staticClass:\"action-icon\"},[_c('v-icon',[_vm._v(\"mdi-redo\")])],1),_c('span',{staticClass:\"action-icon\"},[_c('v-icon',[_vm._v(\"mdi-undo\")])],1),_c('hr',{staticClass:\"action-divider\"}),_c('span',{staticClass:\"action-icon\"},[_c('v-icon',[_vm._v(\"mdi-launch\")])],1)])]),_c('v-tabs-items',{staticClass:\"sidebar-content\",attrs:{\"reverse\":\"\"},model:{value:(_vm.tab),callback:function ($$v) {_vm.tab=$$v},expression:\"tab\"}},_vm._l((_vm.tabList),function(item){return _c('v-tab-item',{key:item.text},[_c('v-card',{staticClass:\"full-height\",attrs:{\"color\":\"basil\",\"flat\":\"\"}},[_c(item.component,{tag:\"component\",on:{\"getType\":_vm.getType,\"getHover\":_vm.getHover,\"getGeneExp\":_vm.getGeneExp,\"getColorBy\":_vm.getColorBy,\"changeLayout\":_vm.changeLayout,\"currentRangeSelected\":_vm.getRangeSelected,\"panelStateChange\":_vm.handlePanelStateChange,\"dataset-changed\":_vm.handleDatasetChanged}})],1)],1)}),1),(!_vm.isPanelOpen)?_c('div',{staticClass:\"resize-handle\",on:{\"mousedown\":_vm.initResize}}):_vm._e()],1),_c('div',{key:_vm.flag,staticClass:\"visualization-area\",class:_vm.gridClass},_vm._l((_vm.datasetList),function(item,i){return _c('SingleCellGraphVue',{key:_vm.datasetList[i],staticClass:\"grid-item\",attrs:{\"summaryData\":_vm.summaryData,\"isDelete\":_vm.signDelete,\"currentIndex\":i,\"classInfo\":_vm.classInfo,\"datasetType\":_vm.datasetList[i]},on:{\"deleteGrap\":_vm.deleteGrap}})}),1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"tab-panel\",staticStyle:{\"position\":\"relative\",\"overflow\":\"visible\"}},[_c('div',{staticClass:\"vm-header br\"},[_c('p',{staticStyle:{\"font-size\":\"14px\",\"margin\":\"10px 0\"}},[_vm._v(\"MANAGE LAYOUT\")]),_c('p',{staticStyle:{\"font-weight\":\"700\",\"font-size\":\"14px\",\"color\":\"#646465\"}},[_vm._v(\" Current Views \")]),_c('p',{staticStyle:{\"font-size\":\"14px\",\"margin\":\"5px 0\"}},[_vm._v(\"1 out of 4\")]),(_vm.isConfigLoading)?_c('div',{staticStyle:{\"font-size\":\"12px\",\"color\":\"#999\",\"margin\":\"5px 0\"}},[_vm._v(\" Loading datasets configuration... \")]):_vm._e()]),_vm._m(0),_vm._l((_vm.allVisualization),function(item,index){return _c('div',{key:'e'+index,staticClass:\"br row4 hover-active\",on:{\"click\":_vm.openEdit}},[_c('div',{staticClass:\"color-info\"},[_c('span',{staticClass:\"color-block\"}),_c('div',{staticClass:\"vm-color-text\",staticStyle:{\"text-align\":\"left\",\"margin-left\":\"20px\"}},[_c('p',[_vm._v(_vm._s(_vm.currentDatasetInfo.title))]),_c('p',{staticStyle:{\"color\":\"#898989\"}},[_vm._v(_vm._s(_vm.currentDatasetInfo.description))]),_c('p',{staticStyle:{\"color\":\"#898989\",\"font-size\":\"12px\",\"letter-spacing\":\"1px\"}},[_vm._v(\" \"+_vm._s(_vm.currentDatasetInfo.cellsDisplay)+\" \"),_c('span',{staticStyle:{\"font-weight\":\"700\"}},[_vm._v(\"·\")]),_vm._v(\" \"+_vm._s(_vm.currentDatasetInfo.colorField)+\" \")])])]),_c('span',[_c('v-icon',{staticClass:\"arrow-right\"},[_vm._v(\"mdi-chevron-right\")])],1)])}),(_vm.allVisualization.length<4)?_c('div',{staticClass:\"br row4 hover-active\",on:{\"click\":_vm.openAdd}},[_c('p',{staticStyle:{\"width\":\"80%\",\"margin\":\"0 auto\",\"text-align\":\"left\"}},[_c('v-icon',{staticStyle:{\"margin-right\":\"15px\",\"color\":\"#141414\"}},[_vm._v(\"mdi-plus\")]),_c('span',[_vm._v(\"Add Visualization\")])],1),_c('span',[_c('v-icon',{staticClass:\"arrow-right\"},[_vm._v(\"mdi-chevron-right\")])],1)]):_vm._e(),_vm._l(((4-_vm.allVisualization.length-1)>0?4-_vm.allVisualization.length-1:0),function(i){return _c('div',{key:'r'+i,staticClass:\"br row4 row5\"},[_c('p',[_vm._v(\"None\")])])}),_c('div',{staticClass:\"expand-panel\"}),(_vm.showEditClass)?_c('div',{staticClass:\"vm-row2-click-panel\"},[_c('v-row',{attrs:{\"justify\":\"space-between\"}},[_c('v-col',{attrs:{\"cols\":\"3\"}},[_c('h3',{staticStyle:{\"font-weight\":\"400\",\"text-align\":\"left\"}},[_vm._v(\"Edit\")])]),_c('v-col',{attrs:{\"cols\":\"3\"}},[_c('v-icon',{staticClass:\"icon-set icon10\",on:{\"click\":function($event){_vm.showEditClass=!_vm.showEditClass}}},[_vm._v(\"mdi-close\")])],1)],1),_c('v-row',[_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('p',{staticClass:\"edit-title\"},[_vm._v(\"Dataset\")]),_c('v-autocomplete',{attrs:{\"items\":_vm.datasetOptions,\"dense\":\"\",\"clearable\":\"\",\"item-text\":\"text\",\"item-value\":\"value\"},on:{\"change\":_vm.handleDatasetChange},model:{value:(_vm.selectedDataset),callback:function ($$v) {_vm.selectedDataset=$$v},expression:\"selectedDataset\"}}),_c('p',{staticClass:\"edit-title\"},[_vm._v(\"Visualization\")]),_c('v-autocomplete',{attrs:{\"items\":_vm.visualList,\"dense\":\"\",\"clearable\":\"\",\"item-text\":\"label\",\"item-value\":\"value\"},model:{value:(_vm.selectVisual),callback:function ($$v) {_vm.selectVisual=$$v},expression:\"selectVisual\"}}),_c('div',{staticStyle:{\"text-align\":\"right\"}},[_c('v-btn',{staticStyle:{\"margin-right\":\"10px\"},attrs:{\"text\":\"\",\"color\":\"#334c67\"}},[_vm._v(\" duplicate \")]),_c('v-btn',{attrs:{\"depressed\":\"\",\"disabled\":\"\"}},[_vm._v(\" remove \")])],1)],1)],1),_c('v-row',{staticStyle:{\"padding\":\"0 0 0 20px\"}},[_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-subheader',{staticStyle:{\"color\":\"#000\"}},[_vm._v(\"RESOLUTION / PERFORMANCE\")]),_c('v-slider',{attrs:{\"tick-labels\":_vm.ticksLabels,\"thumb-color\":\"#334c67\",\"track-color\":\"#b1bbc5\",\"track-fill-color\":\"#334c67\",\"max\":3,\"step\":\"1\",\"ticks\":\"always\",\"tick-size\":\"2\"},model:{value:(_vm.resulution),callback:function ($$v) {_vm.resulution=$$v},expression:\"resulution\"}})],1),_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-subheader',{staticStyle:{\"color\":\"#000\"}},[_vm._v(\"POINT SIZE\")]),_c('v-slider',{attrs:{\"tick-labels\":['Small', '', 'Medium', '', 'Large'],\"thumb-color\":\"#334c67\",\"track-color\":\"#b1bbc5\",\"track-fill-color\":\"#334c67\",\"max\":4,\"step\":\"1\",\"ticks\":\"always\",\"tick-size\":\"2\"},model:{value:(_vm.pointSize),callback:function ($$v) {_vm.pointSize=$$v},expression:\"pointSize\"}})],1),_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-subheader',{staticStyle:{\"color\":\"#000\"}},[_vm._v(\"FILTER\")]),_c('v-checkbox',{attrs:{\"label\":\"Transparent filtered cells\"},model:{value:(_vm.checkbox),callback:function ($$v) {_vm.checkbox=$$v},expression:\"checkbox\"}}),(_vm.checkbox)?_c('v-slider',{attrs:{\"tick-labels\":['0','','1'],\"thumb-color\":\"#334c67\",\"track-color\":\"#b1bbc5\",\"track-fill-color\":\"#334c67\",\"max\":2,\"step\":\"1\",\"ticks\":\"always\",\"tick-size\":\"2\"},model:{value:(_vm.filteredCell),callback:function ($$v) {_vm.filteredCell=$$v},expression:\"filteredCell\"}}):_vm._e()],1)],1)],1):_vm._e(),(_vm.showAddVis)?_c('div',{staticClass:\"vm-row2-click-panel\"},[_c('v-row',{attrs:{\"justify\":\"space-between\"}},[_c('v-col',{attrs:{\"cols\":\"3\"}},[_c('h3',{staticStyle:{\"font-weight\":\"400\",\"text-align\":\"left\"}},[_vm._v(\"Add\")])]),_c('v-col',{attrs:{\"cols\":\"3\"}},[_c('v-icon',{staticClass:\"icon-set icon10\",on:{\"click\":function($event){_vm.showAddVis=!_vm.showAddVis}}},[_vm._v(\"mdi-close\")])],1)],1),_c('v-row',[_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-autocomplete',{attrs:{\"items\":_vm.datasetOptions,\"dense\":\"\",\"placeholder\":\"Search\",\"label\":\"Dataset\",\"clearable\":\"\",\"item-text\":\"text\",\"item-value\":\"value\"},on:{\"change\":_vm.changeAddDataset},model:{value:(_vm.newSelectDataset),callback:function ($$v) {_vm.newSelectDataset=$$v},expression:\"newSelectDataset\"}})],1),_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('v-autocomplete',{attrs:{\"items\":_vm.newVisualList,\"dense\":\"\",\"placeholder\":\"Search\",\"label\":\"Visualization\",\"clearable\":\"\",\"item-text\":\"label\",\"item-value\":\"value\"},model:{value:(_vm.newSelectVisual),callback:function ($$v) {_vm.newSelectVisual=$$v},expression:\"newSelectVisual\"}})],1),_c('v-col',{attrs:{\"cols\":\"12\"}},[_c('div',{staticStyle:{\"text-align\":\"right\"}},[_c('v-btn',{staticStyle:{\"margin-right\":\"10px\"},attrs:{\"text\":\"\",\"color\":\"#334c67\"}},[_vm._v(\" duplicate \")]),_c('v-btn',{attrs:{\"depressed\":\"\",\"disabled\":\"\"}},[_vm._v(\" remove \")])],1)])],1)],1):_vm._e()],2)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"br row2\"},[_c('div',{staticClass:\"color-main\"},[_c('span',{staticClass:\"color-block\"})])])\n}]\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"tab-panel\" style=\"position: relative;overflow:visible;\">\n    <div class=\"vm-header br\">\n      <p style=\"font-size: 14px; margin: 10px 0\">MANAGE LAYOUT</p>\n      <p style=\"font-weight: 700; font-size: 14px; color: #646465\">\n        Current Views\n      </p>\n      <p style=\"font-size: 14px; margin: 5px 0\">1 out of 4</p>\n      <div v-if=\"isConfigLoading\" style=\"font-size: 12px; color: #999; margin: 5px 0\">\n        Loading datasets configuration...\n      </div>\n    </div>\n    \n    <div class=\"br row2\">\n      <div class=\"color-main\">\n        <span class=\"color-block\"></span>\n      </div>\n    </div>\n    \n    <div class=\"br row4 hover-active\" @click=\"openEdit\" v-for=\"(item,index) in allVisualization\" :key=\"'e'+index\">\n      <div class=\"color-info\">\n        <span class=\"color-block\"></span>\n        <div style=\"text-align: left; margin-left: 20px\" class=\"vm-color-text\">\n          <p>{{ currentDatasetInfo.title }}</p>\n          <p style=\"color: #898989\">{{ currentDatasetInfo.description }}</p>\n          <p style=\"color: #898989; font-size: 12px; letter-spacing: 1px\">\n            {{ currentDatasetInfo.cellsDisplay }} <span style=\"font-weight: 700\">·</span> {{ currentDatasetInfo.colorField }}\n          </p>\n        </div>\n      </div>\n      <span>\n        <v-icon class=\"arrow-right\">mdi-chevron-right</v-icon>\n      </span>\n    </div>\n    \n    <div class=\"br row4 hover-active\" v-if=\"allVisualization.length<4\" @click=\"openAdd\">\n      <p style=\"width: 80%; margin: 0 auto; text-align: left\">\n        <v-icon style=\"margin-right: 15px; color: #141414\">mdi-plus</v-icon>\n        <span>Add Visualization</span>\n      </p>\n      <span>\n        <v-icon class=\"arrow-right\">mdi-chevron-right</v-icon>\n      </span>\n    </div>\n    <div class=\"br row4 row5\" v-for=\"i in (4-allVisualization.length-1)>0?4-allVisualization.length-1:0\" :key=\"'r'+i\">\n      <p>None</p>\n    </div>\n    <div class=\"expand-panel\"></div>\n    \n    <!-- 编辑面板 -->\n    <div class=\"vm-row2-click-panel\" v-if=\"showEditClass\">\n      <v-row justify=\"space-between\">\n        <v-col cols=\"3\">\n          <h3 style=\"font-weight: 400; text-align: left\">Edit</h3>\n        </v-col>\n        <v-col cols=\"3\">\n          <v-icon class=\"icon-set icon10\" @click=\"showEditClass=!showEditClass\">mdi-close</v-icon>\n        </v-col>\n      </v-row>\n      <v-row>\n        <v-col cols=\"12\">\n          <p class=\"edit-title\">Dataset</p>\n          <v-autocomplete\n            v-model=\"selectedDataset\"\n            :items=\"datasetOptions\"\n            dense\n            clearable\n            item-text=\"text\"\n            item-value=\"value\"\n            @change=\"handleDatasetChange\"\n          ></v-autocomplete>\n          <p class=\"edit-title\">Visualization</p>\n          <v-autocomplete\n            v-model=\"selectVisual\"\n            :items=\"visualList\"\n            dense\n            clearable\n             item-text=\"label\"\n            item-value=\"value\"\n          ></v-autocomplete>\n          <div style=\"text-align: right\">\n            <v-btn text style=\"margin-right: 10px\" color=\"#334c67\">\n              duplicate\n            </v-btn>\n            <v-btn depressed disabled> remove </v-btn>\n          </div>\n        </v-col>\n      </v-row>\n      <v-row style=\"padding: 0 0 0 20px\">\n        <v-col cols=\"12\">\n          <v-subheader style=\"color: #000\">RESOLUTION / PERFORMANCE</v-subheader>\n          <v-slider\n            v-model=\"resulution\"\n            :tick-labels=\"ticksLabels\"\n            thumb-color=\"#334c67\"\n            track-color=\"#b1bbc5\"\n            track-fill-color=\"#334c67\"\n            :max=\"3\"\n            step=\"1\"\n            ticks=\"always\"\n            tick-size=\"2\"\n          ></v-slider>\n        </v-col>\n        <v-col cols=\"12\">\n          <v-subheader style=\"color: #000\">POINT SIZE</v-subheader>\n          <v-slider\n            v-model=\"pointSize\"\n            :tick-labels=\"['Small', '', 'Medium', '', 'Large']\"\n            thumb-color=\"#334c67\"\n            track-color=\"#b1bbc5\"\n            track-fill-color=\"#334c67\"\n            :max=\"4\"\n            step=\"1\"\n            ticks=\"always\"\n            tick-size=\"2\"\n          ></v-slider>\n        </v-col>\n        <v-col cols=\"12\">\n          <v-subheader style=\"color: #000\">FILTER</v-subheader>\n          <v-checkbox\n            v-model=\"checkbox\"\n            label=\"Transparent filtered cells\"\n          ></v-checkbox>\n           <v-slider\n           v-if=\"checkbox\"\n            v-model=\"filteredCell\"\n            :tick-labels=\"['0','','1']\"\n            thumb-color=\"#334c67\"\n            track-color=\"#b1bbc5\"\n            track-fill-color=\"#334c67\"\n            :max=\"2\"\n            step=\"1\"\n            ticks=\"always\"\n            tick-size=\"2\"\n          ></v-slider>\n        </v-col>\n      </v-row>\n    </div>\n    \n    <!-- 添加可视化面板 -->\n <div class=\"vm-row2-click-panel\" v-if=\"showAddVis\">\n      <v-row justify=\"space-between\">\n        <v-col cols=\"3\">\n          <h3 style=\"font-weight: 400; text-align: left\">Add</h3>\n        </v-col>\n        <v-col cols=\"3\">\n          <v-icon class=\"icon-set icon10\" @click=\"showAddVis=!showAddVis\">mdi-close</v-icon>\n        </v-col>\n      </v-row>\n      <v-row>\n        <v-col cols=\"12\">\n          <v-autocomplete\n            v-model=\"newSelectDataset\"\n            :items=\"datasetOptions\"\n            dense\n            placeholder=\"Search\"\n            label=\"Dataset\"\n            clearable\n            item-text=\"text\"\n            item-value=\"value\"\n             @change=\"changeAddDataset\"\n          ></v-autocomplete>\n        </v-col>\n        <v-col cols=\"12\">\n          <v-autocomplete\n            v-model=\"newSelectVisual\"\n            :items=\"newVisualList\"\n            dense\n            placeholder=\"Search\"\n            label=\"Visualization\"\n            clearable\n               item-text=\"label\"\n            item-value=\"value\"\n          ></v-autocomplete>\n        </v-col>\n         <v-col cols=\"12\">\n           <div style=\"text-align: right\">\n            <v-btn text style=\"margin-right: 10px\" color=\"#334c67\">\n              duplicate\n            </v-btn>\n            <v-btn depressed disabled> remove </v-btn>\n          </div>\n         </v-col>\n      </v-row>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex';\nimport { \n  setDataset, \n  getDataset, \n  buildDatasetPath, \n  loadDatasetsConfig,\n  getDatasetsConfig,\n  getDatasetInfo,\n  initializeDatasetConfig\n} from '@/api/config';\n\nexport default {\n  name: \"ViewManager\",\n  data: () => ({\n    seasons: [\"Winter\", \"Spring\", \"Summer\", \"Fall\"],\n    icons: [\"mdi-snowflake\", \"mdi-leaf\", \"mdi-fire\", \"mdi-water\"],\n    ticksLabels: [\"Low / Fast\", \"\", \"\", \"High / Show\"],\n    pointSize: 1,\n    resulution: 0,\n    filteredCell: 1,\n    checkbox: false,\n    showEditClass: false,\n    showAddVis: false,\n    selectDataset: \"single\",\n    \n    // 数据集切换配置\n    selectedDataset: null, // 将在mounted中初始化\n    isDatasetLoading: false,\n    datasetInfoCache: new Map(),\n    \n    // 动态数据集选项 - 将从配置文件加载\n    datasetOptions: [],\n    isConfigLoading: true,\n    \n    // 可视化选项 - 将从配置动态生成\n    visualList: [],\n    selectVisual: 'umap',\n    newSelectDataset: '', \n    newSelectVisual: '', \n    newVisualList: [],\n    allVisualization: [{\n      visual: 'umap'\n    }]\n  }),\n  \n  computed: {\n    ...mapState('cellData', [\n      'datasetList'\n    ]),\n    \n    /**\n     * 当前数据集信息 - 基于动态配置\n     */\n    currentDatasetInfo() {\n      const currentOption = this.datasetOptions.find(opt => opt.value === this.selectedDataset);\n      if (currentOption && currentOption.info) {\n        const config = currentOption.config;\n        const info = currentOption.info;\n        \n        return {\n          title: `${config.displayName || config.name}`,\n          description: config.description || `${config.name}`,\n          cellsDisplay: info ? this.formatNumber(info.total_cells) + ' cells' : \n                       config.metadata?.estimatedCells ? this.formatNumber(config.metadata.estimatedCells) + ' cells' : \n                       'Unknown cells',\n          colorField: 'Class'\n        };\n      }\n      \n      // 默认信息\n      return {\n      };\n    }\n  },\n  \n  async mounted() {\n    // 监听数据集切换事件\n    if (typeof window !== 'undefined') {\n      window.addEventListener('datasetChanged', this.handleDatasetChangedEvent);\n    }\n    \n    // 初始化动态配置\n    await this.initializeDynamicConfig();\n    \n    // 加载所有数据集信息\n    await this.loadAllDatasetInfo();\n  },\n  \n  beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('datasetChanged', this.handleDatasetChangedEvent);\n    }\n  },\n  \n  methods: {\n    ...mapActions('cellData', [\n      'loadFieldsInfo',\n      'switchDataSource'\n    ]),\n    \n    /**\n     * 初始化动态配置\n     */\n    async initializeDynamicConfig() {\n      try {\n        this.isConfigLoading = true;\n        \n        // 确保配置已初始化\n        await initializeDatasetConfig();\n        \n        // 获取配置\n        const config = getDatasetsConfig();\n        if (!config) {\n          throw new Error('无法获取数据集配置');\n        }\n        \n        // 构建数据集选项\n        this.datasetOptions = config.datasets.map(dataset => ({\n          text: dataset.displayName || dataset.name,\n          value: dataset.id,\n          config: dataset,\n          info: null // 将在loadAllDatasetInfo中填充\n        }));\n        \n        // 构建可视化选项\n        this.buildVisualizationOptions(config);\n        \n        // 更新当前选择的数据集\n        const currentDataset = getDataset();\n        // 确保当前数据集在可用选项中存在\n        if (currentDataset && this.datasetOptions.find(opt => opt.value === currentDataset)) {\n          this.selectedDataset = currentDataset;\n        } else {\n          // 如果当前数据集不在选项中，使用配置的默认数据集\n          this.selectedDataset = config.defaultDataset || (this.datasetOptions.length > 0 ? this.datasetOptions[0].value : null);\n        }\n        \n        console.log('动态配置初始化完成:', {\n          datasets: this.datasetOptions.length,\n          currentDataset: this.selectedDataset,\n          configDefault: config.defaultDataset,\n          availableDatasets: this.datasetOptions.map(opt => opt.value)\n        });\n        \n      } catch (error) {\n        console.error('动态配置初始化失败:', error);\n        \n        // 尝试直接加载配置文件作为回退\n        try {\n          console.warn('尝试直接加载datasets_config.json作为回退...');\n          const config = await loadDatasetsConfig();\n          \n          if (config && config.datasets) {\n            // 使用从配置文件加载的实际数据\n            this.datasetOptions = config.datasets.map(dataset => ({\n              text: dataset.displayName || dataset.name,\n              value: dataset.id,\n              config: dataset,\n              info: null\n            }));\n            \n            this.buildVisualizationOptions(config);\n            \n            // 设置默认数据集\n            this.selectedDataset = config.defaultDataset || (config.datasets.length > 0 ? config.datasets[0].id : null);\n            \n            console.log('使用配置文件回退方案成功:', {\n              datasets: this.datasetOptions.length,\n              defaultDataset: this.selectedDataset\n            });\n          } else {\n            throw new Error('配置文件格式无效');\n          }\n        } catch (fallbackError) {\n          console.error('回退方案也失败，使用硬编码配置:', fallbackError);\n          \n          // 最后的回退：使用硬编码配置\n          this.datasetOptions = [\n            {\n              text: 'Single Outputs scRNAseq',\n              value: 'Tumour',\n              config: {\n                id: 'Tumour',\n                name: 'Tumour',\n                displayName: 'Single Outputs scRNAseq',\n                description: 'Main single cell RNA-seq dataset',\n                supportedVisualizations: ['tsne', 'umap', 'pca']\n              },\n              info: null\n            },\n            {\n              text: 'Single Outputs1 scRNAseq',\n              value: 'mouse',\n              config: {\n                id: 'mouse',\n                name: 'mouse',\n                displayName: 'Single Outputs1 scRNAseq',\n                description: 'Alternative single cell RNA-seq dataset',\n                supportedVisualizations: ['tsne', 'umap', 'pca']\n              },\n              info: null\n            }\n          ];\n          \n          this.selectedDataset = 'Tumour'; // 与配置文件保持一致\n          \n          this.buildVisualizationOptions({\n            visualizations: {\n              tsne: { label: 't-SNE' },\n              umap: { label: 'UMAP' },\n              pca: { label: 'PCA' }\n            }\n          });\n        }\n        \n      } finally {\n        this.isConfigLoading = false;\n      }\n    },\n    \n    /**\n     * 构建可视化选项\n     */\n    buildVisualizationOptions(config) {\n      const visualizations = config.visualizations || {\n        tsne: { label: 't-SNE', description: 't-Distributed Stochastic Neighbor Embedding' },\n        umap: { label: 'UMAP', description: 'Uniform Manifold Approximation and Projection' },\n        pca: { label: 'PCA', description: 'Principal Component Analysis' }\n      };\n      \n      // 构建全局可视化列表\n      this.visualList = Object.entries(visualizations).map(([key, value]) => ({\n        label: value.label || key.toUpperCase(),\n        value: key\n      }));\n      \n      this.newVisualList = [...this.visualList];\n      \n      // 设置默认选择\n      if (!this.selectVisual && this.visualList.length > 0) {\n        this.selectVisual = this.visualList.find(v => v.value === 'umap')?.value || this.visualList[0].value;\n      }\n    },\n    \n         /**\n      * 处理数据集切换\n      */\n     async handleDatasetChange(newDataset) {\n       if (this.isDatasetLoading) return;\n       this.showEditClass = false;\n       this.isDatasetLoading = true;\n       \n       try {\n         console.log(`ViewManager: 切换数据集到 ${newDataset}`);\n         \n         // 更新全局数据集配置\n         setDataset(newDataset);\n         \n         // 通过全局事件通知所有组件数据集已切换\n         if (typeof window !== 'undefined') {\n           window.dispatchEvent(new CustomEvent('datasetChanged', {\n             detail: { dataset: newDataset }\n           }));\n         }\n         \n         // 通知父组件数据集已切换\n         this.$emit('dataset-changed', {\n           dataset: newDataset,\n           info: this.getDatasetInfo(newDataset)\n         });\n         \n         console.log(`已切换到数据集: ${this.getDatasetDisplayName(newDataset)}`);\n         \n       } catch (error) {\n         console.error('ViewManager: 切换数据集失败:', error);\n         // 恢复之前的选择\n         this.selectedDataset = getDataset();\n       } finally {\n         this.isDatasetLoading = false;\n       }\n     },\n    \n    /**\n     * 处理数据集切换事件\n     */\n    handleDatasetChangedEvent(event) {\n      this.selectedDataset = event.detail.dataset;\n    },\n    \n    /**\n     * 加载所有数据集信息\n     */\n    async loadAllDatasetInfo() {\n      if (!this.datasetOptions || this.datasetOptions.length === 0) {\n        console.warn('没有可用的数据集选项');\n        return;\n      }\n      \n      console.log('开始加载数据集信息...');\n      \n      const loadPromises = this.datasetOptions.map(async (option) => {\n        try {\n          const info = await this.loadDatasetInfo(option.value);\n          option.info = info;\n          console.log(`数据集 ${option.value} 信息加载成功:`, info);\n        } catch (error) {\n          console.warn(`加载数据集信息失败: ${option.value}`, error);\n          // 使用配置中的估算值作为回退\n          if (option.config && option.config.metadata && option.config.metadata.estimatedCells) {\n            option.info = {\n              total_cells: option.config.metadata.estimatedCells,\n              estimated: true\n            };\n          }\n        }\n      });\n      \n      await Promise.all(loadPromises);\n      console.log('所有数据集信息加载完成');\n    },\n    \n    /**\n     * 加载指定数据集信息\n     */\n    async loadDatasetInfo(datasetType) {\n      // 检查缓存\n      if (this.datasetInfoCache.has(datasetType)) {\n        return this.datasetInfoCache.get(datasetType);\n      }\n      \n      try {\n        const matrixInfoPath = buildDatasetPath('matrix_info.json', datasetType);\n        const response = await fetch(matrixInfoPath);\n        \n        if (response.ok) {\n          const info = await response.json();\n          this.datasetInfoCache.set(datasetType, info);\n          return info;\n        } else {\n          throw new Error(`HTTP ${response.status}`);\n        }\n      } catch (error) {\n        console.error(`加载数据集信息失败: ${datasetType}`, error);\n        return null;\n      }\n    },\n    \n    /**\n     * 获取数据集信息\n     */\n    getDatasetInfo(datasetType) {\n      const option = this.datasetOptions.find(opt => opt.value === datasetType);\n      return option ? option.info : null;\n    },\n    \n    /**\n     * 获取数据集显示名称\n     */\n    getDatasetDisplayName(datasetType) {\n      const option = this.datasetOptions.find(opt => opt.value === datasetType);\n      return option ? option.text : datasetType;\n    },\n    \n    /**\n     * 获取数据集支持的可视化选项\n     */\n    getDatasetVisualizationOptions(datasetType) {\n      const option = this.datasetOptions.find(opt => opt.value === datasetType);\n      if (option && option.config && option.config.supportedVisualizations) {\n        return this.visualList.filter(vis => \n          option.config.supportedVisualizations.includes(vis.value)\n        );\n      }\n      return this.visualList; // 返回所有选项作为默认\n    },\n    \n    /**\n     * 格式化数字显示\n     */\n    formatNumber(num) {\n      if (!num) return '0';\n      if (num >= 1000000) {\n        return (num / 1000000).toFixed(1) + 'M';\n      } else if (num >= 1000) {\n        return (num / 1000).toFixed(1) + 'K';\n      }\n      return num.toString();\n    },\n    \n         // 原有方法保持兼容性\n    season(val) {\n      return this.icons[val];\n    },\n    \n    /**\n     * 处理编辑面板中的数据集变更\n     */\n    changeDataset() {\n      // 获取当前数据集支持的可视化选项\n      const supportedVisualizations = this.getDatasetVisualizationOptions(this.selectedDataset);\n      this.visualList = supportedVisualizations;\n      \n      // 设置默认可视化选项\n      if (supportedVisualizations.length > 0) {\n        const currentDatasetOption = this.datasetOptions.find(opt => opt.value === this.selectedDataset);\n        const defaultVis = currentDatasetOption?.config?.defaultVisualization || 'umap';\n        \n        this.selectVisual = supportedVisualizations.find(v => v.value === defaultVis)?.value || \n                           supportedVisualizations[0].value;\n      }\n      \n      console.log('数据集变更:', {\n        dataset: this.selectedDataset,\n        supportedVisualizations: supportedVisualizations.map(v => v.value),\n        selectedVisualization: this.selectVisual\n      });\n    },\n    \n    /**\n     * 处理添加可视化面板中的数据集变更\n     */\n    changeAddDataset() {\n      // 获取新选择数据集支持的可视化选项\n      const supportedVisualizations = this.getDatasetVisualizationOptions(this.newSelectDataset);\n      this.newVisualList = supportedVisualizations;\n      \n      // 设置默认可视化选项\n      if (supportedVisualizations.length > 0) {\n        const newDatasetOption = this.datasetOptions.find(opt => opt.value === this.newSelectDataset);\n        const defaultVis = newDatasetOption?.config?.defaultVisualization || 'umap';\n        \n        this.newSelectVisual = supportedVisualizations.find(v => v.value === defaultVis)?.value || \n                               supportedVisualizations[0].value;\n      }\n      \n      // 添加到可视化列表\n      this.allVisualization.unshift({\n        dataset: this.newSelectDataset,\n        visual: this.newSelectVisual\n      });\n      \n      // 关闭面板并重置\n      this.showAddVis = false;\n      this.newSelectVisual = '';\n      this.newSelectDataset = '';\n      \n      this.$emit('changeLayout', this.allVisualization);\n    },\n    \n    openEdit() {\n      this.showEditClass = true;\n      this.showAddVis = false;\n  },\n    \n    openAdd() {\n      this.showAddVis = true;\n      this.showEditClass = false;\n  }\n  }\n};\n</script>\n\n<style scoped lang=\"scss\">\n.row2 {\n  padding: 10px;\n}\n.row3 {\n  display: flex;\n  align-items: center;\n  padding: 10px 0;\n}\n.row4 {\n  padding: 1rem 0.5rem;\n  min-height: 5rem;\n  display: flex;\n  align-items: center;\n}\n.color-main {\n  width: 2.5rem;\n  height: 2.5rem;\n  border: 1px solid #cecece;\n  border-radius: 4px;\n  background-color: #ebebeb;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.color-info {\n  display: flex;\n  width: 80%;\n  margin: 0 auto;\n  align-items: center;\n  .vm-color-text {\n    p {\n      margin-bottom: 0;\n    }\n  }\n}\n.hover-active {\n  cursor: pointer;\n  &:hover {\n    background-color: #ebebeb;\n    .arrow-right {\n      visibility: visible;\n    }\n  }\n}\n.arrow-right {\n  visibility: hidden;\n  font-size: 28px;\n  color: #000;\n}\n.row5 {\n  color: #d2d2d2;\n  p {\n    width: 80%;\n    margin: 0 auto;\n    text-align: left;\n    padding: 0 1.25rem;\n  }\n}\n.expand-panel {\n  position: absolute;\n  left: 200px;\n  height: 100%;\n  width: 400px;\n  top: 0;\n}\n.vm-row2-click-panel {\n  position: absolute;\n  overflow: auto;\n  height: 100vh;\n  width: 100%;\n  top: 0;\n  left: 100%;\n  border-right: 1px solid #eee;\n  padding: 20px;\n  z-index: 99999;\n  background-color: #fff;\n}\n.edit-title {\n  font-size: 12px;\n  color: #666;\n  text-align: left;\n  letter-spacing: 0.6px;\n}\np.slider-set-title {\n  font-size: 14px;\n  color: #000;\n  margin-bottom: 20px !important;\n  text-align: left;\n  letter-spacing: 0.5px;\n}\n:deep .v-subheader {\n  padding: 0 !important;\n}\n:deep .v-slider__tick-label {\n  margin-top: 10px !important;\n  font-size: 14px !important;\n  letter-spacing: 0.6px;\n}\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ViewManager.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ViewManager.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ViewManager.vue?vue&type=template&id=7e4764bf&scoped=true\"\nimport script from \"./ViewManager.vue?vue&type=script&lang=js\"\nexport * from \"./ViewManager.vue?vue&type=script&lang=js\"\nimport style0 from \"./ViewManager.vue?vue&type=style&index=0&id=7e4764bf&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7e4764bf\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"tab-panel\"},[_c('div',{staticClass:\"vm-header br cell-row1\"},[_vm._m(0),_c('p',{staticClass:\"dataset-title\"},[_vm._v(\" \"+_vm._s(_vm.datasetName)+\" \"),_c('v-icon',{staticClass:\"icon-set small-icon\",attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-information-outline\")])],1),_c('p',[_vm._v(_vm._s(_vm.datasetName))])]),_c('div',{staticClass:\"vm-header br cell-row1 cell-row2\"},[_c('p',{staticClass:\"properties-title\"},[_c('span',[_vm._v(\"Cell Properties\")]),_c('v-icon',{staticClass:\"icon-set small-icon\",attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-cog\")])],1),_c('p',{staticClass:\"cell-count\"},[_vm._v(_vm._s(_vm.formatFileSize(_vm.total))+\" cells\")])]),_c('div',{staticClass:\"panel-container\",staticStyle:{\"position\":\"relative\"}},[_c('v-overlay',{attrs:{\"value\":!_vm.cellInfoList.length,\"absolute\":\"\",\"opacity\":\"0.1\"}},[_c('v-progress-circular',{attrs:{\"indeterminate\":\"\",\"size\":\"64\"}})],1),_c('v-expansion-panels',{staticClass:\"expansion-panels\",attrs:{\"accordion\":\"\"}},_vm._l((_vm.cellInfoList),function(item,i){return _c('v-expansion-panel',{key:i},[_c('v-expansion-panel-header',{staticClass:\"panel-header\",attrs:{\"expand-icon\":\"\"},scopedSlots:_vm._u([{key:\"default\",fn:function({ open }){return [_c('v-row',{staticClass:\"panel-row\",attrs:{\"no-gutters\":\"\"}},[_c('v-col',{staticClass:\"panel-col-left\",attrs:{\"cols\":12,\"sm\":6}},[(!open)?_c('v-icon',[_vm._v(\"mdi-chevron-right\")]):_c('v-icon',[_vm._v(\"mdi-chevron-down\")]),_c('span',{staticClass:\"item-name\"},[_vm._v(_vm._s(item.name))]),(_vm.getFilterNum(item.name))?_c('span',{staticClass:\"filter-style\"},[_vm._v(_vm._s(_vm.getFilterNum(item.name))+\" filters\")]):_vm._e()],1),_c('v-col',{staticClass:\"panel-col-right\",attrs:{\"cols\":12,\"sm\":6}},[_c('v-fade-transition',{attrs:{\"leave-absolute\":\"\"}},[_c('span',{key:\"0\",staticClass:\"action-icons\"},[(open)?_c('v-icon',{staticClass:\"icon-set\"},[_vm._v(\"mdi-plus\")]):_vm._e(),(open)?_c('v-icon',{staticClass:\"icon-set\"},[_vm._v(\"mdi-minus\")]):_vm._e(),(open)?_c('v-icon',{staticClass:\"icon-set\"},[_vm._v(\"mdi-magnify\")]):_vm._e(),_c('span',{staticClass:\"icon-set icon10\",on:{\"click\":function($event){$event.stopPropagation();return _vm.changeByColor(item.name)}}},[_c('svg',{staticClass:\"v-icon__svg\",style:({'fill':_vm.currentColorBy===item.name?'#297aba':'#6c6c6c'}),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"enable-background\":\"new 0 0 24 24\",\"height\":\"24px\",\"viewBox\":\"0 0 24 24\",\"width\":\"24px\",\"fill\":\"#5f6368\"}},[_c('rect',{attrs:{\"fill\":\"none\",\"height\":\"24\",\"width\":\"24\"}}),_c('path',{attrs:{\"d\":\"M12,2c-5.33,4.55-8,8.48-8,11.8c0,4.98,3.8,8.2,8,8.2s8-3.22,8-8.2C20,10.48,17.33,6.55,12,2z M12,20c-3.35,0-6-2.57-6-6.2 c0-2.34,1.95-5.44,6-9.14c4.05,3.7,6,6.79,6,9.14C18,17.43,15.35,20,12,20z M7.83,14c0.37,0,0.67,0.26,0.74,0.62 c0.41,2.22,2.28,2.98,3.64,2.87c0.43-0.02,0.79,0.32,0.79,0.75c0,0.4-0.32,0.73-0.72,0.75c-2.13,0.13-4.62-1.09-5.19-4.12 C7.01,14.42,7.37,14,7.83,14z\"}})])])],1)])],1)],1)]}}],null,true)}),_c('v-expansion-panel-content',[(item.name !== 'Class')?_c(_vm.currentComponent,{tag:\"component\",attrs:{\"typeName\":item.name,\"typeList\":item.children,\"field\":_vm.field,\"fieldValue\":_vm.fieldValue,\"currentColorBy\":_vm.currentColorBy},on:{\"getCheckList\":_vm.getCheckList,\"getHoverItem\":_vm.getHoverItem},nativeOn:{\"mouseenter\":function($event){return _vm.handleAttributeMouseEnter.apply(null, arguments)},\"mouseleave\":function($event){return _vm.handleAttributeMouseLeave.apply(null, arguments)}}}):_c('v-treeview',{staticClass:\"tree-view\",attrs:{\"items\":item.children,\"selected-color\":\"indigo\",\"selectable\":\"\",\"hoverable\":\"\",\"expand-icon\":\"mdi-chevron-down\"},on:{\"input\":_vm.getTreeSelected},scopedSlots:_vm._u([{key:\"label\",fn:function({ item }){return [_c('div',{staticClass:\"tree-item\",on:{\"mouseover\":function($event){return _vm.handleMouseOver(item)},\"mouseleave\":function($event){return _vm.handleMouseOut(item)}}},[_c('span',{staticClass:\"tree-item-name\"},[_vm._v(\" \"+_vm._s(item.name))]),_c('div',{staticClass:\"color-list\"},[(_vm.currentColorBy==='Class')?_c('span',{staticClass:\"color-item\",style:({backgroundColor:_vm.getColor(item.name)})}):_c('div',{staticClass:\"color-list-container\"},_vm._l((_vm.getColorList()),function(color,i){return _c('span',{key:i,staticClass:\"color-item\",style:({backgroundColor:color})})}),0)])])]}}],null,true),model:{value:(_vm.treeSelection),callback:function ($$v) {_vm.treeSelection=$$v},expression:\"treeSelection\"}})],1)],1)}),1)],1)])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('p',[_c('span',{staticClass:\"color-block\"}),_c('span',{staticClass:\"cell-row1-text\"},[_vm._v(\"SELECTED VIEW\")])])\n}]\n\nexport { render, staticRenderFns }","export function stringToNumberSum(str) {\n    let sum = 0;\n    for (let i = 0; i < str.length; i++) {\n      sum += str.charCodeAt(i);\n    }\n    return sum;\n  }\n  export function createMultiColorInterpolator(colors) {\n    // 检查输入是否有效\n    if (!Array.isArray(colors) || colors.length < 2) {\n        throw new Error('At least two colors are required.');\n    }\n\n    // 将颜色转换为数组格式 [r, g, b, a]\n    const colorStops = colors.map(color => {\n        if (color.length === 3) { // 如果是 RGB 格式，则添加默认 alpha 值 255\n            return [...color, 255];\n        }\n        return color;\n    });\n\n    // 创建插值函数\n    return function interpolateColor(value, min, max) {\n        // 确保 value 在 min 和 max 范围内\n        value = Math.max(min, Math.min(max, value));\n\n        // 计算总的颜色间隔数\n        const totalStops = colorStops.length - 1;\n\n        // 找出当前值对应的颜色区间\n        const ratio = (value - min) / (max - min);\n        const index = Math.floor(ratio * totalStops);\n\n        // 计算在该区间内的相对位置\n        const subRatio = (ratio * totalStops - index) * (colorStops[index + 1].length - 1);\n\n        // 对每个颜色通道进行插值\n        const interpolatedColor = colorStops[index].map((channel, i) => {\n            return Math.round(channel * (1 - subRatio) + colorStops[index + 1][i] * subRatio);\n        });\n\n        // 返回 WebGL 需要的 0-1 范围的 RGBA\n        return interpolatedColor.map(c => c / 255);\n    };\n}\n\nexport function  hsv2rgb(h, s, v) {\n    let rgb = [0, 0, 0];\n    let i = Math.floor(h * 6);\n    let f = h * 6 - i;\n    let p = v * (1 - s);\n    let q = v * (1 - f * s);\n    let t = v * (1 - (1 - f) * s);\n\n    switch (i % 6) {\n      case 0:\n        rgb = [v, t, p];\n        break;\n      case 1:\n        rgb = [q, v, p];\n        break;\n      case 2:\n        rgb = [p, v, t];\n        break;\n      case 3:\n        rgb = [p, q, v];\n        break;\n      case 4:\n        rgb = [t, p, v];\n        break;\n      case 5:\n        rgb = [v, p, q];\n        break;\n    }\n\n    return rgb;\n  }\n\nexport function getColorFromValue(value, colorIndex) {\n    if (value < 0) {\n      return [0.4, 0.4, 0.4, 1.0]; // 更深的灰色，确保在白色背景上可见\n    }\n\n    // 多层次颜色算法，用于生成1万种可区分颜色\n    \n    // 1. 主色相 - 使用黄金比例散列\n    const baseHue = (value * 0.618033988749895) % 1.0;\n    \n    // 2. 二级色相偏移 - 基于值和索引\n    const colorGroup = Math.floor(value % 5);\n    const secondaryShift = colorGroup * 0.2 + ((colorIndex * 0.1) % 0.2);\n    \n    // 3. 组合色相\n    const hue = (baseHue + secondaryShift) % 1.0;\n    \n    // 4. 动态饱和度 - 基于值的小数部分\n    const saturation = 0.6 + ((value % 1) * 0.3);\n    \n    // 5. 动态亮度 - 使用不同的调制因子\n    const brightness = 0.7 + ((value * 7) % 1) * 0.2;\n    \n    // 转换为RGB\n    const rgb = hsv2rgb(hue, saturation, brightness);\n\n    // 返回RGBA\n    return [...rgb, 0.8];\n}","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{on:{\"mouseenter\":_vm.onComponentEnter,\"mouseleave\":_vm.onComponentLeave}},[_c('v-virtual-scroll',{attrs:{\"height\":300,\"items\":_vm.typeList,\"item-height\":\"48\"},scopedSlots:_vm._u([{key:\"default\",fn:function({ item }){return [_c('div',{staticClass:\"type-item\",staticStyle:{\"display\":\"flex\",\"justify-content\":\"space-between\",\"padding\":\"5px 0px 0px 10px\"},attrs:{\"title\":item.name},on:{\"mouseenter\":function($event){return _vm.onMouseEnter(item)},\"mouseleave\":function($event){return _vm.onMouseLeave(item)}}},[_c('v-checkbox',{staticClass:\"shrink mt-0 long-label-checkbox\",attrs:{\"hide-details\":\"\",\"label\":item.name,\"value\":item.id},on:{\"change\":_vm.getCheckList},model:{value:(_vm.checkList),callback:function ($$v) {_vm.checkList=$$v},expression:\"checkList\"}}),_c('div',{staticClass:\"check-info shrink\"},[(_vm.currentColorBy===_vm.typeName)?_c('div',{staticClass:\"color-bar\"},[_c('div',{staticClass:\"color-item\",style:({ backgroundColor: _vm.getColor(item.name), width: '100%' })})]):_c('div',{staticClass:\"color-bar\"},_vm._l((_vm.colors),function(color,i){return _c('div',{key:i,staticClass:\"color-item\",style:({ backgroundColor: color, width: '20%' })})}),0),_c('span',{staticStyle:{\"font-size\":\"14px\"}},[_vm._v(\"2.05M\")])])],1)]}}])})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div @mouseenter=\"onComponentEnter\" @mouseleave=\"onComponentLeave\">\n    <v-virtual-scroll :height=\"300\" :items=\"typeList\" item-height=\"48\">\n      <template v-slot:default=\"{ item }\">\n        <div \n          :title=\"item.name\" \n          style=\"display:flex;justify-content:space-between;padding:5px 0px 0px 10px;\" \n          @mouseenter=\"onMouseEnter(item)\" \n          @mouseleave=\"onMouseLeave(item)\"\n          class=\"type-item\"\n        >\n          <v-checkbox\n            v-model=\"checkList\"\n            hide-details\n            :label=\"item.name\"\n            :value=\"item.id\"\n            class=\"shrink mt-0 long-label-checkbox\"\n            @change=\"getCheckList\"\n          ></v-checkbox>\n          <div class=\"check-info shrink\">\n              <div class=\"color-bar\" v-if=\"currentColorBy===typeName\">\n              <div\n                class=\"color-item\"\n                :style=\"{ backgroundColor: getColor(item.name), width: '100%' }\"\n              ></div>\n            </div>\n            <div class=\"color-bar\" v-else>\n              <div\n                class=\"color-item\"\n                v-for=\"(color, i) in colors\"\n                :key=\"i\"\n                :style=\"{ backgroundColor: color, width: '20%' }\"\n              ></div>\n            </div>\n            <span style=\"font-size: 14px\">2.05M</span>\n          </div>\n        </div>\n      </template>\n    </v-virtual-scroll>\n    <!-- <v-row align=\"center\" v-for=\"(item,index) in classes\" :key=\"index\" justify=\"space-between\" style=\"min-height:2.5rem;\" class=\"type-item\" @mouseover=\"onOver(item)\" @mouseleave=\"onLeave(item)\">\n        <v-checkbox\n          v-model=\"checkList\"\n          hide-details\n          :label=\"item.label\"\n          :value=\"item.value\"\n          class=\"shrink  mt-0  long-label-checkbox\"\n          @change=\"getCheckList\"\n        ></v-checkbox>\n        <div class=\"check-info shrink\">\n            <div class=\"color-bar\">\n                <div class=\"color-item\" v-for=\"(color ,i) in colors \" :key=\"i\" :style=\"{backgroundColor:color,width:'20%'}\"></div>\n            </div>\n            <span style=\"font-size:14px;\">2.05M</span>\n        </div>\n    </v-row> -->\n  </div>\n</template>\n\n<script>\nimport _ from \"lodash\";\nimport { getColorFromValue } from '@/utils/tool';\nimport { mapState } from 'vuex';\n\nexport default {\n  data() {\n    return {\n      checkList: [],\n      colors: [],\n      classes: [],\n      highlightTimeout: null,\n      componentHovered: false\n    };\n  },\n  props: {\n    typeList: {\n      type: Array,\n      default: () => [],\n    },\n    typeName: {\n      type: String,\n      default: () => \"\",\n    },\n    currentColorBy:{\n      type:String,\n      default:'Class'\n    }\n  },\n  computed: {\n    ...mapState('cellData', [\n      'fieldValue',\n      'field'\n    ])\n  },\n  watch:{\n    currentColorBy:{\n      handler(val){\n        console.log(val,83);\n        this.colors = []; // 清空颜色数组，避免重复添加\n        let key=this.currentColorBy==='Class'?'Siletti_modf_SCANVI_L1':this.currentColorBy;\n        let typeIndex=this.field.indexOf(key);\n        let items=this.fieldValue[key];\n      \n        for(let i=0;i<10;i++){\n          let color=getColorFromValue(i,typeIndex);\n          this.colors.push(`rgba(${color[0] * 255}, ${color[1] * 255}, ${\n            color[2] * 255\n          }, ${color[3]})`);\n        }\n      },\n      immediate:true\n    },\n  },\n  mounted() {\n    this.classes = this.typeList.map((item) => {\n      return {\n        label: item.id,\n        value: item.id,\n      };\n    });\n  },\n  methods: {\n    getCheckList() {\n      console.log(`=== 勾选状态变更开始 ===`);\n      console.log(`属性: ${this.typeName}`);\n      console.log(`当前勾选数量: ${this.checkList.length}`);\n      console.log(`勾选项: [${this.checkList.join(', ')}]`);\n      \n      this.$emit(\"getCheckList\", {\n        key: this.typeName,\n        value: this.checkList,\n        mode: \"check\",\n      });\n      \n      console.log(`勾选状态变更: ${this.typeName}, 当前勾选数量: ${this.checkList.length}, 勾选项: [${this.checkList.join(', ')}]`);\n      \n      // 根据勾选列表状态处理高亮\n      if (this.checkList.length > 0) {\n        // 有勾选项时，收集对应的值索引\n        const valueIndices = [];\n        \n        // 🔧 修复：遍历所有勾选项，收集对应的值索引\n        for (const checkItem of this.checkList) {\n          const selectedItem = this.typeList.find(item => item.id === checkItem);\n          if (selectedItem) {\n            // 🔧 修复：找到属性值在属性值数组中的索引\n            // 注意：fieldValue中的顺序可能与实际二进制数据中的索引顺序不同\n            let valueIndex = -1;\n            if (this.fieldValue && this.fieldValue[this.typeName] && Array.isArray(this.fieldValue[this.typeName])) {\n              valueIndex = this.fieldValue[this.typeName].indexOf(selectedItem.name);\n              if (valueIndex >= 0) {\n                valueIndices.push(valueIndex);\n                console.log(`勾选项: ${selectedItem.name}, 索引: ${valueIndex}`);\n              }\n            }\n          }\n        }\n        \n        console.log(`收集到的值索引: [${valueIndices.join(', ')}]`);\n        \n        if (valueIndices.length > 0) {\n          // 触发多属性交集高亮事件（而不是单属性多值高亮）\n          const event = new CustomEvent('highlight-multi-attribute-intersection', {\n            bubbles: true,\n            detail: {\n              attributeName: this.typeName,\n              attributeValueIndices: valueIndices\n            }\n          });\n          this.$el.dispatchEvent(event);\n          \n          console.log(`已触发多属性交集高亮事件: ${this.typeName}, 索引: [${valueIndices.join(', ')}]`);\n        }\n      } else {\n        // 没有勾选项时，清除该属性的高亮（但保留其他属性的高亮）\n        console.log(`没有勾选项，清除${this.typeName}的高亮`);\n        const clearEvent = new CustomEvent('highlight-multi-attribute-intersection', {\n          bubbles: true,\n          detail: {\n            attributeName: this.typeName,\n            attributeValueIndices: [] // 空数组表示清除该属性的勾选\n          }\n        });\n        this.$el.dispatchEvent(clearEvent);\n      }\n      \n      console.log(`=== 勾选状态变更结束 ===`);\n    },\n    \n    // 当鼠标进入整个组件区域\n    onComponentEnter() {\n      console.log('进入列表区域');\n      this.componentHovered = true;\n      \n      // 创建自定义事件，通知渲染器鼠标进入列表区域\n      const event = new CustomEvent('mouse-enter-list-area', {\n        bubbles: true\n      });\n      this.$el.dispatchEvent(event);\n      \n      // 如果有勾选项，确保勾选高亮状态得到恢复\n      if (this.checkList.length > 0) {\n        console.log(`重新进入组件，恢复${this.checkList.length}个勾选项的高亮`);\n        // 重新触发勾选高亮\n        this.getCheckList();\n      }\n    },\n    \n    // 当鼠标离开整个组件区域\n    onComponentLeave() {\n      console.log('离开列表区域');\n      this.componentHovered = false;\n      \n      // 使用延迟机制，确保不是在组件内部移动\n      setTimeout(() => {\n        // 再次检查鼠标是否真的离开了组件\n        if (!this.componentHovered) {\n          // 创建自定义事件，通知渲染器鼠标离开列表区域\n          const event = new CustomEvent('mouse-leave-list-area', {\n            bubbles: true\n          });\n          this.$el.dispatchEvent(event);\n          \n          // 只触发悬停的清除，不触发选中高亮的清除\n          const clearHoverEvent = new CustomEvent('cell-property-item-mouseleave', {\n            bubbles: true\n          });\n          this.$el.dispatchEvent(clearHoverEvent);\n          \n          // 重要：不要触发 clear-highlight 事件，因为这会清除勾选高亮\n          // 只有在没有勾选项时才清除高亮\n          if (this.checkList.length === 0) {\n            console.log('没有勾选项，可以清除高亮');\n            const clearHighlightEvent = new CustomEvent('clear-highlight', {\n              bubbles: true,\n              detail: {\n                attributeName: this.typeName,\n                reason: 'no-checked-items'\n              }\n            });\n            this.$el.dispatchEvent(clearHighlightEvent);\n          } else {\n            console.log(`有${this.checkList.length}个勾选项，保留勾选高亮`);\n          }\n          \n          console.log('确认离开组件区域，清除悬停高亮，保留勾选高亮');\n        }\n      }, 100); // 100ms延迟，足够检测是否是组件内部移动\n    },\n    \n    // 鼠标进入项目，带节流的悬停处理\n    onMouseEnter(item) {\n      // 清除上一个延迟操作\n      if (this.highlightTimeout) {\n        clearTimeout(this.highlightTimeout);\n      }\n      \n      // 🔧 修复：找到属性值在属性值数组中的索引\n      // 注意：fieldValue中的顺序可能与实际二进制数据中的索引顺序不同\n      let valueIndex = -1;\n      if (this.fieldValue && this.fieldValue[this.typeName] && Array.isArray(this.fieldValue[this.typeName])) {\n        valueIndex = this.fieldValue[this.typeName].indexOf(item.name);\n      }\n\n      // 详细的调试日志\n      console.log(`鼠标进入: ${this.typeName} - ${item.name}, 索引: ${valueIndex}`);\n      \n      // 向父组件发送悬停事件\n      this.$emit(\"getHoverItem\", {\n        key: this.typeName,\n        value: item.id,\n        mode: \"over\",\n        valueIndex: valueIndex // 显式传递索引值\n      });\n      \n      // 确保索引有效\n      if (valueIndex >= 0) {\n        // 创建自定义事件并分发，通知渲染组件处理鼠标悬停高亮\n        const event = new CustomEvent('cell-property-item-mouseenter', {\n          bubbles: true,\n          detail: {\n            attributeName: this.typeName,\n            attributeValue: item.name,\n            valueIndex: valueIndex\n          }\n        });\n        \n        // 分发事件\n        this.$el.dispatchEvent(event);\n      } else {\n        console.warn(`无法找到属性 ${this.typeName} 值 ${item.name} 的索引`);\n      }\n    },\n    \n    // 鼠标离开项目，带节流的取消悬停处理\n    onMouseLeave(item) {\n      // 清除上一个延迟操作\n      if (this.highlightTimeout) {\n        clearTimeout(this.highlightTimeout);\n      }\n      \n      // 立即向父组件发送离开事件\n      this.$emit(\"getHoverItem\", {\n        key: this.typeName,\n        value: item.id,\n        mode: \"leave\",\n      });\n      \n      // 注意：这里不应该触发清除悬停事件，因为这会清除勾选高亮\n      // 悬停的清除应该由组件级别的onComponentLeave来处理\n      console.log('鼠标离开项目，但保留勾选高亮，当前勾选项数量：', this.checkList.length);\n    },\n    \n    // 保留旧的onOver方法，但不使用\n    onOver: _.debounce(function(item) {\n      this.$emit(\"getHoverItem\", {\n        key: this.typeName,\n        value: item.value,\n        mode: \"over\",\n      });\n    }),\n    \n    // 保留旧的onLeave方法，但不使用\n    onLeave: _.debounce(function(item) {\n      this.$emit(\"getHoverItem\", {\n        key: this.typeName,\n        value: item.value,\n        mode: \"leave\",\n      });\n    }),\n    \n    getColor(label){\n      console.log(this.field,this.fieldValue,label,137);\n      //  let key=this.currentColorBy==='Class'?'Siletti_modf_SCANVI_L1':this.currentColorBy\n      let typeIndex=this.field.indexOf(this.typeName);\n     \n      let typeItemIndex=this.fieldValue[this.typeName].indexOf(label);\n      let color=getColorFromValue(typeItemIndex,typeIndex);\n      console.log(color,344,typeItemIndex,typeIndex);\n      return  `rgba(${color[0] * 255}, ${color[1] * 255}, ${\n          color[2] * 255\n        }, ${color[3]})`;\n    },\n    \n    clearAllHighlights() {\n      console.log('清除所有高亮状态');\n      \n      // 清除任何现有的超时\n      if (this.highlightTimeout) {\n        clearTimeout(this.highlightTimeout);\n        this.highlightTimeout = null;\n      }\n      \n      // 立即触发清除悬停事件\n      const clearEvent = new CustomEvent('cell-property-item-mouseleave', {\n        bubbles: true\n      });\n      \n      // 分发事件\n      this.$el.dispatchEvent(clearEvent);\n      \n      // 重要：只有当前没有勾选项时，才清除属性高亮\n      if (this.checkList.length === 0) {\n        console.log('没有勾选项，清除所有高亮');\n        const clearHighlightEvent = new CustomEvent('clear-highlight', {\n          bubbles: true,\n          detail: {\n            attributeName: this.typeName,\n            reason: 'component-destroy'\n          }\n        });\n        this.$el.dispatchEvent(clearHighlightEvent);\n      } else {\n        console.log(`有${this.checkList.length}个勾选项，保留勾选高亮`);\n        // 不触发 clear-highlight 事件，保留勾选高亮\n      }\n    },\n  },\n  beforeDestroy() {\n    // 清除组件销毁前的所有高亮状态\n    this.clearAllHighlights();\n    \n    // 清除任何定时器\n    if (this.highlightTimeout) {\n      clearTimeout(this.highlightTimeout);\n      this.highlightTimeout = null;\n    }\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.check-info {\n  display: flex;\n}\n.color-bar {\n  margin-right: 10px;\n  display: flex;\n  height: 15px;\n  width: 6.25rem;\n}\n.type-item {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  cursor: pointer;\n  padding: 0 5px;\n  white-space: nowrap;\n  flex-wrap: nowrap;\n\n  &:hover {\n    background-color: #ebebeb;\n  }\n}\n.long-label-checkbox .v-label {\n  width: 30%;\n  white-space: nowrap; /* 防止文本换行 */\n  overflow: hidden; /* 隐藏溢出的文本 */\n  text-overflow: ellipsis; /* 用省略号表示溢出的文本 */\n  max-width: 200px; /* 设置最大宽度，可以根据需要调整 */\n}\n:deep .v-input--selection-controls .v-input__slot > .v-label {\n  height: auto;\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 80px;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./typeListItem.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./typeListItem.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./typeListItem.vue?vue&type=template&id=05e0a2e4&scoped=true\"\nimport script from \"./typeListItem.vue?vue&type=script&lang=js\"\nexport * from \"./typeListItem.vue?vue&type=script&lang=js\"\nimport style0 from \"./typeListItem.vue?vue&type=style&index=0&id=05e0a2e4&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"05e0a2e4\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div class=\"tab-panel\">\n    <div class=\"vm-header br cell-row1\">\n      <p>\n        <span class=\"color-block\"></span>\n        <span class=\"cell-row1-text\">SELECTED VIEW</span>\n      </p>\n      <p class=\"dataset-title\">\n        {{datasetName}}\n        <v-icon dense class=\"icon-set small-icon\"\n          >mdi-information-outline</v-icon\n        >\n      </p>\n      <p>{{datasetName}}</p>\n    </div>\n    <div\n      class=\"vm-header br cell-row1 cell-row2\"\n    >\n      <p class=\"properties-title\">\n        <span>Cell Properties</span>\n        <v-icon class=\"icon-set small-icon\" dense>mdi-cog</v-icon>\n      </p>\n      <p class=\"cell-count\">{{formatFileSize(total)}} cells</p>\n    </div>\n    <div class=\"panel-container\" style=\"position: relative;\">\n     <v-overlay\n      :value=\"!cellInfoList.length\"\n      absolute\n      opacity=\"0.1\"\n    >\n      <v-progress-circular\n        indeterminate\n        size=\"64\"\n      ></v-progress-circular>\n    </v-overlay>\n      <v-expansion-panels class=\"expansion-panels\" accordion>\n        <v-expansion-panel v-for=\"(item, i) in cellInfoList\" :key=\"i\">\n          <v-expansion-panel-header\n            expand-icon=\"\"\n            class=\"panel-header\"\n          >\n            <template v-slot:default=\"{ open }\">\n              <v-row no-gutters class=\"panel-row\">\n                <v-col\n                  :cols=\"12\"\n                  :sm=\"6\"\n                  class=\"panel-col-left\"\n                >\n                  <v-icon v-if=\"!open\">mdi-chevron-right</v-icon>\n                  <v-icon v-else>mdi-chevron-down</v-icon> \n                  <span class=\"item-name\">{{ item.name }}</span>\n                  <span class=\"filter-style\" v-if=\"getFilterNum(item.name)\"\n                    >{{ getFilterNum(item.name) }} filters</span\n                  >\n                </v-col>\n                <v-col :cols=\"12\" :sm=\"6\" class=\"panel-col-right\">\n                  <v-fade-transition leave-absolute>\n                    <span\n                      class=\"action-icons\"\n                      key=\"0\"\n                    >\n                      <v-icon v-if=\"open\" class=\"icon-set\">mdi-plus</v-icon>\n                      <v-icon v-if=\"open\" class=\"icon-set\">mdi-minus</v-icon>\n                      <v-icon v-if=\"open\" class=\"icon-set\">mdi-magnify</v-icon>\n                      <span\n                        @click.stop=\"changeByColor(item.name)\"\n                        class=\"icon-set icon10\"\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          enable-background=\"new 0 0 24 24\"\n                          height=\"24px\"\n                          viewBox=\"0 0 24 24\"\n                          width=\"24px\"\n                          fill=\"#5f6368\"\n                          class=\"v-icon__svg\"\n                          :style=\"{'fill':currentColorBy===item.name?'#297aba':'#6c6c6c'}\"\n                        >\n                          <rect fill=\"none\" height=\"24\" width=\"24\" />\n                          <path\n                            d=\"M12,2c-5.33,4.55-8,8.48-8,11.8c0,4.98,3.8,8.2,8,8.2s8-3.22,8-8.2C20,10.48,17.33,6.55,12,2z M12,20c-3.35,0-6-2.57-6-6.2 c0-2.34,1.95-5.44,6-9.14c4.05,3.7,6,6.79,6,9.14C18,17.43,15.35,20,12,20z M7.83,14c0.37,0,0.67,0.26,0.74,0.62 c0.41,2.22,2.28,2.98,3.64,2.87c0.43-0.02,0.79,0.32,0.79,0.75c0,0.4-0.32,0.73-0.72,0.75c-2.13,0.13-4.62-1.09-5.19-4.12 C7.01,14.42,7.37,14,7.83,14z\"\n                          />\n                        </svg>\n                      </span>\n                    </span>\n                  </v-fade-transition>\n                </v-col>\n              </v-row>\n            </template>\n          </v-expansion-panel-header>\n          <v-expansion-panel-content>\n            <component\n              v-bind:is=\"currentComponent\"\n              :typeName=\"item.name\"\n              :typeList=\"item.children\"\n              :field=\"field\"\n              :fieldValue=\"fieldValue\"\n              :currentColorBy=\"currentColorBy\"\n              @getCheckList=\"getCheckList\"\n              @getHoverItem=\"getHoverItem\"\n              v-if=\"item.name !== 'Class'\"\n              @mouseenter.native=\"handleAttributeMouseEnter\"\n              @mouseleave.native=\"handleAttributeMouseLeave\"\n            ></component>\n            <v-treeview\n              v-else\n              v-model=\"treeSelection\"\n              :items=\"item.children\"\n              selected-color=\"indigo\"\n              selectable\n              hoverable\n              expand-icon=\"mdi-chevron-down\"\n              @input=\"getTreeSelected\"\n              class=\"tree-view\"\n            >\n              <template v-slot:label=\"{ item }\">\n                <div\n                  class=\"tree-item\"\n                  @mouseover=\"handleMouseOver(item)\"\n                  @mouseleave=\"handleMouseOut(item)\"\n                >\n                 <span class=\"tree-item-name\"> {{ item.name }}</span>\n                 <div class=\"color-list\">\n                   <span class=\"color-item\" v-if=\"currentColorBy==='Class'\" :style=\"{backgroundColor:getColor(item.name)}\"></span>\n                   <div class=\"color-list-container\" v-else>\n                     <span class=\"color-item\" v-for=\"(color,i) in getColorList()\" :key='i' :style=\"{backgroundColor:color}\"></span>\n                   </div>\n                 </div>\n                </div>\n              </template>\n            </v-treeview>\n          </v-expansion-panel-content>\n        </v-expansion-panel>\n      </v-expansion-panels>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getColorFromValue } from '@/utils/tool';\nimport typeListItem from \"../components/typeListItem.vue\";\nimport { mapState, mapGetters, mapActions } from 'vuex';\nimport { nonReactiveDataMixin } from '@/utils/nonReactiveDataStore';\nimport { buildDatasetPath, getDataset } from '@/api/config';\n\nexport default {\n  name: \"CellProperties\",\n  mixins: [nonReactiveDataMixin], // 🔄 添加非响应式数据mixin\n  components: {\n    typeListItem,\n  },\n  data() {\n    return {\n      expandPanelList: [],\n      items: [],\n      currentComponent: \"typeListItem\",\n      treeSelection: [],\n      currentColorBy: \"Class\",\n      highlightedAttribute: null,\n      highlightedValue: -1,\n    };\n  },\n  computed: {\n    // 🔄 修改computed以使用新的getters（从nonReactiveDataStore获取大数据）\n    ...mapState('cellData', [\n      // 'cellInfoList', // 已迁移到nonReactiveDataStore\n      // 'fieldValue',   // 已迁移到nonReactiveDataStore\n      'typeInfo',\n      'total',\n      'field',\n      'datasetName'\n    ]),\n    ...mapGetters('cellData', [\n      'getCellInfoList',\n      'getFieldValue'\n    ]),\n    \n    // 使用getters获取大数据（自动从nonReactiveDataStore获取）\n    cellInfoList() {\n      return this.getCellInfoList;\n    },\n    fieldValue() {\n      return this.getFieldValue;\n    }\n  },\n  watch:{\n   field:{\n    handler(val){\n      this.currentColorBy=val[0]\n    }\n   }\n  },\n  mounted() {\n    // 添加全局事件监听\n    this.addGlobalEventListeners();\n    \n    // 监听数据集切换事件\n    if (typeof window !== 'undefined') {\n      window.addEventListener('datasetChanged', this.handleDatasetChange);\n    }\n  },\n  beforeDestroy() {\n    // 移除全局事件监听\n    this.removeGlobalEventListeners();\n    \n    // 移除数据集切换事件监听\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('datasetChanged', this.handleDatasetChange);\n    }\n  },\n  methods: {\n    ...mapActions('cellData', [\n      'loadFieldsInfo',\n      'loadCellTypeValues'\n    ]),\n    \n    /**\n     * 处理数据集切换事件\n     */\n    async handleDatasetChange(event) {\n      console.log('CellProperties组件: 数据集切换到', event.detail.dataset);\n      \n      try {\n        \n        // 重置当前状态\n        this.currentColorBy = \"Class\";\n        this.highlightedAttribute = null;\n        this.highlightedValue = -1;\n        this.treeSelection = [];\n        \n        // 🔥 添加短暂延迟，确保缓存清除完成\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        // 重新加载数据，添加重试机制\n        console.log('CellProperties: 重新加载字段信息...');\n        await this.loadDataWithRetry('loadFieldsInfo', 3);\n        \n        console.log('CellProperties: 重新加载细胞类型值...');\n        await this.loadDataWithRetry('loadCellTypeValues', 3);\n        \n        console.log('CellProperties: 数据重新加载完成');\n        \n        // 通知父组件数据集已切换\n        this.$emit('dataset-changed', {\n          dataset: event.detail.dataset\n        });\n        \n      } catch (error) {\n        console.error('CellProperties: 数据集切换时重新加载数据失败:', error);\n        // 不再显示错误消息给用户，因为通常重试会成功\n        // 只在控制台记录错误信息用于调试\n      } \n    },\n    \n    /**\n     * 带重试机制的数据加载\n     * @param {string} actionName - action名称\n     * @param {number} maxRetries - 最大重试次数\n     * @param {number} delay - 重试延迟(ms)\n     */\n    async loadDataWithRetry(actionName, maxRetries = 3, delay = 200) {\n      let lastError = null;\n      \n      for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n          await this[actionName]();\n          return; // 成功则退出\n        } catch (error) {\n          lastError = error;\n          console.warn(`CellProperties: ${actionName} 第${attempt}次尝试失败:`, error.message);\n          \n          if (attempt < maxRetries) {\n            // 指数退避：每次重试延迟时间翻倍\n            const retryDelay = delay * Math.pow(2, attempt - 1);\n            console.log(`CellProperties: ${retryDelay}ms后进行第${attempt + 1}次重试...`);\n            await new Promise(resolve => setTimeout(resolve, retryDelay));\n          }\n        }\n      }\n      \n      // 所有重试都失败了\n      console.error(`CellProperties: ${actionName} 经过${maxRetries}次重试后仍然失败:`, lastError);\n      throw lastError;\n    },\n    getFilterNum(key) {\n      if (this.typeInfo.hasOwnProperty(key)) {\n        return key === \"Class\"\n          ? Object.keys(this.typeInfo[key]).length\n          : this.typeInfo[key].length;\n      } else {\n        return 0;\n      }\n    },\n    getCheckList(val) {\n      this.$emit(\"getType\", { type: \"plain\", data: val });\n    },\n    getTreeSelected(val) {\n      console.log(val, 197);\n      let categoryData = this.categorizedData(val);\n      this.$emit(\"getType\", {\n        type: \"treeView\",\n        data: { key: \"Class\", value: categoryData, mode: \"selected\" },\n      });\n      \n      // 🔧 修复：添加Class类型勾选高亮事件触发\n      if (val && val.length > 0) {\n        // 收集所有勾选项对应的值索引\n        const valueIndices = [];\n        // Class勾选的实际上是L2级别的子节点，应该使用Siletti_modf_SCANVI_L2字段\n        const actualAttributeName = 'Siletti_modf_SCANVI_L2'; \n        \n        // 遍历所有勾选的项\n        for (const selectedItemName of val) {\n          // 找到对应属性值的索引\n          if (this.fieldValue && this.fieldValue[actualAttributeName] && Array.isArray(this.fieldValue[actualAttributeName])) {\n            const valueIndex = this.fieldValue[actualAttributeName].indexOf(selectedItemName);\n            if (valueIndex >= 0) {\n              valueIndices.push(valueIndex);\n              console.log(`Class勾选项: ${selectedItemName}, 索引: ${valueIndex}`);\n            } else {\n              console.warn(`无法找到Class项 ${selectedItemName} 在属性 ${actualAttributeName} 中的索引`);\n            }\n          }\n        }\n        \n        console.log(`Class收集到的值索引: [${valueIndices.join(', ')}]`);\n        \n        if (valueIndices.length > 0) {\n          // 触发多值高亮事件\n          const event = new CustomEvent('highlight-multiple-attributes', {\n            bubbles: true,\n            detail: {\n              attributeName: actualAttributeName,\n              attributeValueIndices: valueIndices,\n              isCheckHighlight: true // 标记为勾选高亮\n            }\n          });\n          this.$el.dispatchEvent(event);\n          \n          console.log(`已触发Class多值高亮事件: ${actualAttributeName}, 索引: [${valueIndices.join(', ')}]`);\n        }\n      } else {\n        // 没有勾选项时，清除Class的高亮\n        console.log('没有Class勾选项，清除高亮');\n        const clearEvent = new CustomEvent('clear-highlight', {\n          bubbles: true,\n          detail: {\n            attributeName: 'Siletti_modf_SCANVI_L2',\n            force: true,\n            reason: 'class-uncheck'\n          }\n        });\n        this.$el.dispatchEvent(clearEvent);\n      }\n    },\n    categorizedData(treeData = []) {\n      const categorizedData = {};\n\n      treeData.forEach((item) => {\n        // 提取类别前缀\n        // const prefix = item.split(\"-\")[0];\n        const prefix = item\n          .match(/^([A-Za-z0-9\\s-]+(?: and [A-Za-z0-9\\s-]+)?)-\\d+$/)[1]\n          .trim();\n\n        // 如果没有此类别则创建新数组\n        if (!categorizedData[prefix]) {\n          categorizedData[prefix] = [];\n        }\n\n        // 添加数据项到对应的类别\n        categorizedData[prefix].push(item);\n      });\n      return categorizedData;\n    },\n    handleMouseOver(item) {\n      console.log(item, 209);\n      this.$emit(\"getHover\", { type: \"treeView\", data: item, mode: \"over\" });\n      \n      // 🔧 修复：正确处理Class类型的悬浮高亮\n      if (!item.children && item.parent) {\n        // 如果是叶子节点（子项），应该在Siletti_modf_SCANVI_L2字段中查找\n        this.highlightTreeItem('Siletti_modf_SCANVI_L2', item.name);\n      } else {\n        // 如果是父节点，应该在Siletti_modf_SCANVI_L1字段中查找\n        this.highlightTreeItem('Siletti_modf_SCANVI_L1', item.name);\n      }\n    },\n    handleMouseOut(item) {\n      console.log(item, 215);\n      this.$emit(\"getHover\", { type: \"treeView\", data: item, mode: \"leave\" });\n      \n      // 清除高亮\n      this.clearHighlight();\n    },\n    getHoverItem(hoverItem) {\n      console.log(hoverItem, 246);\n      this.$emit(\"getHover\", { type: \"plain\", data: hoverItem });\n      \n      // 处理属性项的高亮\n      if (hoverItem && hoverItem.key && hoverItem.value !== undefined) {\n        this.highlightAttribute(hoverItem.key, hoverItem.value);\n      }\n    },\n    changeByColor(colorKey) {\n      this.currentColorBy = colorKey\n      let colorField = colorKey === 'Class' ? 'Siletti_modf_SCANVI_L1' : colorKey\n\n      this.$emit(\"getColorBy\", colorField);\n    },\n    formatFileSize(bytes) {\n      if (bytes >= 1024 * 1024 * 1024) {\n        return (bytes / (1024 * 1024 * 1024)).toFixed(2) + ' GB';\n      }\n      if (bytes >= 1024 * 1024) {\n        return (bytes / (1024 * 1024)).toFixed(2) + ' MB';\n      }\n      return bytes\n    },\n    getColor(label){\n      console.log(this.field,this.fieldValue,label,339)\n      let key=this.currentColorBy==='Class'?'Siletti_modf_SCANVI_L1':this.currentColorBy\n      let typeIndex=this.field.indexOf(key)\n     \n      let typeItemIndex=this.fieldValue[key].indexOf(label)\n      let color=getColorFromValue(typeItemIndex,typeIndex)\n      console.log(color,344,typeItemIndex,typeIndex)\n      return  `rgba(${color[0] * 255}, ${color[1] * 255}, ${\n          color[2] * 255\n        }, ${color[3]})`;\n    },\n    getColorList(){\n      let key=this.currentColorBy==='Class'?'Siletti_modf_SCANVI_L1':this.currentColorBy\n      let typeIndex=this.field.indexOf(key)\n      let items=this.fieldValue[key]\n      let colors=[]\n      for(let i=0;i<10;i++){\n        let color=getColorFromValue(i,typeIndex)\n        colors.push(`rgba(${color[0] * 255}, ${color[1] * 255}, ${\n        color[2] * 255\n      }, ${color[3]})`)\n      }\n      return colors;\n    },\n    async loadCellAttribute(attrPath) {\n      try {\n        console.log(`开始加载属性数据: ${attrPath}`);\n        const response = await fetch(attrPath);\n        \n        if (!response.ok) {\n          console.error(`HTTP 错误! 状态: ${response.status} ${response.statusText}`);\n          throw new Error(`加载属性数据失败: ${response.status} ${response.statusText}`);\n        }\n        \n        const arrayBuffer = await response.arrayBuffer();\n        console.log(`成功获取arrayBuffer，大小: ${arrayBuffer.byteLength} 字节`);\n        const floatArray = new Float32Array(arrayBuffer);\n        console.log(`成功创建Float32Array，长度: ${floatArray.length}`);\n        \n        return floatArray;\n      } catch (error) {\n        console.error(`加载属性数据失败:`, error);\n        return new Float32Array(0);\n      }\n    },\n\n    // 添加全局事件监听\n    addGlobalEventListeners() {\n      // 监听属性项的鼠标事件\n      document.addEventListener('cell-property-item-mouseenter', this.handlePropertyItemMouseEnter);\n      document.addEventListener('cell-property-item-mouseleave', this.handlePropertyItemMouseLeave);\n    },\n\n    // 移除全局事件监听\n    removeGlobalEventListeners() {\n      document.removeEventListener('cell-property-item-mouseenter', this.handlePropertyItemMouseEnter);\n      document.removeEventListener('cell-property-item-mouseleave', this.handlePropertyItemMouseLeave);\n    },\n\n    // 处理属性项的鼠标进入事件\n    handlePropertyItemMouseEnter(event) {\n      if (event.detail) {\n        const { attributeName, attributeValue, valueIndex } = event.detail;\n\n        // 确保attributeName和valueIndex有效\n        if (!attributeName || valueIndex === undefined || valueIndex < 0) {\n          console.warn(`无效的悬停属性信息: ${attributeName}:${valueIndex}`);\n          return;\n        }\n\n        console.log(`属性项悬停: ${attributeName}, 值索引: ${valueIndex}`);\n\n        // 🔧 修复：不要重复分发同样的事件，直接处理悬停逻辑\n        // 设置悬停高亮\n        this.setHoverCategory(attributeName, valueIndex);\n      }\n    },\n\n    // 处理属性项的鼠标离开事件\n    handlePropertyItemMouseLeave() {\n      // 清除悬停高亮\n      this.clearHoverCategory();\n    },\n    \n    // 设置悬停高亮 - 使用 hoverCategory 而不是 highlightAttribute\n    setHoverCategory(attributeName, valueIndex) {\n      // 发送悬停事件到 Vuex store 或直接到渲染组件\n      this.$store.dispatch('cellData/setHoverInfo', {\n        key: attributeName,\n        value: valueIndex,\n        type: 'hover'\n      });\n    },\n    \n    // 清除悬停高亮\n    clearHoverCategory() {\n      // 🔧 修复：直接调用store方法，不要重复分发事件\n      this.$store.dispatch('cellData/clearHoverInfo');\n    },\n\n    // 高亮属性 - 仅用于勾选高亮\n    highlightAttribute(attributeName, valueIndex) {\n      // 如果索引无效，则不处理\n      if (valueIndex < 0) {\n        console.warn(`属性值索引无效: ${valueIndex}`);\n        return;\n      }\n      \n      // 如果属性名为Class，需要转换\n      const actualAttributeName = attributeName === 'Class' ? 'Siletti_modf_SCANVI_L1' : attributeName;\n      \n      // 检查属性名是否有效\n      if (!this.field.includes(actualAttributeName)) {\n        console.warn(`属性名无效: ${actualAttributeName}`);\n        return;\n      }\n      \n      // 保存当前高亮状态\n      this.highlightedAttribute = actualAttributeName;\n      this.highlightedValue = valueIndex;\n      \n      // 创建自定义事件，通知渲染组件\n      const highlightEvent = new CustomEvent('highlight-attribute', {\n        detail: {\n          attributeName: actualAttributeName,\n          attributeValue: valueIndex\n        },\n        bubbles: true\n      });\n      \n      // 分发事件\n      this.$el.dispatchEvent(highlightEvent);\n    },\n\n    // 高亮树形结构中的项\n    highlightTreeItem(attributeName, itemName) {\n      // 检查属性名是否有效\n      if (!this.fieldValue || !this.fieldValue[attributeName]) {\n        console.warn(`无效的属性名: ${attributeName}`);\n        return;\n      }\n      \n      // 找到对应属性值的索引\n      const attributeValues = this.fieldValue[attributeName];\n      if (!attributeValues || !Array.isArray(attributeValues)) {\n        console.warn(`属性值数组无效: ${attributeName}`);\n        return;\n      }\n      \n      const valueIndex = attributeValues.indexOf(itemName);\n      if (valueIndex >= 0) {\n        this.highlightAttribute(attributeName, valueIndex);\n      } else {\n        console.warn(`无法找到项 ${itemName} 在属性 ${attributeName} 中的索引`);\n      }\n    },\n\n    // 清除高亮\n    clearHighlight(force = false) {\n      if (!this.highlightedAttribute && !force) return;\n      \n      // 如果不是强制清除，检查是否有勾选的项目\n      if (!force) {\n        // 这里需要检查当前是否有勾选项，但由于这是父组件，\n        // 我们无法直接访问子组件的勾选状态\n        // 所以我们添加一个标记来判断是否应该清除\n        console.log('尝试清除高亮，但需要检查是否有勾选项');\n        \n        // 创建一个带有检查标记的清除事件\n        const clearEvent = new CustomEvent('clear-highlight', {\n          bubbles: true,\n          detail: {\n            attributeName: this.highlightedAttribute,\n            checkForCheckedItems: true, // 标记需要检查勾选项\n            reason: 'parent-clear-request'\n          }\n        });\n        \n        // 分发事件\n        this.$el.dispatchEvent(clearEvent);\n        return;\n      }\n      \n      // 强制清除的情况\n      this.highlightedAttribute = null;\n      this.highlightedValue = -1;\n      \n      // 创建自定义事件，通知渲染组件清除高亮\n      const clearEvent = new CustomEvent('clear-highlight', {\n        bubbles: true,\n        detail: {\n          force: true,\n          reason: 'force-clear'\n        }\n      });\n      \n      // 分发事件\n      this.$el.dispatchEvent(clearEvent);\n    },\n\n    // 处理属性列表的鼠标进入事件\n    handleAttributeMouseEnter(event) {\n      // 此事件添加在整个组件上，不做任何处理\n      // 具体的处理放在子组件item级别\n    },\n\n    // 处理属性列表的鼠标离开事件\n    handleAttributeMouseLeave() {\n      // 只清除悬停状态，不清除勾选高亮\n      this.clearHoverCategory();\n      \n      // 为整个组件创建清除悬停事件\n      const event = new CustomEvent('cell-property-item-mouseleave', {\n        bubbles: true\n      });\n      \n      // 分发事件\n      this.$el.dispatchEvent(event);\n      \n      // 注意：不调用 clearHighlight()，因为这会清除勾选高亮\n      // 勾选高亮应该只在用户主动取消勾选时才清除\n    }\n  }\n};\n</script>\n\n<style scoped lang=\"scss\">\n.tab-panel {\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\n.vm-header {\n  padding: 10px;\n  \n  &.cell-row2 {\n    background-color: #fff;\n  }\n}\n\n.dataset-title {\n  font-size: 20px;\n  margin: 10px 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.properties-title {\n  font-size: 20px;\n  \n  span {\n    margin-right: 5px;\n  }\n}\n\n.cell-count {\n  color: #666;\n}\n\n.panel-container {\n  flex: 1;\n  overflow: auto;\n  width: 100%;\n}\n\n.expansion-panels {\n  width: 100%;\n  margin-bottom: 6px;\n}\n\n.panel-header {\n  display: flex;\n  justify-content: space-between;\n}\n\n.panel-row {\n  width: 100%;\n}\n\n.panel-col-left {\n  text-align: left;\n  display: flex;\n  align-items: center;\n  \n  .item-name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n}\n\n.panel-col-right {\n  text-align: right;\n}\n\n.action-icons {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n}\n\n.icon10 {\n  margin-right: 10px;\n}\n\n.tree-view {\n  text-align: left;\n}\n\n.tree-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n}\n\n.tree-item-name {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  flex: 1;\n}\n\n.color-list {\n  width: 20%;\n  min-width: 50px;\n  margin-left: 10px;\n  \n  .color-item {\n    display: block;\n    height: 15px;\n    width: 100%;\n  }\n  \n  .color-list-container {\n    display: flex;\n    width: 100%;\n    \n    .color-item {\n      flex: 1;\n    }\n  }\n}\n\n.v-icon__svg {\n  width: 20px;\n  height: 20px;\n  fill: #6c6c6c;\n}\n\n:deep .v-expansion-panel-header {\n  padding: 16px 0 !important;\n}\n\n.filter-style {\n  margin-left: 5px;\n  display: inline-block;\n  background-color: #297aba;\n  color: #fff;\n  border-radius: 3px;\n  padding: 2px 4px;\n  white-space: nowrap;\n  font-size: 0.8rem;\n}\n\n@media (max-width: 600px) {\n  .panel-row {\n    flex-direction: column;\n  }\n  \n  .panel-col-left, .panel-col-right {\n    width: 100%;\n    max-width: 100%;\n    flex-basis: 100%;\n  }\n  \n  .dataset-title, .properties-title {\n    font-size: 16px;\n  }\n  \n  .tree-item {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .color-list {\n    width: 100%;\n    margin-left: 0;\n    margin-top: 5px;\n  }\n}\n\n@media (max-width: 768px) {\n  .dataset-title {\n    font-size: 18px;\n  }\n  \n  .properties-title {\n    font-size: 18px;\n  }\n}\n\n/* 直方图容器自适应 */\n.histogram-container {\n  width: 100%;\n  height: 120px;\n  max-height: 30vh;\n}\n\n/* 基因表达面板优化 */\n.gene-expression-panel {\n  width: 100%;\n  padding: 10px 2%;\n}\n\n/* 移动设备优化 */\n@media (max-width: 768px) {\n  .gene-symbol-btn {\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n  \n  .gene-symbol-icon {\n    margin-right: 5px;\n  }\n  \n  .histogram-header {\n    flex-direction: column;\n  }\n  \n  .selection-range {\n    margin-bottom: 5px;\n    font-size: 11px;\n  }\n}\n\n/* 更小屏幕优化 */\n@media (max-width: 480px) {\n  .v-expansion-panel-header {\n    padding: 10px 0 !important;\n  }\n  \n  .histogram-svg text {\n    font-size: 10px;\n  }\n  \n  .gene-avg-expression {\n    font-size: 11px;\n  }\n}\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CellProperties.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./CellProperties.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./CellProperties.vue?vue&type=template&id=519aa9e6&scoped=true\"\nimport script from \"./CellProperties.vue?vue&type=script&lang=js\"\nexport * from \"./CellProperties.vue?vue&type=script&lang=js\"\nimport style0 from \"./CellProperties.vue?vue&type=style&index=0&id=519aa9e6&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"519aa9e6\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"tab-panel\"},[_c('div',{staticClass:\"vm-header br cell-row1\"},[_vm._m(0),_c('p',{staticStyle:{\"font-size\":\"20px\",\"margin\":\"10px 0\"}},[_vm._v(\" \"+_vm._s(_vm.datasetName)+\" \"),_c('v-icon',{staticClass:\"icon-set small-icon\",attrs:{\"dense\":\"\"}},[_vm._v(\"mdi-information-outline\")])],1),_c('p',[_vm._v(_vm._s(_vm.datasetName))])]),_c('div',{staticClass:\"vm-header br cell-row1 cell-row2\",staticStyle:{\"background-color\":\"#fff\"}},[_vm._m(1),_c('p',{staticStyle:{\"color\":\"#666\",\"margin-bottom\":\"15px !important\"}},[_vm._v(_vm._s(_vm.geneList.length)+\" in dataset\")]),_c('div',[(!_vm.showBatchInput)?_c('v-autocomplete',{attrs:{\"items\":_vm.geneList,\"outlined\":\"\",\"chips\":\"\",\"clearable\":\"\",\"label\":\"Search by gene symbol\",\"item-text\":\"label\",\"item-value\":\"value\",\"multiple\":\"\",\"dense\":\"\"},on:{\"change\":_vm.selectGene},scopedSlots:_vm._u([{key:\"selection\",fn:function(data){return [_c('v-chip',_vm._b({attrs:{\"input-value\":data.selected,\"close\":\"\",\"label\":\"\",\"outlined\":\"\",\"small\":\"\"},on:{\"click\":data.select,\"click:close\":function($event){return _vm.remove(data.item)}}},'v-chip',data.attrs,false),[_vm._v(\" \"+_vm._s(data.item.label)+\" \")])]}},{key:\"item\",fn:function(data){return [[_c('v-list-item-content',[_vm._v(_vm._s(data.item.label))])]]}}],null,false,1221483296),model:{value:(_vm.geneSelected),callback:function ($$v) {_vm.geneSelected=$$v},expression:\"geneSelected\"}}):_c('v-textarea',{attrs:{\"outlined\":\"\",\"dense\":\"\",\"auto-grow\":\"\",\"rows\":\"3\",\"label\":\"Enter gene symbols separated by commas\",\"placeholder\":\"e.g. Gad1, Slc17a7, Aqp4\"},on:{\"keydown\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"esc\",27,$event.key,[\"Esc\",\"Escape\"]))return null;_vm.showBatchInput = false}},model:{value:(_vm.batchInput),callback:function ($$v) {_vm.batchInput=$$v},expression:\"batchInput\"}}),_c('div',{staticClass:\"gene-symbol-btn\"},[_c('v-btn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":_vm.clearGenes}},[_vm._v(\" CLEAR\")]),(!_vm.showBatchInput)?_c('v-btn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":function($event){_vm.showBatchInput = true}}},[_vm._v(\" ADD BATCH \")]):_c('v-btn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"indigo\"},on:{\"click\":_vm.addBatchGenes}},[_vm._v(\" SUBMIT \")]),(_vm.showBatchInput)?_c('v-btn',{staticClass:\"ma-2\",attrs:{\"outlined\":\"\",\"color\":\"error\"},on:{\"click\":function($event){_vm.showBatchInput = false}}},[_vm._v(\" CANCEL \")]):_vm._e()],1)],1)]),_c('div',{staticStyle:{\"display\":\"flex\"}},[_c('v-expansion-panels',{staticClass:\"mb-6\",attrs:{\"accordion\":\"\"}},_vm._l((_vm.geneSelected),function(item,i){return _c('v-expansion-panel',{key:i},[_c('v-expansion-panel-header',{staticStyle:{\"display\":\"flex\",\"justify-content\":\"space-between\"},attrs:{\"hide-actions\":\"\"},on:{\"click\":function($event){return _vm.handlePanelClick(item)}},scopedSlots:_vm._u([{key:\"default\",fn:function({ open }){return [_c('v-row',{attrs:{\"no-gutters\":\"\",\"justify\":\"space-between\"}},[_c('v-col',{staticStyle:{\"text-align\":\"left\",\"display\":\"flex\",\"align-items\":\"center\"},attrs:{\"cols\":\"4\"}},[(!open)?_c('v-icon',[_vm._v(\"mdi-chevron-right\")]):_c('v-icon',[_vm._v(\"mdi-chevron-down\")]),_vm._v(\" \"+_vm._s(item)+\" \")],1),_c('v-col',{staticClass:\"gene-symbol-icon\",attrs:{\"cols\":\"4\"}},[_c('v-icon',{staticClass:\"icon-set icon10\",staticStyle:{\"font-size\":\"20px\"}},[_vm._v(\"mdi-cog\")]),_c('span',{staticClass:\"icon-set icon10 color-icon\",class:{ 'active-gene': _vm.activeGeneForRendering === item },attrs:{\"title\":_vm.activeGeneForRendering === item ? '当前用于渲染的基因' : '点击使用此基因进行渲染'},on:{\"click\":function($event){$event.stopPropagation();return _vm.handleColorIconClick(item)}}},[_c('svg',{staticClass:\"v-icon__svg\",attrs:{\"viewBox\":\"0 0 24 24\",\"role\":\"img\",\"aria-hidden\":\"true\"}},[_c('path',{attrs:{\"d\":\"M12,19.58V19.58C10.4,19.58 8.89,18.96 7.76,17.83C6.62,16.69 6,15.19 6,13.58C6,12 6.62,10.47 7.76,9.34L12,5.1M17.66,7.93L12,2.27V2.27L6.34,7.93C3.22,11.05 3.22,16.12 6.34,19.24C7.9,20.8 9.95,21.58 12,21.58C14.05,21.58 16.1,20.8 17.66,19.24C20.78,16.12 20.78,11.05 17.66,7.93Z\"}})])]),_c('v-icon',{staticClass:\"icon-set icon10\",staticStyle:{\"font-size\":\"20px\"},on:{\"click\":function($event){$event.stopPropagation();return _vm.removeItem(item)}}},[_vm._v(\"mdi-window-close\")])],1)],1)]}}],null,true)}),_c('v-expansion-panel-content',[_c('div',{staticClass:\"gene-expression-panel\"},[_c('div',{staticClass:\"gene-expression-stats\"},[_c('div',{staticClass:\"expression-histogram\"},[_c('div',{staticClass:\"histogram-header\"},[(_vm.selectedRange[item])?_c('span',{staticClass:\"selection-range\"},[_vm._v(\" Selection Range: \"+_vm._s(_vm.formatExpression(_vm.selectedRange[item].start))+\" - \"+_vm._s(_vm.formatExpression(_vm.selectedRange[item].end))+\" \"),(_vm.getSelectionStats(item))?_c('span',{staticClass:\"selection-stats\"},[_vm._v(\" (\"+_vm._s(_vm.getSelectionStats(item).count)+\" cells, \"+_vm._s(_vm.getSelectionStats(item).percentage)+\"%) \")]):_vm._e()]):_vm._e(),_c('span',{staticClass:\"expression-percentage\"},[_vm._v(_vm._s(_vm.getExpressionPercentage(item))+\"%\")])]),_c('div',{ref:\"histogramContainer\",refInFor:true,staticClass:\"histogram-container\"},[_c('svg',{ref:\"histogramSvg\",refInFor:true,staticClass:\"histogram-svg\",attrs:{\"id\":`histogram-${item}`,\"preserveAspectRatio\":\"none\"},on:{\"mousedown\":function($event){return _vm.startSelection($event, item)},\"mousemove\":function($event){return _vm.updateSelection($event, item)},\"mouseup\":function($event){return _vm.endSelection(item)},\"mouseleave\":_vm.cancelSelection}},[_c('g',{staticClass:\"axis x-axis\"},[_c('text',{attrs:{\"x\":\"2%\",\"y\":\"120\"}},[_vm._v(_vm._s(_vm.getExpressionRange(item).min.toFixed(1)))]),_c('text',{attrs:{\"x\":\"25%\",\"y\":\"120\"}},[_vm._v(_vm._s(_vm.getAxisTickValue(item, 0.25).toFixed(1)))]),_c('text',{attrs:{\"x\":\"50%\",\"y\":\"120\"}},[_vm._v(_vm._s(_vm.getAxisTickValue(item, 0.5).toFixed(1)))]),_c('text',{attrs:{\"x\":\"75%\",\"y\":\"120\"}},[_vm._v(_vm._s(_vm.getAxisTickValue(item, 0.75).toFixed(1)))]),_c('text',{attrs:{\"x\":\"98%\",\"y\":\"120\",\"text-anchor\":\"end\"}},[_vm._v(_vm._s(_vm.getExpressionRange(item).max.toFixed(1)))])]),(_vm.currentSelectedGeneInfo[item])?_c('g',{key:`bars-${item}-${Object.keys(_vm.currentSelectedGeneInfo).length}`,staticClass:\"bars\"},_vm._l((_vm.generateHistogramData(item)),function(bar,index){return _c('rect',{key:`${item}-bar-${index}-${bar.count}`,attrs:{\"x\":`${4 + (index * 92 / 50)}%`,\"y\":100 - bar.height,\"width\":`${92 / 50}%`,\"height\":bar.height,\"fill\":_vm.getBarColor(bar, item, index),\"stroke\":_vm.isInSelectionRange(bar, item) ? '#0D47A1' : 'none',\"stroke-width\":_vm.isInSelectionRange(bar, item) ? 0.5 : 0}})}),0):_vm._e(),(_vm.selectionActive && _vm.currentSelectionGene === item)?_c('rect',{attrs:{\"x\":_vm.selectionStart.x,\"y\":0,\"width\":_vm.getSelectionWidth(item),\"height\":100,\"fill\":\"rgba(66, 133, 244, 0.2)\",\"stroke\":\"#4285F4\",\"stroke-width\":\"1\"}}):_vm._e(),(!_vm.selectionActive && _vm.selectedRange[item] && !isNaN(_vm.getSelectionRangePosition(item).start) && !isNaN(_vm.getSelectionRangePosition(item).width))?_c('rect',{attrs:{\"x\":_vm.getSelectionRangePosition(item).start,\"y\":0,\"width\":_vm.getSelectionRangePosition(item).width,\"height\":100,\"fill\":\"rgba(66, 133, 244, 0.2)\",\"stroke\":\"#4285F4\",\"stroke-width\":\"1\"}}):_vm._e()])])]),_c('div',{staticClass:\"gene-info\"},[_c('div',{staticClass:\"gene-avg-expression\"},[_vm._v(_vm._s(_vm.getAverageExpression(item)))]),(_vm.selectedRange[item])?_c('v-btn',{staticClass:\"ml-2\",attrs:{\"x-small\":\"\",\"text\":\"\",\"color\":\"error\"},on:{\"click\":function($event){return _vm.clearSelection(item)}}},[_c('v-icon',{attrs:{\"x-small\":\"\",\"left\":\"\"}},[_vm._v(\"mdi-close\")]),_vm._v(\"Clear Selection \")],1):_vm._e()],1)]),_c('div',{staticClass:\"expression-controls\"},[_c('v-btn',{staticClass:\"download-btn\",attrs:{\"small\":\"\",\"icon\":\"\",\"color\":\"primary\"}},[_c('v-icon',{attrs:{\"small\":\"\"}},[_vm._v(\"mdi-download\")])],1)],1)])])],1)}),1)],1)])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('p',[_c('span',{staticClass:\"color-block\"}),_c('span',{staticClass:\"cell-row1-text\"},[_vm._v(\"SELECTED VIEW\")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('p',{staticStyle:{\"font-size\":\"20px\"}},[_c('span',{staticStyle:{\"margin-right\":\"5px\"}},[_vm._v(\"Genes\")])])\n}]\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"tab-panel\">\n    <div class=\"vm-header br cell-row1\">\n      <p>\n        <span class=\"color-block\"></span>\n        <span class=\"cell-row1-text\">SELECTED VIEW</span>\n      </p>\n      <p style=\"font-size: 20px; margin: 10px 0\">\n        {{datasetName}}\n        <v-icon dense class=\"icon-set small-icon\"\n          >mdi-information-outline</v-icon\n        >\n      </p>\n      <p>{{datasetName}}</p>\n    </div>\n    <div\n      class=\"vm-header br cell-row1 cell-row2\"\n      style=\"background-color: #fff\"\n    >\n      <p style=\"font-size: 20px\">\n        <span style=\"margin-right: 5px\">Genes</span>\n      </p>\n      <p style=\"color: #666;margin-bottom:15px !important;\">{{geneList.length}} in dataset</p>\n      <div>\n        <v-autocomplete\n          v-if=\"!showBatchInput\"\n          v-model=\"geneSelected\"\n          :items=\"geneList\"\n          outlined\n          chips\n          clearable\n          label=\"Search by gene symbol\"\n          item-text=\"label\"\n          item-value=\"value\"\n          multiple\n          dense\n          @change=\"selectGene\"\n        >\n          <template v-slot:selection=\"data\">\n            <v-chip\n              v-bind=\"data.attrs\"\n              :input-value=\"data.selected\"\n              close\n              label\n              outlined\n              small\n              @click=\"data.select\"\n              @click:close=\"remove(data.item)\"\n            >\n              {{ data.item.label}}\n            </v-chip>\n          </template>\n          <template v-slot:item=\"data\">\n            <template>\n              <v-list-item-content\n                >{{ data.item.label }}</v-list-item-content>\n            </template>\n          </template>\n        </v-autocomplete>\n        <v-textarea\n          v-else\n          v-model=\"batchInput\"\n          outlined\n          dense\n          auto-grow\n          rows=\"3\"\n          label=\"Enter gene symbols separated by commas\"\n          placeholder=\"e.g. Gad1, Slc17a7, Aqp4\"\n          @keydown.esc=\"showBatchInput = false\"\n        ></v-textarea>\n        <div class=\"gene-symbol-btn\">\n          <v-btn class=\"ma-2\" outlined color=\"indigo\" @click=\"clearGenes\"> CLEAR</v-btn>\n          <v-btn v-if=\"!showBatchInput\" class=\"ma-2\" outlined color=\"indigo\" @click=\"showBatchInput = true\"> ADD BATCH </v-btn>\n          <v-btn v-else class=\"ma-2\" outlined color=\"indigo\" @click=\"addBatchGenes\"> SUBMIT </v-btn>\n          <v-btn v-if=\"showBatchInput\" class=\"ma-2\" outlined color=\"error\" @click=\"showBatchInput = false\"> CANCEL </v-btn>\n        </div>\n      </div>\n    </div>\n    <div style=\"display: flex\">\n      <v-expansion-panels class=\"mb-6\" accordion>\n        <v-expansion-panel v-for=\"(item, i) in geneSelected\" :key=\"i\">\n          <v-expansion-panel-header\n            hide-actions\n            style=\"display: flex; justify-content: space-between\"\n            @click=\"handlePanelClick(item)\"\n          >\n            <template v-slot:default=\"{ open }\">\n              <v-row no-gutters justify=\"space-between\">\n                <v-col\n                  cols=\"4\"\n                  style=\"text-align: left; display: flex; align-items: center\"\n                >\n                  <v-icon v-if=\"!open\">mdi-chevron-right</v-icon>\n                  <v-icon v-else>mdi-chevron-down</v-icon> {{item}}\n                </v-col>\n                <v-col cols=\"4\" class=\"gene-symbol-icon\">\n                  <v-icon style=\"font-size:20px;\" class=\"icon-set icon10\">mdi-cog</v-icon>\n                  <span @click.stop=\"handleColorIconClick(item)\" \n                        class=\"icon-set icon10 color-icon\" \n                        :class=\"{ 'active-gene': activeGeneForRendering === item }\"\n                        :title=\"activeGeneForRendering === item ? '当前用于渲染的基因' : '点击使用此基因进行渲染'\">\n                    <svg\n                      viewBox=\"0 0 24 24\"\n                      role=\"img\"\n                      aria-hidden=\"true\"\n                      class=\"v-icon__svg\"\n                    >\n                      <path\n                        d=\"M12,19.58V19.58C10.4,19.58 8.89,18.96 7.76,17.83C6.62,16.69 6,15.19 6,13.58C6,12 6.62,10.47 7.76,9.34L12,5.1M17.66,7.93L12,2.27V2.27L6.34,7.93C3.22,11.05 3.22,16.12 6.34,19.24C7.9,20.8 9.95,21.58 12,21.58C14.05,21.58 16.1,20.8 17.66,19.24C20.78,16.12 20.78,11.05 17.66,7.93Z\"\n                      ></path>\n                    </svg>\n                  </span>\n                  <v-icon style=\"font-size:20px;\" class=\"icon-set icon10\" @click.stop=\"removeItem(item)\">mdi-window-close</v-icon>\n                </v-col>\n              </v-row>\n            </template>\n          </v-expansion-panel-header>\n          <v-expansion-panel-content>\n            <div class=\"gene-expression-panel\">\n              <div class=\"gene-expression-stats\">\n                <div class=\"expression-histogram\">\n                  <div class=\"histogram-header\">\n                    <span v-if=\"selectedRange[item]\" class=\"selection-range\">\n                      Selection Range: {{ formatExpression(selectedRange[item].start) }} - {{ formatExpression(selectedRange[item].end) }}\n                      <span class=\"selection-stats\" v-if=\"getSelectionStats(item)\">\n                        ({{ getSelectionStats(item).count }} cells, {{ getSelectionStats(item).percentage }}%)\n                      </span>\n                    </span>\n                    <span class=\"expression-percentage\">{{ getExpressionPercentage(item) }}%</span>\n                  </div>\n                  \n                  <div class=\"histogram-container\" ref=\"histogramContainer\">\n                    <svg class=\"histogram-svg\" :id=\"`histogram-${item}`\" \n                         @mousedown=\"startSelection($event, item)\" \n                         @mousemove=\"updateSelection($event, item)\"\n                         @mouseup=\"endSelection(item)\"\n                         @mouseleave=\"cancelSelection\"\n                         ref=\"histogramSvg\"\n                         preserveAspectRatio=\"none\">\n                      <g class=\"axis x-axis\">\n                        <text x=\"2%\" y=\"120\">{{ getExpressionRange(item).min.toFixed(1) }}</text>\n                        <text x=\"25%\" y=\"120\">{{ getAxisTickValue(item, 0.25).toFixed(1) }}</text>\n                        <text x=\"50%\" y=\"120\">{{ getAxisTickValue(item, 0.5).toFixed(1) }}</text>\n                        <text x=\"75%\" y=\"120\">{{ getAxisTickValue(item, 0.75).toFixed(1) }}</text>\n                        <text x=\"98%\" y=\"120\" text-anchor=\"end\">{{ getExpressionRange(item).max.toFixed(1) }}</text>\n                      </g>\n                      <!-- 动态生成的柱状图 -->\n                      <g class=\"bars\" v-if=\"currentSelectedGeneInfo[item]\" :key=\"`bars-${item}-${Object.keys(currentSelectedGeneInfo).length}`\">\n                        <rect v-for=\"(bar, index) in generateHistogramData(item)\" \n                              :key=\"`${item}-bar-${index}-${bar.count}`\"\n                              :x=\"`${4 + (index * 92 / 50)}%`\"\n                              :y=\"100 - bar.height\"\n                              :width=\"`${92 / 50}%`\"\n                              :height=\"bar.height\"\n                              :fill=\"getBarColor(bar, item, index)\"\n                              :stroke=\"isInSelectionRange(bar, item) ? '#0D47A1' : 'none'\"\n                              :stroke-width=\"isInSelectionRange(bar, item) ? 0.5 : 0\"\n                              ></rect>\n                      </g>\n                      \n                      <!-- 选择区域 -->\n                      <rect v-if=\"selectionActive && currentSelectionGene === item\"\n                            :x=\"selectionStart.x\"\n                            :y=\"0\"\n                            :width=\"getSelectionWidth(item)\"\n                            :height=\"100\"\n                            fill=\"rgba(66, 133, 244, 0.2)\"\n                            stroke=\"#4285F4\"\n                            stroke-width=\"1\"></rect>\n                      \n                      <!-- 非活动状态下的选中区域 -->\n                      <rect v-if=\"!selectionActive && selectedRange[item] && !isNaN(getSelectionRangePosition(item).start) && !isNaN(getSelectionRangePosition(item).width)\"\n                            :x=\"getSelectionRangePosition(item).start\"\n                            :y=\"0\"\n                            :width=\"getSelectionRangePosition(item).width\"\n                            :height=\"100\"\n                            fill=\"rgba(66, 133, 244, 0.2)\"\n                            stroke=\"#4285F4\"\n                            stroke-width=\"1\"></rect>\n                    </svg>\n                  </div>\n                </div>\n                \n                <div class=\"gene-info\">\n                  <div class=\"gene-avg-expression\">{{ getAverageExpression(item) }}</div>\n                  <v-btn v-if=\"selectedRange[item]\" x-small text color=\"error\" class=\"ml-2\" @click=\"clearSelection(item)\">\n                    <v-icon x-small left>mdi-close</v-icon>Clear Selection\n                  </v-btn>\n                </div>\n              </div>\n              \n              <div class=\"expression-controls\">\n                <v-btn small icon color=\"primary\" class=\"download-btn\">\n                  <v-icon small>mdi-download</v-icon>\n                </v-btn>\n              </div>\n            </div>\n          </v-expansion-panel-content>\n        </v-expansion-panel>\n      </v-expansion-panels>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions, mapGetters } from 'vuex';\nimport { nonReactiveDataMixin } from '@/utils/nonReactiveDataStore';\nimport { buildDatasetPath, getDataset } from '@/api/config';\n\nexport default {\n  name: \"Genes\",\n  mixins: [nonReactiveDataMixin], // 🔄 添加非响应式数据mixin\n  data() {\n    return {\n      showBatchInput: false,\n      batchInput: \"\",\n      geneSelected: [],\n      histogramData: {},\n      selectionActive: false,\n      selectionStart: { x: 0, y: 0 },\n      selectionEnd: { x: 0, y: 0 },\n      currentSelectionGene: null,\n      selectedRange: {},\n      currentSelectedGeneInfo: {},\n      isUpdating: false, // 防止递归调用的标志\n      name: \"Midnight Crew\",\n      title: \"The summer breeze\",\n      geneTotal: 0,\n      geneData: null,\n      chunkCache: {}, // 用于缓存已加载的chunk数据\n      selectionStats: {}, // 存储选择区域的统计信息\n      currentOpenPanel: null, // 当前打开的面板\n      geneColor: '',\n      activeGeneForRendering: null, // 当前用于渲染的活跃基因\n    };\n  },\n  computed: {\n    // 🔄 修改computed以使用新的getters（从nonReactiveDataStore获取大数据）\n    ...mapState('cellData', [\n      'geneList',\n      'datasetName',\n      // 'geneExp',      // 已迁移到nonReactiveDataStore\n      'geneExpRange'\n    ]),\n    ...mapGetters('cellData', [\n      'getGeneExp'\n    ]),\n    \n    // 使用getters获取大数据（自动从nonReactiveDataStore获取）\n    geneExp() {\n      return this.getGeneExp;\n    }\n  },\n  async mounted() {\n    // 监听数据集切换事件\n    if (typeof window !== 'undefined') {\n      window.addEventListener('datasetChanged', this.handleDatasetChange);\n    }\n    \n    // 加载基因列表\n    await this.loadGeneList();\n\n    // 尝试获取基因矩阵信息\n    await this.loadMatrixInfo();\n    \n    // 加载保存的选择范围\n    this.loadSavedRanges();\n  },\n  \n  beforeDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('datasetChanged', this.handleDatasetChange);\n    }\n  },\n  \n  methods: {\n    ...mapActions('cellData', [\n      'loadGeneExpression',\n      'loadGeneList'\n    ]),\n    \n    /**\n     * 处理数据集切换事件\n     */\n    async handleDatasetChange(event) {\n      console.log('Genes组件: 数据集切换到', event.detail.dataset);\n      \n      try {\n        // 🔥 清除所有缓存和状态\n        this.chunkCache = {};\n        this.currentSelectedGeneInfo = {};\n        this.selectedRange = {};\n        this.selectionStats = {};\n        this.activeGeneForRendering = null;\n        this.geneSelected = [];\n        this.geneData = null;\n        this.geneTotal = 0;\n        \n        console.log('Genes: 已清除所有缓存和状态');\n        \n        // 🔥 重新加载基因列表\n        console.log('Genes: 重新加载基因列表...');\n        await this.loadGeneList();\n        \n        // 🔥 重新加载矩阵信息\n        console.log('Genes: 重新加载矩阵信息...');\n        await this.loadMatrixInfo();\n        \n        // 🔥 发送空的基因数据，恢复默认颜色状态\n        this.$emit(\"getGeneExp\", {});\n        this.$emit(\"currentRangeSelected\", {\n          gene: null,\n          range: null,\n          stats: null,\n          geneData: null\n        });\n        \n        console.log('Genes: 数据集切换完成');\n        \n      } catch (error) {\n        console.error('Genes: 数据集切换失败:', error);\n      }\n    },\n    \n    /**\n     * 加载矩阵信息\n     */\n    async loadMatrixInfo() {\n      try {\n        console.log('Genes: 开始加载矩阵信息...');\n        const matrixInfoPath = buildDatasetPath('matrix_info.json');\n        console.log('Genes: 矩阵信息路径:', matrixInfoPath);\n        \n        let geneInfo = await fetch(matrixInfoPath);\n        if (!geneInfo.ok) {\n          throw new Error(`HTTP ${geneInfo.status}: ${geneInfo.statusText}`);\n        }\n        \n        this.geneData = await geneInfo.json();\n        this.geneTotal = this.geneData.total_genes || (this.geneList ? this.geneList.length : 0);\n        \n        console.log('Genes: 矩阵信息加载成功');\n        console.log('Genes: 总基因数:', this.geneTotal);\n        console.log('Genes: 总细胞数:', this.geneData.total_cells);\n        console.log('Genes: 每个chunk的基因数:', this.geneData.genes_per_chunk);\n        \n      } catch (error) {\n        console.error('Genes: 加载基因矩阵信息失败:', error);\n        this.geneTotal = this.geneList ? this.geneList.length : 0;\n        \n        // 设置默认的geneData以防止后续错误\n        this.geneData = {\n          total_genes: this.geneTotal,\n          total_cells: 0,\n          genes_per_chunk: 100 // 默认值\n        };\n      }\n    },\n    clearGenes() {\n      console.log('清除所有基因');\n      this.geneSelected = [];\n      this.currentSelectedGeneInfo = {};\n      this.selectedRange = {};\n      this.selectionStats = {};\n      this.activeGeneForRendering = null; // 清除活跃基因\n      \n      // 发送空的基因数据，恢复默认颜色状态\n      this.$emit(\"getGeneExp\", {});\n      \n      // 清除基因表达范围过滤\n      this.$emit(\"currentRangeSelected\", {\n        gene: null,\n        range: null,\n        stats: null,\n        geneData: null\n      });\n    },\n    addBatchGenes() {\n      if (!this.batchInput.trim()) {\n        this.showBatchInput = false;\n        return;\n      }\n      \n      // 解析逗号分隔的基因名称\n      const geneNames = this.batchInput.split(',').map(name => name.trim()).filter(name => name);\n      \n      // 找到有效的基因名称（存在于基因列表中的）\n      const validGenes = [];\n      for (const geneName of geneNames) {\n        const found = this.geneList.find(gene => gene.value.toLowerCase() === geneName.toLowerCase());\n        if (found && !this.geneSelected.includes(found.value)) {\n          validGenes.push(found.value);\n        }\n      }\n      \n      // 将有效基因添加到选中列表\n      if (validGenes.length > 0) {\n        this.geneSelected = [...this.geneSelected, ...validGenes];\n        // 不直接调用 selectGene()，让 Vue 的 @change 事件处理器自动触发\n        // this.selectGene(); // 移除这行，防止递归调用\n      }\n      \n      // 重置状态\n      this.batchInput = \"\";\n      this.showBatchInput = false;\n    },\n    remove(item) {\n      const index = this.geneSelected.indexOf(item.value);\n      if (index >= 0) {\n        const geneName = this.geneSelected[index];\n        \n        // 删除基因数据\n        delete this.currentSelectedGeneInfo[geneName];\n        // 同时删除选择范围\n        delete this.selectedRange[geneName];\n        delete this.selectionStats[geneName];\n        \n        // 如果删除的是当前活跃基因，需要重新设置活跃基因\n        if (this.activeGeneForRendering === geneName) {\n          // 从剩余基因中选择一个作为新的活跃基因\n          const remainingGenes = this.geneSelected.filter(gene => gene !== geneName);\n          this.activeGeneForRendering = remainingGenes.length > 0 ? remainingGenes[0] : null;\n          \n          console.log(`删除了活跃基因 ${geneName}，新的活跃基因: ${this.activeGeneForRendering}`);\n        }\n        \n        this.geneSelected.splice(index, 1);\n        \n        // 检查是否还有剩余基因\n        if (this.geneSelected.length === 0) {\n          // 没有基因了，清除所有基因相关状态\n          console.log('删除了最后一个基因，清除所有基因状态');\n          this.activeGeneForRendering = null;\n          this.currentSelectedGeneInfo = {};\n          this.selectedRange = {};\n          this.selectionStats = {};\n          \n          // 发送空的基因数据，恢复默认颜色状态\n          this.$emit(\"getGeneExp\", {});\n          \n          // 清除基因表达范围过滤\n          this.$emit(\"currentRangeSelected\", {\n            gene: null,\n            range: null,\n            stats: null,\n            geneData: null\n          });\n        } else {\n          // 还有其他基因，发送当前活跃基因的数据\n          if (this.activeGeneForRendering && this.currentSelectedGeneInfo[this.activeGeneForRendering]) {\n            const activeGeneData = {\n              [this.activeGeneForRendering]: this.currentSelectedGeneInfo[this.activeGeneForRendering]\n            };\n            this.$emit(\"getGeneExp\", activeGeneData);\n        \n            // 发送活跃基因的选择范围\n            if (this.selectedRange[this.activeGeneForRendering] && this.selectionStats[this.activeGeneForRendering]) {\n              this.$emit(\"currentRangeSelected\", {\n                gene: this.activeGeneForRendering,\n                range: this.selectedRange[this.activeGeneForRendering],\n                stats: this.selectionStats[this.activeGeneForRendering],\n                geneData: this.currentSelectedGeneInfo[this.activeGeneForRendering],\n                color: true\n              });\n            }\n          } else {\n            this.$emit(\"getGeneExp\", {});\n          }\n        }\n      }\n    },\n    removeItem(item) {\n      // 处理从面板中删除项的情况\n      const index = this.geneSelected.indexOf(item);\n      if (index >= 0) {\n        // 删除基因数据\n        delete this.currentSelectedGeneInfo[item];\n        // 同时删除选择范围\n        delete this.selectedRange[item];\n        delete this.selectionStats[item];\n        \n        // 如果删除的是当前活跃基因，需要重新设置活跃基因\n        if (this.activeGeneForRendering === item) {\n          // 从剩余基因中选择一个作为新的活跃基因\n          const remainingGenes = this.geneSelected.filter(gene => gene !== item);\n          this.activeGeneForRendering = remainingGenes.length > 0 ? remainingGenes[0] : null;\n          \n          console.log(`删除了活跃基因 ${item}，新的活跃基因: ${this.activeGeneForRendering}`);\n        }\n        \n        this.geneSelected.splice(index, 1);\n        \n        // 检查是否还有剩余基因\n        if (this.geneSelected.length === 0) {\n          // 没有基因了，清除所有基因相关状态\n          console.log('删除了最后一个基因，清除所有基因状态');\n          this.activeGeneForRendering = null;\n          this.currentSelectedGeneInfo = {};\n          this.selectedRange = {};\n          this.selectionStats = {};\n          \n          // 发送空的基因数据，恢复默认颜色状态\n          this.$emit(\"getGeneExp\", {});\n          \n          // 清除基因表达范围过滤\n          this.$emit(\"currentRangeSelected\", {\n            gene: null,\n            range: null,\n            stats: null,\n            geneData: null\n          });\n        } else {\n          // 还有其他基因，发送当前活跃基因的数据\n        if (this.activeGeneForRendering && this.currentSelectedGeneInfo[this.activeGeneForRendering]) {\n          const activeGeneData = {\n            [this.activeGeneForRendering]: this.currentSelectedGeneInfo[this.activeGeneForRendering]\n          };\n          this.$emit(\"getGeneExp\", activeGeneData);\n            \n            // 发送活跃基因的选择范围\n            if (this.selectedRange[this.activeGeneForRendering] && this.selectionStats[this.activeGeneForRendering]) {\n              this.$emit(\"currentRangeSelected\", {\n                gene: this.activeGeneForRendering,\n                range: this.selectedRange[this.activeGeneForRendering],\n                stats: this.selectionStats[this.activeGeneForRendering],\n                geneData: this.currentSelectedGeneInfo[this.activeGeneForRendering],\n                color: true\n              });\n            }\n        } else {\n          this.$emit(\"getGeneExp\", {});\n        }\n        }\n      }\n    },\n    async selectGene(val){\n      // 防止递归调用的保护机制\n      if (this.isUpdating) {\n        console.log('selectGene: 正在更新中，跳过递归调用');\n        return;\n      }\n      \n      // 如果没有选中的基因，直接返回\n      if (!this.geneSelected || this.geneSelected.length === 0) {\n        console.log('selectGene: 没有选中的基因，清空状态');\n        this.currentSelectedGeneInfo = {};\n        this.selectedRange = {};\n        this.selectionStats = {};\n        this.activeGeneForRendering = null;\n        this.$emit(\"getGeneExp\", {});\n        this.$emit(\"currentRangeSelected\", {\n          gene: null,\n          range: null,\n          stats: null,\n          geneData: null\n        });\n        return;\n      }\n      \n      // 设置更新标志，防止递归\n      this.isUpdating = true;\n      \n      try {\n        console.log(`开始加载 ${this.geneSelected.length} 个基因的数据`);\n        \n        let selectedGeneInfo = {};\n        \n        // 获取所有选定基因的chunk索引\n        const chunksToLoad = new Set();\n        const geneIndexMap = new Map();\n        \n        for(let i = 0; i < this.geneSelected.length; i++) {\n          const geneName = this.geneSelected[i];\n          const index = this.geneList.findIndex(item => item.value === geneName);\n          \n          if (index === -1) {\n            console.warn(`基因 ${geneName} 在基因列表中未找到`);\n            continue;\n          }\n          \n          // 确保 geneData 已正确初始化\n          if (!this.geneData || !this.geneData.genes_per_chunk) {\n            console.error('geneData 未正确初始化，无法计算chunk索引');\n            continue;\n          }\n          \n          const chunkIndex = Math.floor(index / this.geneData.genes_per_chunk);\n          const geneIndex = index % this.geneData.genes_per_chunk;\n          \n          console.log(`基因 ${geneName}: 索引=${index}, chunk=${chunkIndex}, geneIndex=${geneIndex}`);\n          \n          chunksToLoad.add(chunkIndex);\n          geneIndexMap.set(geneName, {chunkIndex, geneIndex});\n        }\n        \n        // 批量加载所需的chunk数据\n        const loadPromises = [];\n        for(const chunkIndex of chunksToLoad) {\n          if(!this.chunkCache[chunkIndex]) {\n            console.log(`需要加载chunk ${chunkIndex}`);\n            loadPromises.push(this.loadChunkData(chunkIndex));\n          } else {\n            console.log(`chunk ${chunkIndex} 已在缓存中`);\n          }\n        }\n        \n        if(loadPromises.length > 0) {\n          console.log(`等待加载 ${loadPromises.length} 个chunk`);\n          await Promise.all(loadPromises);\n        }\n        \n        // 从缓存中获取所有基因数据\n        for(let i = 0; i < this.geneSelected.length; i++) {\n          const geneName = this.geneSelected[i];\n          const geneInfo = geneIndexMap.get(geneName);\n          \n          if (!geneInfo) {\n            console.warn(`基因 ${geneName} 的索引信息未找到`);\n            continue;\n          }\n          \n          const {chunkIndex, geneIndex} = geneInfo;\n          \n          if (!this.chunkCache[chunkIndex] || !this.chunkCache[chunkIndex][geneIndex]) {\n            console.warn(`基因 ${geneName} 的数据未找到 (chunk: ${chunkIndex}, index: ${geneIndex})`);\n            continue;\n          }\n          \n          const geneData = this.chunkCache[chunkIndex][geneIndex];\n          selectedGeneInfo[geneName] = geneData;\n          \n          // 添加调试信息\n          console.log(`基因 ${geneName} 数据加载完成: 长度=${geneData.length}, 前5个值=[${geneData.slice(0, 5).join(', ')}]`);\n          \n          // 检查数据的统计信息\n          const nonZeroCount = geneData.filter(val => val > 0).length;\n          const maxVal = Math.max(...geneData);\n          const minVal = Math.min(...geneData.filter(val => val > 0));\n          console.log(`基因 ${geneName} 统计: 非零值=${nonZeroCount}, 最大值=${maxVal.toFixed(3)}, 最小非零值=${minVal.toFixed(3)}`);\n        }\n        \n        this.currentSelectedGeneInfo = selectedGeneInfo;\n        console.log('所有基因数据加载完成:', Object.keys(this.currentSelectedGeneInfo));\n        \n        // 验证基因数据是否不同\n        this.validateGeneDataDifferences();\n        \n        // 如果没有活跃基因，自动设置第一个基因为活跃基因\n        if (!this.activeGeneForRendering && this.geneSelected.length > 0) {\n          this.activeGeneForRendering = this.geneSelected[0];\n          console.log(`自动设置第一个基因 ${this.activeGeneForRendering} 为活跃基因`);\n        }\n        \n        // 发送当前活跃基因的数据，而不是所有基因的数据\n        if (this.activeGeneForRendering && selectedGeneInfo[this.activeGeneForRendering]) {\n          const activeGeneData = {\n            [this.activeGeneForRendering]: selectedGeneInfo[this.activeGeneForRendering]\n          };\n          this.$emit(\"getGeneExp\", activeGeneData);\n        } else {\n          // 如果没有活跃基因，发送所有基因数据（保持向后兼容）\n          this.$emit(\"getGeneExp\", this.currentSelectedGeneInfo);\n        }\n        \n        // 为每个新选择的基因设置默认选择全部范围\n        for(const geneName of this.geneSelected) {\n          if (!this.selectedRange[geneName]) {\n            const range = this.getExpressionRange(geneName);\n            this.selectedRange[geneName] = {\n              start: range.min,\n              end: range.max\n            };\n            \n            // 计算选择范围内的细胞数量\n            this.calculateSelectionStats(geneName);\n          }\n        }\n        \n        // 保存选择范围\n        this.saveSelectedRanges();\n        \n        // 如果有活跃基因且有选择范围，自动发送选择范围信息\n        if (this.activeGeneForRendering && this.selectedRange[this.activeGeneForRendering]) {\n          console.log(`自动发送活跃基因 ${this.activeGeneForRendering} 的默认选择范围`);\n          this.$emit(\"currentRangeSelected\", {\n            gene: this.activeGeneForRendering,\n            range: this.selectedRange[this.activeGeneForRendering],\n            stats: this.selectionStats[this.activeGeneForRendering],\n            geneData: selectedGeneInfo[this.activeGeneForRendering],\n            color: true // 标记为染色模式\n          });\n        }\n        \n        // 强制更新组件以确保直方图正确渲染\n        this.$nextTick(() => {\n          this.$forceUpdate();\n          console.log('强制更新组件完成，直方图应该已重新渲染');\n        });\n        \n      } catch (error) {\n        console.error('selectGene 执行出错:', error);\n      } finally {\n        // 确保在任何情况下都清除更新标志\n        this.isUpdating = false;\n      }\n    },\n    \n    async loadChunkData(chunkIndex) {\n      console.log(`Loading chunk ${chunkIndex}`);\n      const chunkPath = buildDatasetPath(`genes/chunk_${chunkIndex}.bin`);\n      console.log(`Genes: 加载chunk路径: ${chunkPath}`);\n      let response = await fetch(chunkPath);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      let chunkData = await response.arrayBuffer();\n      console.log(chunkData,38666)\n      let dataView = new DataView(chunkData);\n      let allExps = [];\n      const rowLength = this.geneData.total_cells; // 每个一维数组的长度\n      // 将二进制数据转换为二维数组\n      let rowCount = dataView.byteLength / (4 * rowLength); // 计算有多少行\n      \n      for(let i = 0; i < rowCount; i++) {\n        let row = [];\n        for(let j = 0; j < rowLength; j++) {\n          let offset = (i * rowLength + j) * 4; // 每个Float32占用4字节\n          row.push(dataView.getFloat32(offset, true));\n        }\n        allExps.push(row);\n      }\n      \n      // 存入缓存\n      this.chunkCache[chunkIndex] = allExps;\n      return allExps;\n    },\n    \n    async getGeneData(geneName) {\n      let index = this.geneList.findIndex(item=>item.value===geneName);\n      // console.log(index, 180);\n      let chunkIndex = Math.floor(index/this.geneData.genes_per_chunk);\n      // console.log(chunkIndex, 182, this.geneData.genes_per_chunk);\n      let geneIndex = index % this.geneData.genes_per_chunk;\n      \n      // 检查缓存中是否已有数据\n      if(!this.chunkCache[chunkIndex]) {\n        await this.loadChunkData(chunkIndex);\n      }\n      \n      // console.log(Math.max(...this.chunkCache[chunkIndex][geneIndex]), 183);\n      // 从缓存中获取该基因的表达数据\n      // console.log(`Getting expression data for gene ${geneName} at index ${geneIndex}`);\n      return {exps: this.chunkCache[chunkIndex][geneIndex]};\n    },\n    \n    // 生成直方图数据\n    generateHistogramData(geneName) {\n      // 添加调试信息\n      console.log(`生成基因 ${geneName} 的直方图数据`);\n      \n      if (!this.currentSelectedGeneInfo[geneName]) {\n        console.warn(`基因 ${geneName} 的表达数据不存在`);\n        return [];\n      }\n      \n      const expressionData = this.currentSelectedGeneInfo[geneName];\n      console.log(`基因 ${geneName} 的表达数据长度: ${expressionData.length}`);\n      console.log(`基因 ${geneName} 的前10个表达值:`, expressionData.slice(0, 10));\n      \n      // 过滤掉0值和异常值\n      const nonZeroValues = expressionData.filter(val => val > 0);\n      console.log(`基因 ${geneName} 的非零值数量: ${nonZeroValues.length}`);\n      \n      if (nonZeroValues.length === 0) {\n        console.warn(`基因 ${geneName} 没有非零表达值`);\n        return []; // 如果没有非零值，返回空数组\n      }\n      \n      // 获取表达范围（使用与getExpressionRange一致的方法）\n      const range = this.getExpressionRange(geneName);\n      const min = range.min;\n      const max = range.max;\n      console.log(`基因 ${geneName} 的表达范围: min=${min.toFixed(3)}, max=${max.toFixed(3)}`);\n      \n      // 创建柱状图数据\n      const bins = 50; // 柱子数量\n      const binWidth = (max - min) / bins;\n      \n      // 初始化柱状图数据，确保每个柱子有确切的值范围\n      const histogramData = Array(bins).fill(0).map((_, i) => {\n        const binStart = min + i * binWidth;\n        const binEnd = min + (i + 1) * binWidth;\n        return {\n          value: binStart, // 使用区间起始值作为柱子的代表值\n          binStart: binStart,\n          binEnd: binEnd,\n          count: 0,\n          height: 0\n        };\n      });\n      \n      // 统计每个区间的值\n      nonZeroValues.forEach(val => {\n        const binIndex = Math.min(Math.floor((val - min) / binWidth), bins - 1);\n        if (binIndex >= 0) {\n          histogramData[binIndex].count++;\n        }\n      });\n      \n      // 计算柱高\n      const maxCount = Math.max(...histogramData.map(d => d.count));\n      histogramData.forEach(bin => {\n        bin.height = bin.count > 0 ? (bin.count / maxCount) * 90 : 0; // 最高90px\n      });\n      \n      // 添加调试信息\n      const totalCounts = histogramData.reduce((sum, bin) => sum + bin.count, 0);\n      const nonEmptyBins = histogramData.filter(bin => bin.count > 0).length;\n      console.log(`基因 ${geneName} 直方图统计: 总计数=${totalCounts}, 非空柱子=${nonEmptyBins}, 最大计数=${maxCount}`);\n      \n      return histogramData;\n    },\n    \n    // 计算基因的表达百分比\n    getExpressionPercentage(geneName) {\n      if (!this.currentSelectedGeneInfo[geneName]) return \"0.0\";\n      \n      const expressionData = this.currentSelectedGeneInfo[geneName];\n      const nonZeroCount = expressionData.filter(val => val > 0).length;\n      const percentage = (nonZeroCount / expressionData.length) * 100;\n      return percentage.toFixed(1);\n    },\n    \n    // 计算平均表达值\n    getAverageExpression(geneName) {\n      if (!this.currentSelectedGeneInfo[geneName]) return \"\";\n      \n      const expressionData = this.currentSelectedGeneInfo[geneName];\n      const sum = expressionData.reduce((acc, val) => acc + val, 0);\n      const avg = sum / expressionData.length;\n      \n      return avg.toExponential(5);\n    },\n    \n    // 获取基因的表达范围\n    getExpressionRange(geneName) {\n      if (!this.currentSelectedGeneInfo[geneName]) {\n        return { min: 0, max: 0 };\n      }\n      \n      // 直接从基因表达数据中获取范围\n      const expressionData = this.currentSelectedGeneInfo[geneName];\n      // 过滤掉0值和异常值\n      const nonZeroValues = expressionData.filter(val => val > 0);\n      \n      if (nonZeroValues.length === 0) {\n        return { min: 0, max: 1 }; // 防止没有非零值的情况\n      }\n      \n      // 不再使用对数转换，直接使用原始表达值\n      const min = Math.min(...nonZeroValues);\n      const max = Math.max(...nonZeroValues);\n      \n      return { min, max };\n    },\n    \n    // 从像素位置计算表达值\n    calculateExpressionValue(x, svgWidth, geneName) {\n      const range = this.getExpressionRange(geneName);\n      const min = range.min;\n      const max = range.max;\n      \n      // 考虑直方图的实际绘制区域（4%的左边距，96%的右边界）\n      const leftMargin = svgWidth * 0.04; // 4%左边距\n      const rightMargin = svgWidth * 0.04; // 4%右边距\n      const effectiveWidth = svgWidth - leftMargin - rightMargin; // 92%的有效宽度\n      \n      // 调整x位置，减去左边距\n      const adjustedX = Math.max(0, Math.min(x - leftMargin, effectiveWidth));\n      \n      // 将调整后的像素位置归一化到[0,1]范围\n      const normalizedPos = effectiveWidth > 0 ? adjustedX / effectiveWidth : 0;\n      \n      // 转换为表达值\n      return min + normalizedPos * (max - min);\n    },\n    \n    // 选择区域相关方法\n    startSelection(event, geneName) {\n      // 阻止浏览器默认的选择行为\n      event.preventDefault();\n      \n      // 检查是否有基因数据\n      if (!this.currentSelectedGeneInfo[geneName]) return;\n      \n      this.selectionActive = true;\n      this.currentSelectionGene = geneName;\n      \n      // 获取SVG元素相对于视口的位置\n      const svgElement = event.currentTarget;\n      const rect = svgElement.getBoundingClientRect();\n      \n      // 鼠标相对于SVG的位置\n      const x = event.clientX - rect.left;\n      \n      // 保存选择开始位置（相对于SVG）\n      this.selectionStart = { x: x };\n      this.selectionEnd = { x: x };\n      \n      // 初始化选择范围\n      this.selectedRange[geneName] = {\n        start: this.calculateExpressionValue(x, rect.width, geneName),\n        end: this.calculateExpressionValue(x, rect.width, geneName)\n      };\n      \n      // 保存选择范围\n      this.saveSelectedRanges();\n    },\n    \n    updateSelection(event, geneName) {\n      // 阻止浏览器默认的选择行为\n      event.preventDefault();\n      \n      if (!this.selectionActive || this.currentSelectionGene !== geneName) return;\n      \n      // 获取SVG元素相对于视口的位置\n      const svgElement = event.currentTarget;\n      const rect = svgElement.getBoundingClientRect();\n      \n      // 鼠标相对于SVG的位置\n      const x = Math.max(0, Math.min(event.clientX - rect.left, rect.width));\n      \n      // 更新结束位置\n      this.selectionEnd = { x: x };\n      \n      // 计算表达值范围\n      const startVal = this.calculateExpressionValue(this.selectionStart.x, rect.width, geneName);\n      const endVal = this.calculateExpressionValue(x, rect.width, geneName);\n      \n      // 更新选择范围，确保起始值小于结束值\n      this.selectedRange[geneName] = {\n        start: Math.min(startVal, endVal),\n        end: Math.max(startVal, endVal)\n      };\n      \n      // 不需要每次鼠标移动都保存\n      // this.saveSelectedRanges();\n    },\n    \n    endSelection(geneName) {\n      if (!this.selectionActive || this.currentSelectionGene !== geneName) return;\n      \n      this.selectionActive = false;\n      \n      // 如果选择区域太小，取消选择\n      if (Math.abs(this.selectionEnd.x - this.selectionStart.x) < 5) {\n        delete this.selectedRange[geneName];\n        delete this.selectionStats[geneName];\n        this.saveSelectedRanges();\n        \n        // 发送清除范围选择的事件\n        this.$emit(\"currentRangeSelected\", {\n          gene: geneName,\n          range: null,\n          stats: null,\n          geneData: null\n        });\n        return;\n      }\n      \n      // 计算选择区域内的细胞数量\n      this.calculateSelectionStats(geneName);\n      \n      // 改善选择精度，对齐到柱子边界\n      this.improveSelectionAccuracy(geneName);\n      \n      // 获取当前基因的表达数据\n      const geneExpressionData = this.currentSelectedGeneInfo[geneName];\n      \n      // 发送当前基因的选择范围和表达数据\n      this.$emit(\"currentRangeSelected\", {\n        gene: geneName,\n        range: this.selectedRange[geneName],\n        stats: this.selectionStats[geneName],\n        geneData: geneExpressionData, // 添加基因表达数据\n        color: this.geneColor\n      });\n      \n      // 保存选择范围\n      this.saveSelectedRanges();\n      \n      // 触发重绘\n      this.$forceUpdate();\n    },\n    \n    cancelSelection(event) {\n      if (event) {\n        event.preventDefault();\n      }\n      this.selectionActive = false;\n    },\n    \n    // 判断柱状图是否在选择范围内\n    isInSelectionRange(bar, geneName) {\n      const range = this.selectedRange[geneName];\n      if (!range) return false;\n      \n      // 检查范围是否正确设置\n      if (range.start === range.end) return false;\n      \n      // 确保使用正确的范围比较\n      const minVal = Math.min(range.start, range.end);\n      const maxVal = Math.max(range.start, range.end);\n      \n      // 判断柱子的范围是否与选择范围有重叠\n      // 只要柱子的起点或终点在选择范围内，或者柱子完全包含选择范围，就认为该柱子被选中\n      return (bar.binStart <= maxVal && bar.binEnd >= minVal);\n    },\n    \n    // 计算选择区域宽度 - 用于拖动选择时的实时显示\n    getSelectionWidth(geneName) {\n      if (!this.selectionActive || this.currentSelectionGene !== geneName) {\n        return 0;\n      }\n      \n      return Math.abs(this.selectionEnd.x - this.selectionStart.x);\n    },\n    \n    scaledX(index) {\n      return `${4 + (index * 92 / 50)}%`;\n    },\n    \n    // 保存选择范围到本地存储\n    saveSelectedRanges() {\n      try {\n        localStorage.setItem('geneSelectionRanges', JSON.stringify(this.selectedRange));\n        localStorage.setItem('geneSelectionStats', JSON.stringify(this.selectionStats));\n      } catch (error) {\n        console.error('Failed to save selection ranges:', error);\n      }\n    },\n    \n    // 从本地存储加载选择范围\n    loadSavedRanges() {\n      try {\n        const savedRanges = localStorage.getItem('geneSelectionRanges');\n        const savedStats = localStorage.getItem('geneSelectionStats');\n        \n        if (savedRanges) {\n          this.selectedRange = JSON.parse(savedRanges);\n        }\n        \n        if (savedStats) {\n          this.selectionStats = JSON.parse(savedStats);\n        }\n      } catch (error) {\n        console.error('Failed to load selection ranges:', error);\n      }\n    },\n    \n    // 计算选择区域内的细胞数量和占比\n    calculateSelectionStats(geneName) {\n      if (!this.selectedRange[geneName] || !this.currentSelectedGeneInfo[geneName]) return;\n      \n      const range = this.selectedRange[geneName];\n      const expressionData = this.currentSelectedGeneInfo[geneName];\n      \n      // 直接使用原始表达值，不做对数转换\n      \n      // 确保使用正确的范围界限\n      const minRange = Math.min(range.start, range.end);\n      const maxRange = Math.max(range.start, range.end);\n      \n      // 计算在选择范围内的细胞数量，使用略微放宽的比较\n      const cellsInRange = expressionData.filter(val => val >= (minRange - 0.0001) && val <= (maxRange + 0.0001)).length;\n      const totalCells = expressionData.length;\n      const percentage = (cellsInRange / totalCells * 100).toFixed(1);\n      \n      // 保存统计信息\n      this.selectionStats[geneName] = {\n        count: cellsInRange,\n        percentage: percentage\n      };\n    },\n    \n    // 获取选择区域统计信息\n    getSelectionStats(geneName) {\n      return this.selectionStats[geneName];\n    },\n    \n    // 清除特定基因的选择范围\n    clearSelection(geneName) {\n      delete this.selectedRange[geneName];\n      delete this.selectionStats[geneName];\n      this.saveSelectedRanges();\n      \n      // 将更新后的选择范围传递给父组件（空选择）\n      this.$emit(\"currentRangeSelected\", {\n        gene: geneName,\n        range: null,\n        stats: null,\n        geneData: null // 清除基因数据过滤\n      });\n      \n      // 触发重绘\n      this.$forceUpdate();\n    },\n    \n    // 格式化表达值\n    formatExpression(value) {\n      return value.toFixed(2);\n    },\n    \n    // 获取选择范围在SVG中的位置 - 用于选择后的显示\n    getSelectionRangePosition(geneName) {\n      if (!this.selectedRange[geneName]) return { start: 0, width: 0 };\n      \n      const range = this.selectedRange[geneName];\n      const svg = document.getElementById(`histogram-${geneName}`);\n      if (!svg) return { start: 0, width: 0 };\n      \n      const svgWidth = svg.getBoundingClientRect().width;\n      \n      // 使用当前基因的表达范围\n      const exprRange = this.getExpressionRange(geneName);\n      const min = exprRange.min;\n      const max = exprRange.max;\n      const totalRange = max - min;\n      \n      // 如果范围无效，返回默认值\n      if (totalRange <= 0) return { start: 0, width: 0 };\n      \n      // 考虑直方图的实际绘制区域（4%的左边距，92%的有效宽度）\n      const leftMargin = svgWidth * 0.04; // 4%左边距\n      const effectiveWidth = svgWidth * 0.92; // 92%的有效宽度\n      \n      // 将表达值转换为相对于有效区域的位置\n      const startRatio = (range.start - min) / totalRange;\n      const endRatio = (range.end - min) / totalRange;\n      \n      // 转换为SVG中的实际像素位置（加上左边距）\n      const startX = leftMargin + startRatio * effectiveWidth;\n      const endX = leftMargin + endRatio * effectiveWidth;\n      \n      return {\n        start: Math.min(startX, endX),\n        width: Math.max(1, Math.abs(endX - startX))\n      };\n    },\n    \n    // 计算X轴刻度值\n    getAxisTickValue(geneName, position) {\n      const range = this.getExpressionRange(geneName);\n      const min = range.min;\n      const max = range.max;\n      \n      // 根据位置插值计算对应的表达值\n      return min + position * (max - min);\n    },\n    \n    // 将所有选择范围传递给父组件\n    emitAllSelectionRanges() {\n      // 构造选择范围信息\n      const allRanges = {};\n      \n      for (const geneName in this.selectedRange) {\n        if (this.selectedRange[geneName] && this.selectionStats[geneName]) {\n          allRanges[geneName] = {\n            gene: geneName,\n            range: this.selectedRange[geneName],\n            stats: this.selectionStats[geneName]\n          };\n        }\n      }\n      \n      // 发送所有选择范围给父组件\n      this.$emit(\"currentRangeSelected\", allRanges[this.currentSelectionGene]||[]);\n    },\n    \n    // 处理面板点击事件\n    handlePanelClick(geneName,color=false) {\n      this.currentOpenPanel = geneName;\n      this.geneColor=color?color:this.geneColor\n      // 如果该基因有选择范围，发送给父组件\n      if (this.selectedRange[geneName] && this.selectionStats[geneName]) {\n        this.$emit(\"currentRangeSelected\", {\n          gene: geneName,\n          range: this.selectedRange[geneName],\n          stats: this.selectionStats[geneName],\n          geneData: this.currentSelectedGeneInfo[geneName], // 添加基因表达数据\n          color:this.geneColor\n        });\n      }\n    },\n    \n    // 将当前打开面板的选择范围传递给父组件\n    emitCurrentSelectionRange() {\n      if (!this.currentOpenPanel) return;\n      \n      const geneName = this.currentOpenPanel;\n      \n      if (this.selectedRange[geneName] && this.selectionStats[geneName]) {\n        this.$emit(\"currentRangeSelected\", {\n          gene: geneName,\n          range: this.selectedRange[geneName],\n          stats: this.selectionStats[geneName],\n          geneData: this.currentSelectedGeneInfo[geneName] // 添加基因表达数据\n        });\n      }\n    },\n    handleColorClicked(item){\n      this.geneColor=item\n      this.$emit(\"getGeneColor\",this.geneColor)\n    },\n    // 获取柱状图颜色\n    getBarColor(bar, geneName, index) {\n      // 如果在选择范围内，使用不同的颜色\n      if (this.isInSelectionRange(bar, geneName)) {\n        return '#1976D2'; // 选中的颜色\n      }\n      \n      // 如果开启了geneColor（同色系）模式\n      if (this.geneColor) {\n        // 获取表达范围\n        const range = this.getExpressionRange(geneName);\n        const { min, max } = range;\n        const totalRange = max - min;\n        \n        // 计算颜色深度（0-1之间）基于柱子在数据范围中的位置\n        const position = (bar.value - min) / totalRange;\n        \n        // 创建深浅不同但同色系的颜色\n        // 使用蓝色系列 - 从浅到深\n        const intensity = Math.round(160 + position * 90); // 范围从160-250 (浅蓝到深蓝)\n        return `rgb(25, ${intensity}, 210)`;\n      }\n      \n      // 默认颜色\n      return '#E0E0E0';\n    },\n    handleColorIconClick(geneName) {\n      console.log(`切换活跃基因为: ${geneName}`);\n      \n      // 设置当前活跃基因\n      this.activeGeneForRendering = geneName;\n      \n      // 发送单个基因的表达数据给父组件进行渲染\n      if (this.currentSelectedGeneInfo[geneName]) {\n        const singleGeneData = {\n          [geneName]: this.currentSelectedGeneInfo[geneName]\n        };\n        \n        console.log(`发送基因 ${geneName} 的表达数据用于渲染`);\n        this.$emit(\"getGeneExp\", singleGeneData);\n        \n        // 同时发送基因的选择范围信息\n        if (this.selectedRange[geneName] && this.selectionStats[geneName]) {\n          this.$emit(\"currentRangeSelected\", {\n            gene: geneName,\n            range: this.selectedRange[geneName],\n            stats: this.selectionStats[geneName],\n            geneData: this.currentSelectedGeneInfo[geneName], // 添加基因表达数据\n            color: true // 标记为染色模式\n          });\n        }\n      }\n    },\n    /**\n     * 验证基因数据是否不同\n     * 用于调试直方图显示相同的问题\n     */\n    validateGeneDataDifferences() {\n      console.log('=== 验证基因数据差异 ===');\n      const geneNames = Object.keys(this.currentSelectedGeneInfo);\n      \n      if (geneNames.length < 2) {\n        console.log('基因数量少于2个，无法比较差异');\n        return;\n      }\n      \n      for (let i = 0; i < geneNames.length; i++) {\n        for (let j = i + 1; j < geneNames.length; j++) {\n          const gene1 = geneNames[i];\n          const gene2 = geneNames[j];\n          const data1 = this.currentSelectedGeneInfo[gene1];\n          const data2 = this.currentSelectedGeneInfo[gene2];\n          \n          // 比较前10个值\n          const sample1 = data1.slice(0, 10);\n          const sample2 = data2.slice(0, 10);\n          const areSame = JSON.stringify(sample1) === JSON.stringify(sample2);\n          \n          console.log(`比较 ${gene1} vs ${gene2}:`);\n          console.log(`  ${gene1} 前10个值: [${sample1.join(', ')}]`);\n          console.log(`  ${gene2} 前10个值: [${sample2.join(', ')}]`);\n          console.log(`  前10个值是否相同: ${areSame}`);\n          \n          // 比较统计信息\n          const stats1 = this.getGeneStats(gene1);\n          const stats2 = this.getGeneStats(gene2);\n          console.log(`  ${gene1} 统计: ${JSON.stringify(stats1)}`);\n          console.log(`  ${gene2} 统计: ${JSON.stringify(stats2)}`);\n        }\n      }\n      console.log('=== 验证完成 ===');\n    },\n    \n    /**\n     * 获取基因的统计信息\n     */\n    getGeneStats(geneName) {\n      const data = this.currentSelectedGeneInfo[geneName];\n      if (!data) return null;\n      \n      const nonZeroValues = data.filter(val => val > 0);\n      return {\n        total: data.length,\n        nonZero: nonZeroValues.length,\n        min: nonZeroValues.length > 0 ? Math.min(...nonZeroValues).toFixed(3) : 0,\n        max: nonZeroValues.length > 0 ? Math.max(...nonZeroValues).toFixed(3) : 0,\n        avg: nonZeroValues.length > 0 ? (nonZeroValues.reduce((a, b) => a + b, 0) / nonZeroValues.length).toFixed(3) : 0\n      };\n    },\n    \n    /**\n     * 改善直方图选择精度的辅助方法\n     * 确保选择区域与柱子位置精确对齐\n     */\n    improveSelectionAccuracy(geneName) {\n      if (!this.selectedRange[geneName]) return;\n      \n      const range = this.selectedRange[geneName];\n      const histogramData = this.generateHistogramData(geneName);\n      \n      if (!histogramData || histogramData.length === 0) return;\n      \n      // 找到与选择范围最接近的柱子边界\n      let adjustedStart = range.start;\n      let adjustedEnd = range.end;\n      \n      // 寻找最接近选择起点的柱子边界\n      let minStartDiff = Infinity;\n      let minEndDiff = Infinity;\n      \n      histogramData.forEach(bar => {\n        const startDiff = Math.abs(bar.binStart - range.start);\n        const endDiff = Math.abs(bar.binEnd - range.end);\n        \n        if (startDiff < minStartDiff) {\n          minStartDiff = startDiff;\n          adjustedStart = bar.binStart;\n        }\n        \n        if (endDiff < minEndDiff) {\n          minEndDiff = endDiff;\n          adjustedEnd = bar.binEnd;\n        }\n      });\n      \n      // 如果调整幅度不大，应用调整\n      const startAdjustmentRatio = Math.abs(adjustedStart - range.start) / (range.end - range.start);\n      const endAdjustmentRatio = Math.abs(adjustedEnd - range.end) / (range.end - range.start);\n      \n      console.log(`基因 ${geneName} 选择精度调整:`);\n      console.log(`  原始范围: ${range.start.toFixed(3)} - ${range.end.toFixed(3)}`);\n      console.log(`  调整后范围: ${adjustedStart.toFixed(3)} - ${adjustedEnd.toFixed(3)}`);\n      console.log(`  调整比例: 起点=${(startAdjustmentRatio * 100).toFixed(1)}%, 终点=${(endAdjustmentRatio * 100).toFixed(1)}%`);\n      \n      if (startAdjustmentRatio < 0.1 && endAdjustmentRatio < 0.1) {\n        this.selectedRange[geneName] = {\n          start: Math.min(adjustedStart, adjustedEnd),\n          end: Math.max(adjustedStart, adjustedEnd)\n        };\n        \n        console.log(`  应用了精度调整`);\n        \n        // 重新计算统计信息\n        this.calculateSelectionStats(geneName);\n      } else {\n        console.log(`  调整幅度过大，保持原始选择`);\n      }\n    },\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.gene-symbol-btn {\n  display: flex;\n  justify-content: flex-end;\n}\n:deep .v-expansion-panel-header {\n  padding: 16px 0 !important;\n}\n.v-icon__svg {\n  width: 20px;\n  height: 20px;\n  fill: #6c6c6c;\n}\n.gene-symbol-icon {\n  justify-content: flex-end;\n  margin-right: 20px;\n  display: flex;\n  align-items: center;\n}\n\n/* 基因表达直方图样式 */\n.gene-expression-panel {\n  padding: 10px;\n  width: 100%;\n}\n\n.gene-expression-stats {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.expression-histogram {\n  margin-bottom: 10px;\n  width: 100%;\n}\n\n.histogram-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 5px;\n  width: 100%;\n}\n\n.selection-range {\n  font-size: 12px;\n  color: #1976D2;\n  font-weight: bold;\n}\n\n.selection-stats {\n  color: #555;\n  font-weight: normal;\n  margin-left: 4px;\n}\n\n.expression-percentage {\n  font-weight: bold;\n  color: #333;\n}\n\n.histogram-container {\n  width: 100%;\n  height: 120px;\n  position: relative;\n  overflow: visible;\n  user-select: none; /* 禁止文本选择 */\n  -webkit-user-select: none; /* Chrome, Safari, Opera */\n  -moz-user-select: none; /* Firefox */\n  -ms-user-select: none; /* IE 10+ */\n}\n\n.histogram-svg {\n  width: 100%;\n  height: 100%;\n  cursor: crosshair; /* 使用十字光标提示可选择 */\n}\n\n.axis text {\n  font-size: 12px;\n  fill: #666;\n}\n\n.gene-info {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 5px;\n}\n\n.gene-avg-expression {\n  font-family: monospace;\n  color: #333;\n  background-color: #f0f0f0;\n  padding: 2px 5px;\n  border-radius: 3px;\n}\n\n.expression-controls {\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n}\n\n/* 使柱状图适配整个面板宽度 */\n.v-expansion-panel-content :deep .v-expansion-panel-content__wrap {\n  padding: 0 12px;\n}\n\n/* 强化选择区域的视觉效果 */\nrect[fill=\"rgba(66, 133, 244, 0.2)\"] {\n  stroke-dasharray: 2, 1;\n  animation: pulse 2s infinite;\n}\n\n/* 染色图标样式 */\n.color-icon {\n  cursor: pointer;\n  transition: all 0.3s ease;\n  border-radius: 50%;\n  padding: 2px;\n}\n\n.color-icon:hover {\n  background-color: rgba(25, 118, 210, 0.1);\n  transform: scale(1.1);\n}\n\n.color-icon.active-gene {\n  background-color: rgba(25, 118, 210, 0.2);\n  box-shadow: 0 0 8px rgba(25, 118, 210, 0.5);\n}\n\n.color-icon.active-gene .v-icon__svg {\n  fill: #1976D2 !important;\n}\n\n@keyframes pulse {\n  0% {\n    stroke-opacity: 0.5;\n  }\n  50% {\n    stroke-opacity: 1;\n  }\n  100% {\n    stroke-opacity: 0.5;\n  }\n}\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Genes.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Genes.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Genes.vue?vue&type=template&id=02ae1d43&scoped=true\"\nimport script from \"./Genes.vue?vue&type=script&lang=js\"\nexport * from \"./Genes.vue?vue&type=script&lang=js\"\nimport style0 from \"./Genes.vue?vue&type=style&index=0&id=02ae1d43&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"02ae1d43\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('v-row',{staticClass:\"single-cell-graph\",staticStyle:{\"height\":\"100%\"}},[_vm._l((_vm.graphNum),function(i){return _c('v-col',{key:i,staticStyle:{\"height\":\"100%\"},attrs:{\"cols\":_vm.drawer ? 9 : 12 / _vm.graphNum}},[_c('v-progress-linear',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.loading),expression:\"loading\"}],attrs:{\"indeterminate\":\"\",\"color\":\"yellow darken-2\"}}),_c('div',{staticClass:\"graph-brain\"},[_c('GraphControls',{attrs:{\"datasetName\":_vm.datasetName,\"colorBy\":_vm.colorBy,\"filterNum\":_vm.filterNum,\"operateActive\":_vm.operateActive,\"graphNum\":_vm.graphNum},on:{\"changeOperator\":_vm.changeOperator,\"openSelectDrawer\":_vm.openSelectDrawer,\"separateGraph\":_vm.separateGraph,\"deleteSeparateGraph\":_vm.deleteSeparateGraph,\"downloadImage\":_vm.downloadImage}}),_c('v-row',{staticStyle:{\"flex-shrink\":\"0\",\"flex\":\"1\"}},[_c('v-col',{attrs:{\"cols\":\"12\"}},[(_vm.datasetType==='single')?_c('ScatterBrainSingle',{key:_vm.refKey,ref:\"singleChart\",refInFor:true,attrs:{\"operate\":_vm.operateActive,\"typeInfo\":_vm.typeInfo,\"colorData\":_vm.colorData,\"umapData\":_vm.partialData,\"dataRange\":_vm.dataRange,\"colorRange\":_vm.colorRange,\"total\":_vm.total,\"quadTree\":_vm.quadTree,\"hoverVal\":_vm.hoverCategory,\"nodeMap\":_vm.nodeMap,\"sizeData\":_vm.sizeData,\"colorBy\":_vm.colorBy,\"selectedTypes\":_vm.selectedTypes,\"typeClass\":_vm.typeClass,\"typeItem\":_vm.typeItem,\"typeValue\":_vm.typeValue,\"operatorType\":_vm.operatorType,\"filterNum\":_vm.filterNum,\"field\":_vm.field,\"fieldValue\":_vm.fieldValue,\"geneData\":_vm.geneData,\"geneExpRange\":_vm.geneExpRange},on:{\"selectArea\":_vm.selectArea}}):_c('ScatterBrainMultiple',{key:_vm.refKey,ref:\"multipleChart\",refInFor:true,attrs:{\"operate\":_vm.operateActive,\"typeInfo\":_vm.typeInfo,\"colorData\":_vm.colorData,\"umapData\":_vm.partialData,\"dataRange\":_vm.dataRange,\"colorRange\":_vm.colorRange,\"total\":_vm.total,\"quadTree\":_vm.quadTree,\"hoverVal\":_vm.hoverCategory,\"nodeMap\":_vm.nodeMap,\"sizeData\":_vm.sizeData,\"colorBy\":_vm.colorBy,\"selectedTypes\":_vm.selectedTypes,\"typeClass\":_vm.typeClass,\"typeItem\":_vm.typeItem,\"typeValue\":_vm.typeValue,\"operatorType\":_vm.operatorType,\"filterNum\":_vm.filterNum,\"field\":_vm.field,\"fieldValue\":_vm.fieldValue,\"summaryData\":_vm.summaryData},on:{\"selectArea\":_vm.selectArea}})],1)],1)],1)],1)}),(_vm.drawer)?_c('v-col',{staticStyle:{\"height\":\"100vh\",\"border-left\":\"1px solid #eee\"},attrs:{\"cols\":3}},[_c('div',{staticClass:\"drawer-title\"},[_c('h3',[_vm._v(\"Selected Cells\")]),_c('v-icon',{on:{\"click\":_vm.handleCloseDrawer}},[_vm._v(\"mdi-close\")])],1),_c('v-list',{staticStyle:{\"overflow-y\":\"auto\"},attrs:{\"height\":\"30vh\"}},[_c('v-list-item-group',{attrs:{\"color\":\"primary\"},model:{value:(_vm.selectedItem),callback:function ($$v) {_vm.selectedItem=$$v},expression:\"selectedItem\"}},_vm._l((_vm.selectNodes),function(item,index){return _c('v-list-item',{key:index,on:{\"click\":function($event){return _vm.changeCellItem(index)}}},[_c('v-list-item-avatar',[_c('span',{staticClass:\"color-circle\",style:({ backgroundColor: _vm._.get(item, 'key', '#fff') })})]),_c('v-list-item-content',[_c('v-list-item-title',[_vm._v(\" \"+_vm._s(_vm._.get(item, ['value', 0, 'node', _vm.colorBy], ''))+\" \")])],1),_c('v-list-item-action',[_c('span',[_vm._v(_vm._s(_vm._.get(item, [\"value\", \"length\"], \"\")))])])],1)}),1)],1),_c('div',{staticStyle:{\"border-top\":\"2px solid #eee\",\"height\":\"60vh\",\"overflow-y\":\"auto\"}},[_c('div',{staticClass:\"drawer-title ml-2\"},[_c('div',{staticStyle:{\"display\":\"flex\",\"align-items\":\"center\",\"width\":\"60%\"}},[_c('span',{staticClass:\"color-circle\",style:({ backgroundColor: _vm._.get(_vm.selectInfo, 'key', '#fff') })}),_c('span',{staticClass:\"ml-3 text-hidden\",staticStyle:{\"width\":\"50%\"}},[_vm._v(_vm._s(_vm._.get( _vm.selectInfo, [\"value\", 0, \"node\", \"Siletti_modf_SCANVI_L1\"], \"\" )))])]),_c('v-icon',{staticStyle:{\"flex\":\"1\"}},[_vm._v(\"mdi-download\")])],1),_c('virtual-list',{attrs:{\"data-key\":'id',\"data-sources\":_vm._.get(_vm.selectInfo, 'value', []),\"data-component\":_vm.itemComponent,\"keeps\":_vm._.get(_vm.selectInfo, ['value', 'length'], 0)}})],1)],1):_vm._e()],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticStyle:{\"height\":\"100%\"}},[_c('div',{ref:\"scatterBrain\",staticStyle:{\"height\":\"100%\"},attrs:{\"id\":\"canvasContainer\"}})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","class QuadNode {\r\n    constructor(data) {\r\n      this.id = data.id;\r\n      this.boundary = data.boundary; \r\n      this.pointsCount = data.points_count || 0;\r\n      this.hasFile = data.has_file || false;\r\n      this.children = null;\r\n      this.points = null;\r\n      \r\n      // 递归构建子节点\r\n      if (data.children) {\r\n        this.children = {\r\n          nw: data.children.nw ? new QuadNode(data.children.nw) : null,\r\n          ne: data.children.ne ? new QuadNode(data.children.ne) : null,\r\n          sw: data.children.sw ? new QuadNode(data.children.sw) : null,\r\n          se: data.children.se ? new QuadNode(data.children.se) : null\r\n        };\r\n      }\r\n    }\r\n\r\n    // 判断节点是否包含指定点\r\n    containsPoint(x, y) {\r\n      if (!this.boundary) return false;\r\n      const [minX, minY, maxX, maxY] = this.boundary;\r\n      return x >= minX && x <= maxX && y >= minY && y <= maxY;\r\n    }\r\n\r\n    // 计算节点的面积\r\n    getArea() {\r\n      if (!this.boundary) return 0;\r\n      const [minX, minY, maxX, maxY] = this.boundary;\r\n      return (maxX - minX) * (maxY - minY);\r\n    }\r\n\r\n    // 检查节点边界是否与搜索边界相交\r\n    intersectsBounds(searchBounds) {\r\n      if (!this.boundary) return false;\r\n      const [nodeMinX, nodeMinY, nodeMaxX, nodeMaxY] = this.boundary;\r\n      return !(\r\n        nodeMaxX < searchBounds.minX || \r\n        nodeMinX > searchBounds.maxX ||\r\n        nodeMaxY < searchBounds.minY || \r\n        nodeMinY > searchBounds.maxY\r\n      );\r\n    }\r\n  }\r\n  \r\n  class QuadTree {\r\n    constructor(jsonData) {\r\n      if (!jsonData || !jsonData.root) {\r\n        throw new Error('无效的四叉树数据');\r\n      }\r\n      this.blocksCount = jsonData.total_blocks || 0;\r\n      this.root = new QuadNode(jsonData.root);\r\n      this.nodeCache = new Map(); // 添加节点缓存\r\n      this.cacheLimit = 1000; // 设置缓存大小限制\r\n      \r\n      // 初始化搜索性能追踪\r\n      this.stats = {\r\n        cacheHits: 0,\r\n        cacheMisses: 0,\r\n        totalSearches: 0\r\n      };\r\n    }\r\n  \r\n    // 计算节点的面积\r\n    getNodeArea(node) {\r\n      return node ? node.getArea() : 0;\r\n    }\r\n\r\n    // 查找包含指定点的最小节点\r\n    findNodeByPoint(x, y) {\r\n      this.stats.totalSearches++;\r\n      \r\n      // 缓存查找，提高性能\r\n      const cacheKey = `point_${x.toFixed(3)}_${y.toFixed(3)}`;\r\n      if (this.nodeCache.has(cacheKey)) {\r\n        this.stats.cacheHits++;\r\n        return this.nodeCache.get(cacheKey);\r\n      }\r\n      \r\n      this.stats.cacheMisses++;\r\n      const result = this._findNodeByPointInternal(this.root, x, y);\r\n      \r\n      // 缓存结果，避免缓存过大\r\n      if (this.nodeCache.size >= this.cacheLimit) {\r\n        // 简单的LRU缓存策略：删除最早添加的项\r\n        const firstKey = this.nodeCache.keys().next().value;\r\n        this.nodeCache.delete(firstKey);\r\n      }\r\n      this.nodeCache.set(cacheKey, result);\r\n      return result;\r\n    }\r\n    \r\n    // 内部递归实现\r\n    _findNodeByPointInternal(node, x, y, depth = 0) {\r\n      if (!node || !node.containsPoint(x, y)) return null;\r\n\r\n      // 如果是叶子节点或没有子节点\r\n      if (!node.children) {\r\n        return node;\r\n      }\r\n      \r\n      // 尝试在子节点中寻找\r\n      let smallestNode = null;\r\n      let smallestArea = Infinity;\r\n      \r\n      for (const child of Object.values(node.children)) {\r\n        if (!child || !child.containsPoint(x, y)) continue;\r\n        \r\n        const result = this._findNodeByPointInternal(child, x, y, depth + 1);\r\n        if (result) {\r\n          const area = this.getNodeArea(result);\r\n          if (!smallestNode || area < smallestArea) {\r\n            smallestNode = result;\r\n            smallestArea = area;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // 如果在小区域没找到数据，返回当前节点\r\n      return (smallestNode && smallestNode.pointsCount > 0) ? smallestNode : node;\r\n    }\r\n\r\n    // 批量查询多个点，返回点到节点的映射\r\n    findMultiplePoints(points) {\r\n      const results = new Map();\r\n      for (const point of points) {\r\n        results.set(point, this.findNodeByPoint(point[0], point[1]));\r\n      }\r\n      return results;\r\n    }\r\n\r\n    // 查找与指定范围相交的所有节点\r\n    findNodesInRange(node, searchBounds) {\r\n      if (!node) return [];\r\n      \r\n      // 如果节点边界与搜索边界不相交，直接返回空数组\r\n      if (!node.intersectsBounds(searchBounds)) {\r\n        return [];\r\n      }\r\n      \r\n      let nodes = [];\r\n      \r\n      // 收集有数据文件的节点\r\n      if (node.hasFile) {\r\n        nodes.push(node);\r\n      }\r\n\r\n      // 递归搜索子节点\r\n      if (node.children) {\r\n        for (const child of Object.values(node.children)) {\r\n          if (child) {\r\n            // 使用 push(...) 代替 concat 以提高性能\r\n            nodes.push(...this.findNodesInRange(child, searchBounds));\r\n          }\r\n        }\r\n      }\r\n      \r\n      return nodes;\r\n    }\r\n\r\n    // 获取性能统计信息\r\n    getPerformanceStats() {\r\n      const cacheHitRate = this.stats.totalSearches > 0 \r\n        ? (this.stats.cacheHits / this.stats.totalSearches * 100).toFixed(2) \r\n        : 0;\r\n      \r\n      return {\r\n        ...this.stats,\r\n        cacheHitRate: `${cacheHitRate}%`,\r\n        cacheSize: this.nodeCache.size\r\n      };\r\n    }\r\n\r\n    // 清除缓存\r\n    clearCache() {\r\n      this.nodeCache.clear();\r\n      // 重置统计信息\r\n      this.stats = {\r\n        cacheHits: 0,\r\n        cacheMisses: 0,\r\n        totalSearches: 0\r\n      };\r\n    }\r\n  }\r\n  export {QuadNode,QuadTree}","// src/utils/indexedDB.js\n/**\n * IndexDB数据库操作工具\n * 用于存储和缓存大型数据\n */\n \nconst DB_NAME = 'cellVisDB';\nconst DB_VERSION = 2; // 🔥 升级到版本2以解决版本冲突问题\nconst STORE_NAME = 'dataCache';\n\n/**\n * 打开数据库连接\n * @returns {Promise<IDBDatabase>} 数据库实例\n */\nexport function openDB() {\n  return new Promise((resolve, reject) => {\n    // 🔥 首先尝试检查当前数据库版本，避免版本冲突\n    const checkRequest = window.indexedDB.open(DB_NAME);\n    \n    checkRequest.onsuccess = (event) => {\n      const existingDb = event.target.result;\n      const currentVersion = existingDb.version;\n      existingDb.close();\n      \n      // 使用当前版本或更高版本打开数据库\n      const targetVersion = Math.max(currentVersion, DB_VERSION);\n      console.log(`IndexedDB: 当前版本=${currentVersion}, 目标版本=${targetVersion}`);\n      \n      const request = window.indexedDB.open(DB_NAME, targetVersion);\n\n      // 当数据库首次创建或版本升级时触发\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        console.log(`IndexedDB: 升级数据库从版本 ${event.oldVersion} 到 ${event.newVersion}`);\n        \n        // 如果对象仓库不存在，则创建\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          console.log(`IndexedDB: 创建对象仓库 ${STORE_NAME}`);\n          db.createObjectStore(STORE_NAME, { autoIncrement: true });\n        }\n      };\n\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        console.log(`IndexedDB: 成功打开数据库，版本=${db.version}`);\n        resolve(db);\n      };\n\n      request.onerror = (event) => {\n        console.error('IndexedDB: 打开数据库失败:', event.target.error);\n        reject(event.target.error);\n      };\n    };\n    \n    checkRequest.onerror = (event) => {\n      // 如果检查失败，可能是数据库不存在，直接创建\n      console.log('IndexedDB: 数据库不存在，创建新数据库');\n      const request = window.indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(STORE_NAME)) {\n          db.createObjectStore(STORE_NAME, { autoIncrement: true });\n        }\n      };\n\n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        resolve(db);\n      };\n\n      request.onerror = (event) => {\n        console.error('IndexedDB: 创建数据库失败:', event.target.error);\n        reject(event.target.error);\n      };\n    };\n  });\n}\n\n/**\n * 存储数据到IndexDB\n * @param {string|number} key - 数据键名\n * @param {any} value - 要存储的数据\n * @returns {Promise<number>} 结果ID\n */\nexport function storeMapData(key, value) {\n  return openDB().then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      // 将value存储，同时手动指定key\n      const request = store.put(value, key);\n      \n      request.onsuccess = () => resolve(request.result);\n      \n      request.onerror = (event) => {\n        console.error('存储数据失败:', event.target.error);\n        reject(event.target.error);\n      };\n      \n      // 事务完成处理\n      transaction.oncomplete = () => {\n        console.log(`数据 ${key} 成功存储到IndexDB`);\n      };\n      \n      transaction.onerror = (event) => {\n        console.error('事务执行失败:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  });\n}\n\n/**\n * 从IndexDB获取数据\n * @param {string|number} key - 数据键名\n * @returns {Promise<any>} 查询结果\n */\nexport function getMapData(key) {\n  return openDB().then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.get(key);\n      \n      request.onsuccess = () => resolve(request.result);\n      \n      request.onerror = (event) => {\n        console.error('获取数据失败:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  });\n}\n\n/**\n * 从IndexDB删除数据\n * @param {string|number} key - 要删除的数据键名\n * @returns {Promise<void>}\n */\nexport function deleteMapData(key) {\n  return openDB().then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.delete(key);\n      \n      request.onsuccess = () => {\n        console.log(`数据 ${key} 成功从IndexDB删除`);\n        resolve();\n      };\n      \n      request.onerror = (event) => {\n        console.error('删除数据失败:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  });\n}\n\n/**\n * 清空数据库存储\n * @returns {Promise<void>}\n */\nexport function clearStore() {\n  return openDB().then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readwrite');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.clear();\n      \n      request.onsuccess = () => {\n        console.log('数据库存储已清空');\n        resolve();\n      };\n      \n      request.onerror = (event) => {\n        console.error('清空数据库失败:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  });\n}\n\n/**\n * 获取所有存储的键\n * @returns {Promise<Array>} 键数组\n */\nexport function getAllKeys() {\n  return openDB().then(db => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(STORE_NAME, 'readonly');\n      const store = transaction.objectStore(STORE_NAME);\n      const request = store.getAllKeys();\n      \n      request.onsuccess = () => resolve(request.result);\n      \n      request.onerror = (event) => {\n        console.error('获取键列表失败:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  });\n}\n\n/**\n * 完全删除IndexedDB数据库（用于解决版本冲突问题）\n * @returns {Promise<void>}\n */\nexport function deleteDatabase() {\n  return new Promise((resolve, reject) => {\n    console.log('IndexedDB: 开始删除数据库以解决版本冲突...');\n    \n    const deleteRequest = window.indexedDB.deleteDatabase(DB_NAME);\n    \n    deleteRequest.onsuccess = () => {\n      console.log('IndexedDB: 数据库删除成功');\n      resolve();\n    };\n    \n    deleteRequest.onerror = (event) => {\n      console.error('IndexedDB: 数据库删除失败:', event.target.error);\n      reject(event.target.error);\n    };\n    \n    deleteRequest.onblocked = () => {\n      console.warn('IndexedDB: 数据库删除被阻止，可能有其他连接未关闭');\n      // 等待一段时间后重试\n      setTimeout(() => {\n        resolve();\n      }, 1000);\n    };\n  });\n}\n\n/**\n * 重置IndexedDB（删除并重新创建）\n * @returns {Promise<void>}\n */\nexport async function resetDatabase() {\n  try {\n    await deleteDatabase();\n    // 删除后重新打开数据库，这将创建新的数据库\n    const db = await openDB();\n    db.close();\n    console.log('IndexedDB: 数据库重置完成');\n  } catch (error) {\n    console.error('IndexedDB: 重置数据库失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 清理特定数据集的缓存数据\n * @param {string} datasetName - 数据集名称\n * @returns {Promise<void>}\n */\nexport async function clearDatasetCache(datasetName) {\n  try {\n    console.log(`IndexedDB: 开始清理数据集 ${datasetName} 的缓存...`);\n    \n    const db = await openDB();\n    const transaction = db.transaction(STORE_NAME, 'readwrite');\n    const store = transaction.objectStore(STORE_NAME);\n    \n    // 获取所有键\n    const allKeys = await new Promise((resolve, reject) => {\n      const request = store.getAllKeys();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n    \n    // 过滤出属于指定数据集的键\n    const datasetKeys = allKeys.filter(key => \n      typeof key === 'string' && key.startsWith(`${datasetName}_`)\n    );\n    \n    console.log(`IndexedDB: 找到 ${datasetKeys.length} 个需要清理的缓存项`);\n    \n    // 删除这些键对应的数据\n    const deletePromises = datasetKeys.map(key => \n      new Promise((resolve, reject) => {\n        const deleteRequest = store.delete(key);\n        deleteRequest.onsuccess = () => resolve();\n        deleteRequest.onerror = () => reject(deleteRequest.error);\n      })\n    );\n    \n    await Promise.all(deletePromises);\n    \n    // 等待事务完成\n    await new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve();\n      transaction.onerror = () => reject(transaction.error);\n    });\n    \n    db.close();\n    console.log(`IndexedDB: 数据集 ${datasetName} 的缓存清理完成`);\n    \n  } catch (error) {\n    console.error(`IndexedDB: 清理数据集缓存失败 (${datasetName}):`, error);\n    throw error;\n  }\n}\n","// 性能监控工具\n\n// 跟踪平均FPS\nexport class FpsCounter {\n  constructor(updateInterval = 1000) {\n    this.frames = 0;\n    this.lastTime = performance.now();\n    this.fps = 0;\n    this.updateInterval = updateInterval;\n  }\n\n  update() {\n    this.frames++;\n    const now = performance.now();\n    const elapsed = now - this.lastTime;\n\n    if (elapsed >= this.updateInterval) {\n      this.fps = (this.frames * 1000) / elapsed;\n      this.lastTime = now;\n      this.frames = 0;\n    }\n    \n    return this.fps;\n  }\n}\n\n// 跟踪操作执行时间\nexport class PerformanceTracker {\n  constructor() {\n    this.marks = new Map();\n    this.timings = {};\n    this.lastRenderTime = 0;\n    this.averageRenderTime = 0;\n    this.renderCount = 0;\n  }\n\n  startMark(name) {\n    this.marks.set(name, performance.now());\n  }\n\n  endMark(name) {\n    if (!this.marks.has(name)) return 0;\n    \n    const startTime = this.marks.get(name);\n    const duration = performance.now() - startTime;\n    \n    if (!this.timings[name]) {\n      this.timings[name] = {\n        total: 0,\n        count: 0,\n        average: 0,\n        min: duration,\n        max: duration\n      };\n    }\n    \n    const timing = this.timings[name];\n    timing.total += duration;\n    timing.count++;\n    timing.average = timing.total / timing.count;\n    timing.min = Math.min(timing.min, duration);\n    timing.max = Math.max(timing.max, duration);\n    \n    this.marks.delete(name);\n    return duration;\n  }\n\n  trackRenderTime(duration) {\n    this.lastRenderTime = duration;\n    this.renderCount++;\n    this.averageRenderTime = ((this.averageRenderTime * (this.renderCount - 1)) + duration) / this.renderCount;\n  }\n\n  getTimings() {\n    return this.timings;\n  }\n\n  getAverageRenderTime() {\n    return this.averageRenderTime;\n  }\n\n  clear() {\n    this.marks.clear();\n    this.timings = {};\n  }\n}\n\n// 检测并警告潜在的性能问题\nexport class PerformanceWatcher {\n  constructor(thresholds = {}) {\n    this.thresholds = {\n      renderTime: 16, // 16ms (约60fps)\n      loadTime: 500,  // 500ms\n      memoryLimit: 200 * 1024 * 1024, // 200MB\n      ...thresholds\n    };\n    this.warnings = [];\n  }\n\n  checkRenderTime(duration) {\n    if (duration > this.thresholds.renderTime) {\n      const warning = `渲染时间(${duration.toFixed(2)}ms)超过阈值(${this.thresholds.renderTime}ms)`;\n      this.warnings.push({type: 'render', message: warning, time: performance.now()});\n      return warning;\n    }\n    return null;\n  }\n\n  checkLoadTime(duration) {\n    if (duration > this.thresholds.loadTime) {\n      const warning = `加载时间(${duration.toFixed(2)}ms)超过阈值(${this.thresholds.loadTime}ms)`;\n      this.warnings.push({type: 'load', message: warning, time: performance.now()});\n      return warning;\n    }\n    return null;\n  }\n\n  checkMemoryUsage() {\n    if (window.performance && window.performance.memory) {\n      const memory = window.performance.memory.usedJSHeapSize;\n      if (memory > this.thresholds.memoryLimit) {\n        const warning = `内存使用(${(memory/1024/1024).toFixed(2)}MB)超过阈值(${(this.thresholds.memoryLimit/1024/1024).toFixed(2)}MB)`;\n        this.warnings.push({type: 'memory', message: warning, time: performance.now()});\n        return warning;\n      }\n    }\n    return null;\n  }\n\n  getWarnings() {\n    return this.warnings;\n  }\n\n  clearWarnings() {\n    this.warnings = [];\n  }\n}\n\n// 导出单例实例供全局使用\nexport const perfTracker = new PerformanceTracker();\nexport const perfWatcher = new PerformanceWatcher();\nexport const fpsCounter = new FpsCounter(); ","/**\n * 数据加载工具\n * 实现数据分块加载，提高大数据集加载性能\n */\nimport { storeMapData, getMapData, resetDatabase } from './indexDB';\nimport { getDataSource, DataSourceType } from '@/api';\nimport { perfTracker, perfWatcher } from './performance';\nimport { buildDatasetPath, getDataset } from '../api/config';\n\n/**\n * 生成数据集特定的缓存键\n * @param {string} baseKey - 基础缓存键\n * @returns {string} - 包含数据集信息的缓存键\n */\nfunction createDatasetCacheKey(baseKey) {\n  const currentDataset = getDataset();\n  if (!currentDataset) {\n    console.warn('无法获取当前数据集，使用默认缓存键');\n    return baseKey;\n  }\n  return `${currentDataset}_${baseKey}`;\n}\n\n/**\n * 检查数据是否已缓存\n * @param {string} key - 缓存键名\n * @returns {Promise<Object|null>} - 缓存数据或null\n */\nexport async function checkCache(key) {\n  try {\n    const data = await getMapData(key);\n    return data || null;\n  } catch (error) {\n    console.error('检查缓存失败:', error);\n    return null;\n  }\n}\n\n/**\n * 缓存数据到IndexedDB\n * @param {string} key - 缓存键名\n * @param {Object} data - 要缓存的数据\n * @returns {Promise<boolean>} - 是否缓存成功\n */\nexport async function cacheData(key, data) {\n  try {\n    await storeMapData(key, data);\n    return true;\n  } catch (error) {\n    console.error('缓存数据失败:', error);\n    return false;\n  }\n}\n\n/**\n * 加载二进制文件并解析为Float32Array\n * @param {string} url - 二进制文件URL\n * @param {string} [cacheKey=null] - 缓存键名，为null则不缓存\n * @returns {Promise<Float32Array>} - 解析后的浮点数数组\n */\nexport async function loadBinaryFile(url, cacheKey = null) {\n  // 先检查缓存\n  if (cacheKey) {\n    const cachedData = await checkCache(cacheKey);\n    if (cachedData) {\n      console.log(`使用缓存数据: ${cacheKey}`);\n      return new Float32Array(cachedData);\n    }\n  }\n  \n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`加载二进制文件失败: ${response.status} ${response.statusText}`);\n    }\n    \n    const arrayBuffer = await response.arrayBuffer();\n    const data = new Float32Array(arrayBuffer);\n    \n    // 缓存数据（如果需要）\n    if (cacheKey) {\n      // 将TypedArray转换为普通数组以便存储\n      const dataArray = Array.from(data);\n      await cacheData(cacheKey, dataArray);\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`加载二进制文件失败: ${url}`, error);\n    return new Float32Array(0);\n  }\n}\n\n/**\n * 加载坐标数据（二进制格式）\n * @param {string} blockPath - 数据块路径\n * @returns {Promise<{points: Float32Array, count: number}>} - 坐标数据和点数\n */\nexport async function loadCoordinatesBin(blockPath) {\n  const baseCacheKey = `coords_${blockPath.split('/').pop()}`;\n  const cacheKey = createDatasetCacheKey(baseCacheKey);\n  \n  try {\n    perfTracker.startMark(`loadCoords:${blockPath}`);\n    \n    const data = await loadBinaryFile(blockPath, cacheKey);\n    \n    // 验证数据是否有效\n    if (data.length === 0 || data.length % 2 !== 0) {\n      throw new Error(`坐标数据格式无效: ${blockPath}`);\n    }\n    \n    const count = data.length / 2; // 每个点有X,Y两个坐标\n    \n    const duration = perfTracker.endMark(`loadCoords:${blockPath}`);\n    perfWatcher.checkLoadTime(duration);\n    \n    return { points: data, count };\n  } catch (error) {\n    console.error(`加载坐标数据失败: ${blockPath}`, error);\n    return { points: new Float32Array(0), count: 0 };\n  }\n}\n\n/**\n * 加载细胞属性数据（二进制格式）\n * @param {string} attrPath - 属性数据路径\n * @returns {Promise<Float32Array>} - 属性数据\n */\nexport async function loadCellAttributeBin(attrPath) {\n  const baseCacheKey = `attr_${attrPath.split('/').pop()}`;\n  const cacheKey = createDatasetCacheKey(baseCacheKey);\n  \n  try {\n    perfTracker.startMark(`loadAttr:${attrPath}`);\n    \n    const data = await loadBinaryFile(attrPath, cacheKey);\n    \n    const duration = perfTracker.endMark(`loadAttr:${attrPath}`);\n    perfWatcher.checkLoadTime(duration);\n    \n    return data;\n  } catch (error) {\n    console.error(`加载细胞属性数据失败: ${attrPath}`, error);\n    return new Float32Array(0);\n  }\n}\n\n/**\n * 分块加载数据\n * @param {string} url - 数据URL\n * @param {number} offset - 起始字节位置\n * @param {number} chunkSize - 块大小（字节）\n * @returns {Promise<Object>} - 加载的数据块\n */\nexport async function fetchDataChunk(url, offset, chunkSize) {\n  try {\n    // 根据数据源类型决定如何获取数据\n    const dataSource = getDataSource();\n    let response;\n    \n    if (dataSource === DataSourceType.LOCAL) {\n      // 本地文件加载，使用Range头\n      response = await fetch(url, {\n        headers: { Range: `bytes=${offset}-${offset + chunkSize - 1}` }\n      });\n    } else {\n      // 从API获取，传递分块参数\n      const apiUrl = url.replace(/^\\//, '/api/');\n      response = await fetch(`${apiUrl}?offset=${offset}&size=${chunkSize}`);\n    }\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const text = await response.text();\n    \n    // 处理不完整的JSON字符串\n    let jsonText = text;\n    const lastBrace = text.lastIndexOf('}');\n    const lastBracket = text.lastIndexOf(']');\n    \n    // 找到最后一个完整的JSON对象或数组\n    const lastComplete = Math.max(lastBrace, lastBracket);\n    if (lastComplete > 0) {\n      jsonText = text.substring(0, lastComplete + 1);\n    }\n    \n    try {\n      // 尝试解析JSON，如果是片段则包装为数组\n      return JSON.parse(`[${jsonText}]`);\n    } catch (parseError) {\n      console.error('JSON解析错误，可能是数据片段不完整:', parseError);\n      return [];\n    }\n  } catch (error) {\n    console.error('获取数据块失败:', error);\n    return [];\n  }\n}\n\n/**\n * 加载分块数据并合并\n * @param {string} url - 数据URL\n * @param {number} [chunkSize=1000000] - 块大小（字节）\n * @param {string} [cacheKey=null] - 缓存键名，为null则不缓存\n * @returns {Promise<Object>} - 合并后的完整数据\n */\nexport async function loadChunkedData(url, chunkSize = 1000000, cacheKey = null) {\n  if (cacheKey) {\n    const cachedData = await checkCache(cacheKey);\n    if (cachedData) {\n      console.log(`使用缓存数据: ${cacheKey}`);\n      return cachedData;\n    }\n  }\n  \n  let allData = [];\n  let offset = 0;\n  let hasMore = true;\n  let attempts = 0;\n  const MAX_ATTEMPTS = 5;\n  \n  while (hasMore && attempts < MAX_ATTEMPTS) {\n    try {\n      const chunk = await fetchDataChunk(url, offset, chunkSize);\n      \n      if (chunk.length === 0) {\n        hasMore = false;\n      } else {\n        allData = [...allData, ...chunk];\n        offset += chunkSize;\n      }\n      \n      attempts = 0; // 重置尝试次数\n    } catch (error) {\n      attempts++;\n      console.error(`加载数据块失败，重试 ${attempts}/${MAX_ATTEMPTS}:`, error);\n      \n      if (attempts >= MAX_ATTEMPTS) {\n        console.error('达到最大重试次数，停止加载');\n        hasMore = false;\n      }\n      \n      // 等待后重试\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  }\n  \n  // 如果需要，缓存合并后的数据\n  if (cacheKey && allData.length > 0) {\n    await cacheData(cacheKey, allData);\n  }\n  \n  return allData;\n}\n\n/**\n * 加载特定基因表达数据\n * @param {string} geneName - 基因名称\n * @returns {Promise<Object>} - 基因表达数据\n */\nexport async function loadGeneExpression(geneName) {\n  const baseCacheKey = `gene_${geneName}`;\n  const cacheKey = createDatasetCacheKey(baseCacheKey);\n  const cachedData = await checkCache(cacheKey);\n  \n  if (cachedData) {\n    return cachedData;\n  }\n  \n  try {\n    let response;\n    const dataSource = getDataSource();\n    \n    if (dataSource === DataSourceType.LOCAL) {\n      response = await fetch(`/gene_expressions/${geneName}.json`);\n    } else {\n      response = await fetch(`/api/single-cell/gene-expression/${geneName}`);\n    }\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // 缓存数据\n    await cacheData(cacheKey, data);\n    \n    return data;\n  } catch (error) {\n    console.error(`加载基因${geneName}表达数据失败:`, error);\n    return null;\n  }\n}\n\n/**\n * 使用WebWorker处理大型数据集\n * @param {Array} data - 要处理的数据\n * @param {string} operationType - 处理类型\n * @returns {Promise<Object>} - 处理结果\n */\nexport function processDataInWorker(data, operationType) {\n  return new Promise((resolve, reject) => {\n    // 创建Blob对象，包含Worker代码\n    const workerCode = `\n      self.onmessage = function(e) {\n        const { data, operationType } = e.data;\n        \n        let result;\n        switch (operationType) {\n          case 'buildQuadTree':\n            result = buildQuadTree(data);\n            break;\n          case 'calculateStatistics':\n            result = calculateStatistics(data);\n            break;\n          default:\n            self.postMessage({ error: '未知操作类型' });\n            return;\n        }\n        \n        self.postMessage({ result });\n      };\n      \n      // 四叉树构建函数\n      function buildQuadTree(data) {\n        // 实际的四叉树构建逻辑\n        return { message: '四叉树构建完成' };\n      }\n      \n      // 计算统计数据函数\n      function calculateStatistics(data) {\n        // 计算统计数据\n        return { message: '统计计算完成' };\n      }\n    `;\n    \n    const blob = new Blob([workerCode], { type: 'application/javascript' });\n    const worker = new Worker(URL.createObjectURL(blob));\n    \n    worker.onmessage = function(e) {\n      if (e.data.error) {\n        reject(new Error(e.data.error));\n      } else {\n        resolve(e.data.result);\n      }\n      worker.terminate();\n    };\n    \n    worker.onerror = function(error) {\n      reject(error);\n      worker.terminate();\n    };\n    \n    worker.postMessage({ data, operationType });\n  });\n}\n\n// 数据加载器 - 负责处理异步数据加载和错误处理\n\n/**\n * 数据加载管理器类\n */\nexport class DataLoader {\n  constructor() {\n    this.maxRetries = 3;\n    this.retryDelay = 500; // 基础重试延迟（毫秒）\n    this.abortController = null;\n    this.loadStatus = {\n      inProgress: false,\n      loaded: 0,\n      total: 0,\n      errors: []\n    };\n  }\n\n  /**\n   * 加载四叉树结构\n   * @param {string} path - 四叉树数据路径\n   * @returns {Promise<Object>} - 四叉树数据\n   */\n  async loadQuadTree(path) {\n    perfTracker.startMark('loadQuadTree');\n    \n    try {\n      const response = await this.fetchWithRetry(path);\n      if (!response.ok) {\n        throw new Error(`加载四叉树失败: ${response.status} ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      const duration = perfTracker.endMark('loadQuadTree');\n      perfWatcher.checkLoadTime(duration);\n      \n      return data;\n    } catch (error) {\n      this.handleError('加载四叉树失败', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 加载数据块\n   * @param {string} blockPath - 数据块路径\n   * @returns {Promise<Array>} - 数据块内容\n   */\n  async loadDataBlock(blockPath) {\n    perfTracker.startMark(`loadBlock:${blockPath}`);\n    \n    try {\n      const response = await this.fetchWithRetry(blockPath);\n      if (!response.ok) {\n        throw new Error(`加载数据块失败: ${response.status} ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      const duration = perfTracker.endMark(`loadBlock:${blockPath}`);\n      perfWatcher.checkLoadTime(duration);\n      \n      return data;\n    } catch (error) {\n      this.handleError(`加载数据块失败: ${blockPath}`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 加载坐标数据块\n   * @param {string} blockId - 数据块ID\n   * @returns {Promise<{points: Float32Array, count: number}>} - 坐标数据和点数量\n   */\n  async loadCoordinateBlock(blockId) {\n    try {\n      // 首先尝试从IndexedDB缓存获取 - 使用数据集特定的缓存键\n      const baseCacheKey = blockId;\n      const cacheKey = createDatasetCacheKey(baseCacheKey);\n      let data = await getMapData(cacheKey);\n      \n      // 如果缓存中没有数据或数据为空，则直接从文件加载\n      if (!data || data.length === 0) {\n        console.log(`节点 ${blockId} 未从缓存中获取到数据，尝试从文件加载`);\n        \n        // 构建文件路径\n        const blockPath = buildDatasetPath(`blocks/${blockId}.bin`);\n        \n        try {\n          // 直接从文件加载\n          const { points, count } = await loadCoordinatesBin(blockPath);\n          \n          if (count > 0) {\n            // 将数据转换为普通点坐标数组\n            data = [];\n            for (let i = 0; i < points.length; i += 2) {\n              data.push([points[i], points[i + 1]]);\n            }\n            \n            // 将新加载的数据存储到缓存\n            await storeMapData(cacheKey, data);\n            console.log(`节点 ${blockId} 数据已重新加载并缓存，共 ${count} 个点`);\n          } else {\n            console.warn(`节点 ${blockId} 文件加载失败或为空`);\n            return { points: new Float32Array(0), count: 0 };\n          }\n        } catch (fileError) {\n          console.error(`从文件加载节点 ${blockId} 失败:`, fileError);\n          return { points: new Float32Array(0), count: 0 };\n        }\n      }\n      \n      // 将数据转换为Float32Array\n      const flatArray = new Float32Array(data.flat());\n      const count = data.length;\n      \n      return { points: flatArray, count };\n    } catch (error) {\n      // 🔥 处理IndexedDB版本冲突错误\n      if (error.name === 'VersionError') {\n        console.warn(`IndexedDB版本冲突，重置数据库后重试加载节点 ${blockId}`);\n        try {\n          await resetDatabase();\n          // 重置后递归重试一次\n          return await this.loadCoordinateBlock(blockId);\n        } catch (resetError) {\n          console.error('重置IndexedDB失败:', resetError);\n        }\n      }\n      \n      console.error(`加载节点 ${blockId} 数据失败:`, error);\n      \n      // 作为最后的备选方案，直接从文件加载而不使用缓存\n      try {\n        console.log(`作为备选方案，直接从文件加载节点 ${blockId}`);\n        const blockPath = buildDatasetPath(`blocks/${blockId}.bin`);\n        const { points, count } = await loadCoordinatesBin(blockPath);\n        \n        if (count > 0) {\n          const data = [];\n          for (let i = 0; i < points.length; i += 2) {\n            data.push([points[i], points[i + 1]]);\n          }\n          const flatArray = new Float32Array(data.flat());\n          return { points: flatArray, count: data.length };\n        }\n      } catch (fallbackError) {\n        console.error(`备选方案也失败:`, fallbackError);\n      }\n      \n      return { points: new Float32Array(0), count: 0 };\n    }\n  }\n\n  /**\n   * 加载细胞属性数据（二进制格式）\n   * @param {string} fieldName - 字段名称\n   * @param {Function} progressCallback - 可选进度回调函数\n   * @returns {Promise<Float32Array>} - 属性数据\n   */\n  async loadCellAttribute(fieldName, progressCallback = null) {\n    try {\n      const attrPath = buildDatasetPath(`cell_types/${fieldName}.bin`);\n      \n      // 记录加载状态\n      this.loadStatus.inProgress = true;\n      this.loadStatus.field = fieldName;\n      \n      // 强制从文件加载最新的属性数据\n      console.log(`从路径加载属性数据: ${attrPath}`);\n      \n      // 创建新的abort控制器\n      this.abortController = new AbortController();\n      \n      // 带进度指示器的加载\n      const response = await this.fetchWithRetry(attrPath, {\n        signal: this.abortController.signal,\n        // 添加随机参数避免缓存\n        cache: 'no-store',\n        headers: {\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\n          'Pragma': 'no-cache'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      // 获取总大小\n      const contentLength = response.headers.get('Content-Length');\n      const total = contentLength ? parseInt(contentLength, 10) : 0;\n      \n      // 创建响应读取器和接收缓冲区\n      const reader = response.body.getReader();\n      const chunks = [];\n      let received = 0;\n      \n      // 读取数据流\n      while (true) {\n        const { done, value } = await reader.read();\n        \n        if (done) {\n          break;\n        }\n        \n        chunks.push(value);\n        received += value.length;\n        \n        // 报告进度\n        if (progressCallback && total > 0) {\n          progressCallback(Math.min(received / total, 0.99)); // 最多到99%，留1%给处理部分\n        }\n      }\n      \n      // 合并chunks到一个ArrayBuffer\n      const dataArray = new Uint8Array(received);\n      let position = 0;\n      for (const chunk of chunks) {\n        dataArray.set(chunk, position);\n        position += chunk.length;\n      }\n      \n      // 将Uint8Array转换为Float32Array\n      const dataBuffer = dataArray.buffer;\n      const floatArray = new Float32Array(dataBuffer);\n      \n      console.log(`属性 ${fieldName} 加载完成，数据长度: ${floatArray.length}`);\n      \n      // 更新缓存 - 使用数据集特定的缓存键\n      const baseCacheKey = `attr_${fieldName}`;\n      const cacheKey = createDatasetCacheKey(baseCacheKey);\n      await cacheData(cacheKey, Array.from(floatArray));\n      \n      // 完成进度报告\n      if (progressCallback) {\n        progressCallback(1.0);\n      }\n      \n      this.loadStatus.inProgress = false;\n      return floatArray;\n    } catch (error) {\n      this.loadStatus.inProgress = false;\n      \n      if (error.name === 'AbortError') {\n        console.log(`加载属性 ${fieldName} 已取消`);\n        return new Float32Array(0);\n      }\n      \n      this.handleError(`加载属性 ${fieldName} 失败`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 加载所有细胞属性数据\n   * @param {Array<string>} fields - 字段名称数组\n   * @param {Function} progressCallback - 进度回调函数\n   * @returns {Promise<Map<string, Float32Array>>} - 属性数据映射\n   */\n  async loadAllCellAttributes(fields, progressCallback) {\n    this.loadStatus.inProgress = true;\n    this.loadStatus.loaded = 0;\n    this.loadStatus.total = fields.length;\n    this.loadStatus.errors = [];\n    \n    const attributesMap = new Map();\n    \n    try {\n      // 使用Promise.allSettled处理部分失败情况\n      const results = await Promise.allSettled(\n        fields.map(async (field, index) => {\n          try {\n            const data = await this.loadCellAttribute(field);\n            attributesMap.set(field, data);\n            \n            this.loadStatus.loaded++;\n            if (progressCallback) {\n              progressCallback({\n                loaded: this.loadStatus.loaded,\n                total: this.loadStatus.total,\n                progress: this.loadStatus.loaded / this.loadStatus.total,\n                field\n              });\n            }\n            \n            return { field, success: true };\n          } catch (error) {\n            this.loadStatus.errors.push({ field, error: error.message });\n            return { field, success: false, error: error.message };\n          }\n        })\n      );\n      \n      // 处理失败的结果\n      const failures = results.filter(result => result.status === 'rejected' || \n                                      (result.status === 'fulfilled' && !result.value.success));\n      \n      if (failures.length > 0) {\n        console.warn(`${failures.length}个细胞属性数据加载失败`);\n      }\n      \n      return attributesMap;\n    } catch (error) {\n      this.handleError('加载细胞属性数据失败', error);\n      throw error;\n    } finally {\n      this.loadStatus.inProgress = false;\n    }\n  }\n\n  /**\n   * 取消正在进行的数据加载\n   */\n  cancelLoading() {\n    if (this.abortController) {\n      this.abortController.abort();\n      this.loadStatus.inProgress = false;\n      console.log('数据加载已取消');\n    }\n  }\n\n  /**\n   * 获取当前加载状态\n   * @returns {Object} - 加载状态对象\n   */\n  getLoadStatus() {\n    return { ...this.loadStatus };\n  }\n\n  /**\n   * 带重试的fetch请求\n   * @param {string} url - 请求URL\n   * @param {Object} options - fetch选项\n   * @returns {Promise<Response>} - fetch响应\n   */\n  async fetchWithRetry(url, options = {}) {\n    let lastError;\n    \n    for (let attempt = 0; attempt <= this.maxRetries; attempt++) {\n      try {\n        if (this.abortController) {\n          options.signal = this.abortController.signal;\n        }\n        \n        return await fetch(url, options);\n      } catch (error) {\n        lastError = error;\n        \n        // 如果是abort错误或已达到最大重试次数，则直接抛出错误\n        if (error.name === 'AbortError' || attempt === this.maxRetries) {\n          throw error;\n        }\n        \n        // 否则等待一段时间后重试\n        const delay = this.retryDelay * Math.pow(2, attempt);\n        console.warn(`请求失败，${delay}ms后重试(${attempt + 1}/${this.maxRetries}): ${url}`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError;\n  }\n\n  /**\n   * 统一处理错误\n   * @param {string} context - 错误上下文\n   * @param {Error} error - 错误对象\n   */\n  handleError(context, error) {\n    if (error.name === 'AbortError') {\n      console.log(`${context}: 操作已取消`);\n      return;\n    }\n    \n    console.error(`${context}:`, error);\n    \n    // 记录到加载状态\n    this.loadStatus.errors.push({\n      context,\n      message: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n}\n\n// 导出单例实例供全局使用\nexport const dataLoader = new DataLoader(); ","/**\n * ScatterRenderer.js\n * 用于管理和处理WebGL散点图渲染的类\n */\n\nimport createREGL from \"regl\";\nimport { mat4 } from \"gl-matrix\";\nimport { QuadTree } from \"./quadTree.js\";\nimport { storeMapData, getMapData, resetDatabase, clearDatasetCache } from \"./indexDB\";\nimport { perfTracker, perfWatcher, fpsCounter } from \"./performance\";\nimport { createCoordinateTransformer, cleanupWebGLResources } from \"./webglHelpers\";\nimport { generateVertexShader, generateFragmentShader, generateSelectionBoxVertexShader, generateSelectionBoxFragmentShader, generateMaskLayerFragmentShader } from \"./shaderFactory\";\nimport { getColorFromValue } from \"../utils/tool.js\";\nimport webgl2 from \"./regl-webgl2-compat\";\nimport { dataLoader } from \"./dataLoader\";\nimport { buildDatasetPath, getDataset } from \"../api/config\";\n\nexport class ScatterRenderer {\n  constructor(container, options = {}) {\n    this.container = container;\n    this.options = {\n      pointSize: 2.0, // 减小默认点大小从3.0到2.0\n      defaultZoom: 1,\n      defaultOffset: [0, 0],\n      antialiasing: true,  // 开启抗锯齿\n      responderActive: true, // 启用交互响应\n      selectionEnabled: true, // 是否启用选区功能\n      hoverThrottleTime: 50, // 悬停检测的节流时间（毫秒）\n      highlightSize: 1.3, // 减小高亮点的大小倍数从1.5到1.3\n      ...options\n    };\n    \n    // 状态变量\n    this.state = {\n      zoom: this.options.defaultZoom,\n      offsetX: this.options.defaultOffset[0],\n      offsetY: this.options.defaultOffset[1],\n      isPanning: false,\n      isSelecting: false,\n      selectionMode: false, // 新增：是否处于选择模式\n      selectionStart: null,\n      selectionEnd: null,\n      selectionVisible: false, // 新增：是否显示选区框\n      selectedIndices: [],\n      hoverCategory: -1,\n      isZooming: false,\n      targetZoom: this.options.defaultZoom,\n      velocity: { x: 0, y: 0 },\n      inertiaEnabled: true,\n      lastMousePosition: null,\n      lastTime: 0,\n      isChunkLoading: false,\n      renderPending: false,\n      lastRenderTime: 0,\n      renderInterval: 16, // 约60fps\n      animationFrameId: null,\n      viewportRatio: 1, // 用于适配渲染分辨率\n      isDirty: true,  // 标记是否需要重新渲染\n      selectionStartData: null,\n      selectionEndData: null,\n      lastHoverTime: 0, // 上次悬停检测的时间\n      highlightAttributeName: null, // 高亮属性名称\n      highlightAttributeValues: [], // 修改：高亮属性值数组，支持多个值的并集\n      highlightFilter: null, // 高亮过滤数据\n      isTransitioning: false, // 新增：是否处于过渡状态\n      transitionTimer: null, // 新增：过渡状态计时器\n      isMouseInListArea: false, // 鼠标是否在列表区域内\n      hoverAttributeName: null, // 新增：当前悬停属性名称\n      hoverValueIndex: -1, // 新增：当前悬停属性值索引\n      highlightByAttribute: false, // 新增：是否通过其他属性高亮\n      isCheckHighlight: false, // 标记是否是勾选高亮\n      // 新增：多属性交集高亮状态\n      multiAttributeHighlight: {\n        enabled: false, // 是否启用多属性交集高亮\n        attributes: new Map(), // 存储多个属性的勾选状态 Map<attributeName, valueIndices[]>\n        isCheckHighlight: false // 是否是勾选高亮模式\n      }\n    };\n    \n    // 渲染资源\n    this.resources = {\n      canvas: null,\n      regl: null,\n      drawScatter: null,\n      positionBuffer: null,\n      geneBuffer: null,\n      vertexIdBuffer: null,\n      filterTexture: null,\n      textureSize: [0, 0],\n      colorTexture: null,\n      highlightTexture: null,\n      hoverTexture: null,\n      geneColorTexture: null\n    };\n    \n    // 数据相关\n    this.data = {\n      dataRange: {},\n      colorIndex: 0,\n      textureIndex: 0,\n      treeMap: new Map(),\n      total: 0,\n      count: 0,\n      quadTree: null,\n      field: [],\n      filterNum: 0,\n      nodeIndices: new Map(),\n      geneData: null,\n      geneExpressionRange: null\n    };\n    \n    // 事件回调\n    this.callbacks = {\n      onDataLoaded: null,\n      onPointSelected: null,\n      onPointHovered: null\n    };\n    \n    // 绑定方法到实例\n    this.renderFrame = this.renderFrame.bind(this);\n    \n    // 创建节流版本的悬停检测函数\n    this.throttledHoverPoint = this.throttle(this.hoverPoint.bind(this), this.options.hoverThrottleTime);\n  }\n  \n  /**\n   * 创建节流函数\n   * @param {Function} func - 要节流的函数\n   * @param {number} limit - 节流时间间隔（毫秒）\n   * @returns {Function} 节流后的函数\n   */\n  throttle(func, limit) {\n    return async (...args) => {\n      const now = Date.now();\n      if (now - this.state.lastHoverTime >= limit) {\n        this.state.lastHoverTime = now;\n        return await func(...args);\n      }\n    };\n  }\n  \n  /**\n   * 初始化渲染环境\n   */\n  async initialize() {\n    try {\n      perfTracker.startMark('initializeRenderer');\n      \n      // 创建画布\n      const canvas = document.createElement(\"canvas\");\n      this.resources.canvas = canvas;\n      this.container.appendChild(canvas);\n      \n      // 设置画布尺寸\n      const pixelRatio = window.devicePixelRatio || 1;\n      this.state.viewportRatio = pixelRatio;\n      canvas.width = this.container.offsetWidth * pixelRatio;\n      canvas.height = this.container.offsetHeight * pixelRatio;\n      canvas.style.width = '100%';\n      canvas.style.height = '100%';\n      \n      // 创建REGL上下文\n      const requiredExtensions = [\n        \"OES_texture_float\",\n        \"EXT_color_buffer_float\", \n        \"OES_texture_float_linear\",\n        \"OES_standard_derivatives\" // 用于抗锯齿\n      ];\n      \n      // 使用regl-webgl2-compat确保兼容性\n      this.resources.regl = webgl2.overrideContextType(() =>\n        createREGL({\n          canvas,\n          extensions: requiredExtensions,\n          attributes: { \n            alpha: true,\n            antialias: this.options.antialiasing,\n            depth: true,\n            preserveDrawingBuffer: true\n          },\n          onDone: (err) => {\n            if (err) {\n              console.error(\"REGL初始化失败:\", err);\n              return;\n            }\n            console.log(\"REGL初始化成功\");\n          }\n        })\n      );\n      \n      // 设置事件监听器\n      this.setupEventListeners();\n      \n      // 初始化过滤纹理\n      this.resources.filterTexture = this.resources.regl.texture({\n        width: 1000,\n        height: 1,\n        format: \"rgba\",\n        type: \"float32\",\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrapS: \"clamp\",\n        wrapT: \"clamp\"\n      });\n      \n      // 启动渲染循环\n      this.startRenderLoop();\n      \n      const duration = perfTracker.endMark('initializeRenderer');\n      console.log(`渲染器初始化完成，耗时: ${duration.toFixed(2)}ms`);\n      \n      return true;\n    } catch (error) {\n      console.error(\"初始化渲染器失败:\", error);\n      this.handleError(\"初始化渲染器时\", error);\n      return false;\n    }\n  }\n  \n  /**\n   * 设置事件监听器\n   */\n  setupEventListeners() {\n    const canvas = this.resources.canvas;\n    \n    // 滚轮缩放 - 移除选区模式下的限制，允许在选区模式下缩放\n    canvas.addEventListener(\"wheel\", (event) => {\n      event.preventDefault();\n      // 允许在任何模式下缩放\n      this.smoothZoom(event.deltaY);\n    });\n    \n    // 根据操作模式（平移或选择）设置相应的事件\n    this.setPanningMode();\n    \n    // 监听窗口大小变化\n    window.addEventListener(\"resize\", this.handleResize.bind(this));\n    \n    // 使用ResizeObserver监听容器尺寸变化\n    if (window.ResizeObserver) {\n      // 创建一个更强的防抖函数，防止ResizeObserver循环\n      const debouncedResize = this.createDebouncedResize();\n      \n      this.resizeObserver = new ResizeObserver((entries) => {\n        // 使用try-catch包装，防止ResizeObserver循环错误\n        try {\n          for (const entry of entries) {\n            if (entry.target === this.container) {\n              console.log('ResizeObserver: 容器尺寸变化');\n              debouncedResize();\n              break;\n            }\n          }\n        } catch (error) {\n          // 忽略ResizeObserver循环错误，这是浏览器的已知问题\n          if (error.message && error.message.includes('ResizeObserver loop')) {\n            console.warn('ResizeObserver循环检测，已忽略:', error.message);\n          } else {\n            console.error('ResizeObserver错误:', error);\n          }\n        }\n      });\n      \n      this.resizeObserver.observe(this.container);\n      console.log('ResizeObserver已设置，监听容器尺寸变化');\n    } else {\n      console.warn('ResizeObserver不可用，仅使用window resize事件');\n    }\n  }\n  \n  /**\n   * 创建防抖的resize处理函数\n   * 使用更强的防抖机制，防止在DOM快速变化时出现问题\n   */\n  createDebouncedResize() {\n    let timeoutId = null;\n    let isProcessing = false;\n    \n    return () => {\n      // 如果正在处理中，跳过\n      if (isProcessing) {\n        return;\n      }\n      \n      // 清除之前的定时器\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      // 设置新的定时器\n      timeoutId = setTimeout(() => {\n        // 检查组件是否仍然存在\n        if (!this.container || !this.resources.canvas || !this.resources.regl) {\n          console.warn('组件已销毁，跳过resize处理');\n          return;\n        }\n        \n        isProcessing = true;\n        \n        try {\n          this.handleResize();\n        } catch (error) {\n          console.error('处理resize时出错:', error);\n        } finally {\n          isProcessing = false;\n        }\n      }, 50); // 增加延迟时间，确保DOM稳定\n    };\n  }\n  \n  /**\n   * 加载数据并准备渲染\n   * @param {Object} options - 加载选项\n   */\n  async loadData(options = {}) {\n    try {\n      perfTracker.startMark('loadData');\n      \n      const {\n        quadTreePath = buildDatasetPath('quad_tree.json'),\n        total = 100000,\n        field = [],\n        colorBy = '',\n        colorIndex = 0\n      } = options;\n      \n      // 验证total参数\n      if (typeof total !== 'number' || total <= 0) {\n        console.error(`无效的total参数: ${total}，必须为正数`);\n        throw new Error(`无效的total参数: ${total}，必须为正数`);\n      }\n      \n      // 验证field参数\n      if (!Array.isArray(field) || field.length === 0) {\n        console.warn('字段列表为空或不是数组，将使用默认空数组');\n        this.data.field = [];\n      } else {\n        this.data.field = field;\n      }\n      \n      // 验证colorIndex参数\n      if (typeof colorIndex !== 'number' || colorIndex < 0 || (field.length > 0 && colorIndex >= field.length)) {\n        console.warn(`无效的colorIndex: ${colorIndex}，将使用默认值0`);\n        this.data.colorIndex = 0;\n      } else {\n        this.data.colorIndex = colorIndex;\n      }\n      \n      this.data.total = total;\n      \n      console.log(`开始加载数据: total=${total}, field.length=${field.length}, colorIndex=${this.data.colorIndex}`);\n      \n      // 1. 加载四叉树结构\n      console.log(`从 ${quadTreePath} 加载四叉树`);\n      const treeRes = await dataLoader.loadQuadTree(quadTreePath);\n      const quadTree = new QuadTree(treeRes);\n      \n      this.data.quadTree = quadTree;\n      this.data.dataRange = {\n        min_x: quadTree.root.boundary[0],\n        max_x: quadTree.root.boundary[2],\n        min_y: quadTree.root.boundary[1],\n        max_y: quadTree.root.boundary[3]\n      };\n      \n      this.data.treeMap.set(\"tree\", quadTree);\n      \n      // 2. 创建基因缓冲区 - 确保大小为正数\n      const geneBufferSize = Math.max(1, total * 4 * 2);\n      this.resources.geneBuffer = this.resources.regl.buffer(\n        new Float32Array(geneBufferSize).fill(-1)\n      );\n      \n      // 3. 创建过滤纹理\n      this.resources.filterTexture = this.resources.regl.texture({\n        width: 100,\n        height: 1,\n        format: \"rgba\",\n        type: \"float32\",\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrap: \"clamp\",\n      });\n      \n      // 4. 加载四叉树数据块\n      await this.loadTreeChunks(quadTree, total);\n      \n      // 5. 回调通知数据加载完成\n      if (this.callbacks.onDataLoaded) {\n        this.callbacks.onDataLoaded({\n          total: this.data.count,\n          dataRange: this.data.dataRange\n        });\n      }\n      \n      const duration = perfTracker.endMark('loadData');\n      console.log(`数据加载完成，耗时: ${duration.toFixed(2)}ms，加载了${this.data.count}个点`);\n      \n      return true;\n    } catch (error) {\n      console.error(\"加载数据失败:\", error);\n      this.handleError(\"加载数据时\", error);\n      return false;\n    }\n  }\n  \n  /**\n   * 加载四叉树数据块\n   * @param {Object} quadTree - 四叉树实例\n   * @param {number} total - 总点数（预估值）\n   */\n  async loadTreeChunks(quadTree, total = 100000) {\n    perfTracker.startMark('loadTreeChunks');\n    \n    try {\n      this.state.isChunkLoading = true;\n      \n      // 🔥 动态buffer管理：根据当前数据集实际大小分配buffer\n      console.log(`开始加载四叉树数据块，预估总点数: ${total}`);\n      \n      // 1. 预留20%的额外空间以处理预估误差和未来扩展\n      const bufferCapacity = Math.ceil(total * 1.2);\n      const bufferSize = bufferCapacity * 4 * 2; // 每个点2个坐标，每个坐标4字节\n      \n      console.log(`创建位置缓冲区，容量: ${bufferCapacity} 个点 (${(bufferSize / 1024 / 1024).toFixed(2)} MB)`);\n      \n      // 创建位置缓冲区\n      this.resources.positionBuffer = this.resources.regl.buffer({\n        length: bufferSize,\n        type: \"float\",\n        usage: \"dynamic\",\n      });\n      \n      // 记录当前buffer容量，用于后续的动态调整判断\n      this.resources.positionBufferCapacity = bufferCapacity;\n      \n      // 2. 计算纹理大小 - 也需要预留额外空间\n      const MAX_TEXTURE_SIZE = this.resources.regl._gl.getParameter(\n        this.resources.regl._gl.MAX_TEXTURE_SIZE\n      );\n      const textureCapacity = bufferCapacity; // 纹理容量与buffer容量保持一致\n      const textureWidth = Math.min(MAX_TEXTURE_SIZE, Math.ceil(Math.sqrt(textureCapacity)));\n      const textureHeight = Math.ceil(textureCapacity / textureWidth);\n\n      this.resources.textureSize = [textureWidth, textureHeight];\n      this.resources.textureCapacity = textureWidth * textureHeight;\n      \n      console.log(`纹理初始化: 容量=${this.resources.textureCapacity}, 尺寸=${textureWidth}x${textureHeight}`);\n      \n      // 3. 创建顶点ID缓冲区 - 使用实际容量\n      this.resources.vertexIdBuffer = new Float32Array(\n        Array.from({ length: bufferCapacity }, (_, i) => i)\n      );\n      \n      // 4. 创建单一的颜色纹理\n      console.log(`创建单一的颜色纹理，用于存储当前选择的属性`);\n      \n      // 初始化空的颜色纹理\n      this.resources.colorTexture = this.resources.regl.texture({\n        shape: [textureWidth, textureHeight],\n        format: \"rgba\",\n        type: \"float32\",\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrap: \"clamp\",\n        data: new Float32Array(textureWidth * textureHeight * 4).fill(0),\n      });\n      \n      // 5. 收集待加载的节点ID\n      const nodeIds = [];\n      const collectNodeIds = (node) => {\n        if (node.hasFile) {\n          nodeIds.push(node.id);\n        }\n        if (node.children) {\n          Object.values(node.children)\n            .filter((child) => child !== null)\n            .forEach(collectNodeIds);\n        }\n      };\n      \n      collectNodeIds(quadTree.root);\n      console.log(`需要加载${nodeIds.length}个数据块的坐标数据`);\n      \n      // 6. 加载当前选中的属性数据（不是所有属性）\n      if (this.data.colorIndex >= 0 && this.data.colorIndex < this.data.field.length) {\n        // 只加载当前用于着色的属性\n        const currentField = this.data.field[this.data.colorIndex];\n        console.log(`加载当前选中的属性数据: ${currentField}`);\n        await this.loadCellAttribute(currentField);\n      }\n      \n      // 7. 广度优先遍历加载坐标数据块\n      const queue = [quadTree.root];\n      let count = 0;\n      let renderedChunkCount = 0;\n      const chunkRenderInterval = 3; // 每加载3个数据块渲染一次\n      \n      // 用于跟踪节点的全局索引范围\n      this.data.nodeIndices = new Map();\n      \n      // 准备进度更新回调\n      const updateProgress = (progress) => {\n        // 可以在这里更新UI进度条\n        console.log(`坐标数据加载进度: ${(progress * 100).toFixed(1)}%`);\n      };\n\n      // 处理所有节点\n      while (queue.length > 0) {\n        const node = queue.shift();\n        \n        try {\n          if (node.hasFile) {\n            perfTracker.startMark(`processChunk:${node.id}`);\n            \n            // 加载坐标数据（二进制格式）\n            const { points, count: chunkPointCount } = await dataLoader.loadCoordinateBlock(node.id);\n            \n            if (chunkPointCount > 0) {\n              // 记录当前节点的点数量和全局起始索引\n              this.data.nodeIndices.set(node.id, {\n                startIndex: count,\n                count: chunkPointCount\n              });\n              \n              // 创建二维坐标数组\n              let chunkPoints = [];\n              for (let i = 0; i < points.length; i += 2) {\n                chunkPoints.push([points[i], points[i + 1]]);\n              }\n\n              // 🔥 动态buffer扩展检查：如果即将超出buffer容量，则扩展buffer\n              const newTotalCount = count + chunkPointCount;\n              if (newTotalCount > this.resources.positionBufferCapacity) {\n                console.warn(`检测到数据量超出预期，当前: ${newTotalCount}, 容量: ${this.resources.positionBufferCapacity}`);\n                await this.expandBuffers(newTotalCount);\n              }\n              \n              // 更新位置缓冲区\n              this.resources.positionBuffer.subdata(chunkPoints, count * 2 * 4);\n              \n              // 仅更新当前活跃属性的纹理\n              if (this.data.colorIndex >= 0) {\n                await this.updateTextureForAttribute(\n                  this.data.colorIndex,\n                  count,\n                  chunkPointCount,\n                  node.id\n                );\n              }\n\n              count += chunkPointCount;\n              renderedChunkCount++;\n              \n              // 周期性渲染更新，提高用户体验\n              if (renderedChunkCount % chunkRenderInterval === 0 || queue.length === 0) {\n                updateProgress(count / total);\n                \n                if (!this.resources.drawScatter) {\n                  this.createDrawCommand();\n                } else {\n                  this.scheduleRender(true);\n                }\n              }\n            }\n            \n            perfTracker.endMark(`processChunk:${node.id}`);\n          }\n          \n          // 添加子节点到队列\n          if (node.children) {\n            Object.values(node.children)\n              .filter((child) => child !== null)\n              .forEach((child) => queue.push(child));\n          }\n        } catch (error) {\n          console.error(`加载节点 ${node.id} 失败:`, error);\n        }\n      }\n      \n      this.data.count = count;\n      this.state.isChunkLoading = false;\n      \n      // 加载完成后进行最终渲染\n      if (this.resources.drawScatter) {\n        this.scheduleRender(true);\n      } else {\n        this.createDrawCommand();\n      }\n      \n      const loadTime = perfTracker.endMark('loadTreeChunks');\n      perfWatcher.checkLoadTime(loadTime);\n      \n      return true;\n    } catch (error) {\n      console.error(\"加载四叉树数据块失败:\", error);\n      this.state.isChunkLoading = false;\n      return false;\n    }\n  }\n  \n  /**\n   * 动态扩展WebGL缓冲区和纹理\n   * @param {number} requiredCapacity - 需要的最小容量\n   */\n  async expandBuffers(requiredCapacity) {\n    try {\n      // 计算新的容量，增加30%的额外空间以减少频繁扩展\n      const newCapacity = Math.ceil(requiredCapacity * 1.3);\n      const newBufferSize = newCapacity * 4 * 2; // 每个点2个坐标，每个坐标4字节\n      \n      console.log(`扩展缓冲区: 从 ${this.resources.positionBufferCapacity} 扩展到 ${newCapacity} 个点`);\n      \n      // 1. 保存现有的位置数据\n      const oldBuffer = this.resources.positionBuffer;\n      const oldCapacity = this.resources.positionBufferCapacity;\n      \n      // 2. 创建新的位置缓冲区\n      this.resources.positionBuffer = this.resources.regl.buffer({\n        length: newBufferSize,\n        type: \"float\",\n        usage: \"dynamic\",\n      });\n      \n      // 3. 如果有旧数据，复制到新缓冲区\n      if (oldBuffer && this.data.count > 0) {\n        // 读取旧缓冲区数据并复制到新缓冲区\n        // 注意：这里需要重新加载数据，因为regl不支持直接从buffer读取数据\n        console.log('需要重新加载已有数据到扩展后的缓冲区');\n        // 标记需要重新加载数据\n        this.state.needsDataReload = true;\n      }\n      \n      // 4. 更新容量记录\n      this.resources.positionBufferCapacity = newCapacity;\n      \n      // 5. 扩展纹理\n      const MAX_TEXTURE_SIZE = this.resources.regl._gl.getParameter(\n        this.resources.regl._gl.MAX_TEXTURE_SIZE\n      );\n      const newTextureWidth = Math.min(MAX_TEXTURE_SIZE, Math.ceil(Math.sqrt(newCapacity)));\n      const newTextureHeight = Math.ceil(newCapacity / newTextureWidth);\n      \n      // 保存旧纹理数据\n      const oldTextureSize = this.resources.textureSize;\n      const oldColorTexture = this.resources.colorTexture;\n      \n      // 创建新的颜色纹理\n      this.resources.textureSize = [newTextureWidth, newTextureHeight];\n      this.resources.textureCapacity = newTextureWidth * newTextureHeight;\n      \n      this.resources.colorTexture = this.resources.regl.texture({\n        shape: [newTextureWidth, newTextureHeight],\n        format: \"rgba\",\n        type: \"float32\",\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrap: \"clamp\",\n        data: new Float32Array(newTextureWidth * newTextureHeight * 4).fill(0),\n      });\n      \n      // 6. 更新顶点ID缓冲区\n      this.resources.vertexIdBuffer = new Float32Array(\n        Array.from({ length: newCapacity }, (_, i) => i)\n      );\n      \n      // 7. 清理旧资源\n      if (oldBuffer) {\n        oldBuffer.destroy();\n      }\n      if (oldColorTexture) {\n        oldColorTexture.destroy();\n      }\n      \n      console.log(`缓冲区扩展完成: 新容量=${newCapacity}, 新纹理尺寸=${newTextureWidth}x${newTextureHeight}`);\n      \n    } catch (error) {\n      console.error('扩展缓冲区失败:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * 数据集切换时清理和重置资源\n   * 确保新数据集能够正确分配buffer大小\n   * @param {string} oldDataset - 旧数据集名称（用于清理缓存）\n   */\n  async resetForNewDataset(oldDataset = null) {\n    try {\n      console.log('重置渲染器以准备加载新数据集...');\n      \n      // 🔥 0. 清理旧数据集的缓存数据，防止数据污染\n      if (oldDataset) {\n        try {\n          console.log(`清理旧数据集 ${oldDataset} 的缓存数据...`);\n          await clearDatasetCache(oldDataset);\n        } catch (cacheError) {\n          console.warn('清理缓存时出错，但继续重置过程:', cacheError);\n        }\n      }\n      \n      // 1. 清理现有的WebGL资源\n      if (this.resources.positionBuffer) {\n        this.resources.positionBuffer.destroy();\n        this.resources.positionBuffer = null;\n      }\n      \n      if (this.resources.colorTexture) {\n        this.resources.colorTexture.destroy();\n        this.resources.colorTexture = null;\n      }\n      \n      if (this.resources.highlightTexture) {\n        this.resources.highlightTexture.destroy();\n        this.resources.highlightTexture = null;\n      }\n      \n      if (this.resources.hoverTexture) {\n        this.resources.hoverTexture.destroy();\n        this.resources.hoverTexture = null;\n      }\n      \n      if (this.resources.geneColorTexture) {\n        this.resources.geneColorTexture.destroy();\n        this.resources.geneColorTexture = null;\n      }\n      \n      // 2. 重置容量和大小记录\n      this.resources.positionBufferCapacity = 0;\n      this.resources.textureCapacity = 0;\n      this.resources.textureSize = [0, 0];\n      this.resources.vertexIdBuffer = null;\n      \n      // 3. 重置数据状态\n      this.data.count = 0;\n      this.data.total = 0;\n      this.data.nodeIndices.clear();\n      this.data.quadTree = null;\n      this.data.treeMap.clear();\n      \n      // 4. 重置渲染状态\n      this.state.isChunkLoading = false;\n      this.state.needsDataReload = false;\n      this.state.hasValidData = false;\n      \n      console.log('渲染器重置完成，准备接受新数据集');\n      \n    } catch (error) {\n      console.error('重置渲染器时发生错误:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * 生成数据集特定的缓存键\n   * @param {string} baseKey - 基础缓存键\n   * @returns {string} - 包含数据集信息的缓存键\n   */\n  createDatasetCacheKey(baseKey) {\n    const currentDataset = getDataset();\n    if (!currentDataset) {\n      console.warn('无法获取当前数据集，使用默认缓存键');\n      return baseKey;\n    }\n    return `${currentDataset}_${baseKey}`;\n  }\n  \n  /**\n   * 安全地从IndexedDB获取数据，处理版本冲突错误\n   * @param {string} key - 数据键\n   * @returns {Promise<any>} - 数据或null\n   */\n  async safeGetMapData(key) {\n    try {\n      // 🔥 使用数据集特定的缓存键\n      const datasetSpecificKey = this.createDatasetCacheKey(key);\n      return await getMapData(datasetSpecificKey);\n    } catch (error) {\n      if (error.name === 'VersionError') {\n        console.warn(`IndexedDB版本冲突，重置数据库后重试获取数据: ${key}`);\n        try {\n          await resetDatabase();\n          // 重置后返回null，让调用者从文件重新加载\n          return null;\n        } catch (resetError) {\n          console.error('重置IndexedDB失败:', resetError);\n        }\n      }\n      console.error(`从IndexedDB获取数据失败 (${key}):`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * 加载细胞属性\n   * @param {string} fieldName - 属性字段名\n   * @returns {Promise<boolean>} - 是否成功加载\n   */\n  async loadCellAttribute(fieldName) {\n    try {\n      console.log(`开始加载属性: ${fieldName}`);\n      \n      // 查找属性在field数组中的索引\n      const fieldIndex = this.data.field.findIndex(f => f === fieldName);\n      if (fieldIndex < 0) {\n        console.error(`属性 ${fieldName} 不在字段列表中`);\n        return false;\n      }\n      \n      // 加载属性数据\n      const attrPath = buildDatasetPath(`cell_types/${fieldName}.bin`);\n      console.log(`从路径加载: ${attrPath}`);\n      \n      const attrData = await dataLoader.loadCellAttribute(fieldName, (progress) => {\n        console.log(`属性 ${fieldName} 加载进度: ${(progress * 100).toFixed(1)}%`);\n      });\n      \n      if (!attrData || attrData.length === 0) {\n        console.error(`属性 ${fieldName} 数据加载失败`);\n        return false;\n      }\n      \n      console.log(`属性 ${fieldName} 加载完成，数据长度: ${attrData.length}`);\n      \n      // 创建一个缓存以存储已加载的属性数据\n      if (!this.data.attributeCache) {\n        this.data.attributeCache = new Map();\n      }\n      \n      // 缓存此属性数据\n      this.data.attributeCache.set(fieldName, attrData);\n      \n      // 创建或重新创建颜色纹理\n      if (this.resources.colorTexture) {\n        // 如果已存在，先销毁\n        this.resources.colorTexture.destroy();\n        this.resources.colorTexture = null;\n      }\n      \n      // 重新创建纹理\n      this.resources.colorTexture = this.resources.regl.texture({\n        shape: this.resources.textureSize,\n        format: \"rgba\",\n        type: \"float32\",\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrap: \"clamp\",\n      });\n      \n      // 更新颜色纹理数据\n      console.log(`正在更新颜色纹理数据，总点数: ${this.data.total}`);\n      \n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        // 计算这一行的起始点索引\n        const startPointIndex = row * texWidth;\n        \n        // 计算这一行要处理的点数量（考虑最后一行可能不满）\n        const pointsInRow = Math.min(texWidth, this.data.total - startPointIndex);\n        \n        if (pointsInRow <= 0) break; // 已处理完所有点\n        \n        if (row % 10 === 0) {\n          console.log(`更新第 ${row}/${texHeight} 行，包含 ${pointsInRow} 个点`);\n        }\n        \n        // 创建这一行的纹理数据\n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 设置属性数据\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          \n          // 将值设置到R通道，其他通道保留为0\n          rowData[i * 4] = globalPointIndex < attrData.length ? attrData[globalPointIndex] : 0;\n          rowData[i * 4 + 1] = 0;\n          rowData[i * 4 + 2] = 0;\n          rowData[i * 4 + 3] = 0;\n        }\n        \n        // 更新这一行到纹理\n        this.resources.colorTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0, // 从行首开始\n          row\n        );\n      }\n      \n      console.log(`颜色纹理更新完成，属性: ${fieldName}`);\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`加载属性 ${fieldName} 时出错:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * 更新指定属性的纹理数据\n   * @param {number} fieldIndex - 属性在field数组中的索引\n   * @param {number} startPointIndex - 起始点索引\n   * @param {number} pointCount - 点的数量\n   * @param {string} nodeId - 节点ID，用于加载节点特定数据\n   */\n  async updateTextureForAttribute(fieldIndex, startPointIndex, pointCount, nodeId) {\n    try {\n      // 获取属性数据\n      const fieldName = this.data.field[fieldIndex];\n      let attrData;\n      \n      // 首先检查缓存中是否有数据\n      if (this.data.attributeCache && this.data.attributeCache.has(fieldName)) {\n        attrData = this.data.attributeCache.get(fieldName);\n      } else {\n        // 如果缓存中没有，加载属性数据\n        attrData = await dataLoader.loadCellAttribute(fieldName);\n        \n        // 缓存此属性数据\n        if (!this.data.attributeCache) {\n          this.data.attributeCache = new Map();\n        }\n        this.data.attributeCache.set(fieldName, attrData);\n      }\n      \n      if (!attrData || attrData.length === 0) {\n        console.error(`属性 ${fieldName} 数据不可用`);\n        return;\n      }\n      \n      // 确保颜色纹理存在\n      if (!this.resources.colorTexture) {\n        console.error('颜色纹理不存在');\n        return;\n      }\n      \n      // 准备纹理数据 - 只更新R通道\n      let textureData = new Float32Array(pointCount * 4).fill(0);\n      \n      // 从属性数据中提取对应范围的数据\n      for (let i = 0; i < pointCount; i++) {\n        // 获取全局点索引\n        const globalPointIndex = startPointIndex + i;\n        \n        // 设置纹理RGBA中的R通道\n        if (globalPointIndex < attrData.length) {\n          textureData[i * 4] = attrData[globalPointIndex] || 0;\n        }\n      }\n      \n      // 更新纹理 - 计算纹理坐标\n      let currentStartX = Math.floor(startPointIndex / this.resources.textureSize[0]);\n      let currentStartY = startPointIndex % this.resources.textureSize[0];\n      \n      // 分块更新纹理\n      let pointsToUpdate = pointCount;\n      let offset = 0;\n      \n      while (pointsToUpdate > 0) {\n        let availableInRow = this.resources.textureSize[0] - currentStartY;\n        let updateWidth = Math.min(pointsToUpdate, availableInRow);\n        let floatArrayPart = textureData.subarray(\n          offset * 4,\n          (offset + updateWidth) * 4\n        );\n        \n        this.resources.colorTexture.subimage(\n          {\n            data: floatArrayPart,\n            width: updateWidth,\n            height: 1,\n          },\n          currentStartY,\n          currentStartX\n        );\n        \n        offset += updateWidth;\n        pointsToUpdate -= updateWidth;\n        currentStartY = 0;\n        currentStartX += 1;\n      }\n    } catch (error) {\n      console.error(`更新属性 ${this.data.field[fieldIndex]} 纹理时出错:`, error);\n    }\n  }\n  \n  /**\n   * 切换当前可视化的属性\n   * @param {number} newColorIndex - 新的颜色属性索引\n   * @returns {Promise<boolean>} - 是否成功切换\n   */\n  async setColorAttribute(newColorIndex) {\n    try {\n      // 检查field数组是否有效\n      if (!this.data.field || !Array.isArray(this.data.field) || this.data.field.length === 0) {\n        console.error('字段列表为空，无法设置颜色属性');\n        return false;\n      }\n      \n      // 检查索引的有效性，并提供默认值处理\n      let colorIndex = newColorIndex;\n      if (newColorIndex === undefined || newColorIndex === null || \n          newColorIndex < 0 || newColorIndex >= this.data.field.length) {\n        \n        console.warn(`属性索引 ${newColorIndex} 超出范围[0, ${this.data.field.length - 1}]，使用默认值0`);\n        colorIndex = 0;\n      }\n      \n      // 获取字段名\n      const fieldName = this.data.field[colorIndex];\n      console.log(`切换到属性: ${fieldName} (索引: ${colorIndex})`);\n      \n      // 强制重新加载新的属性数据，不使用缓存\n      // 删除之前的缓存\n      if (this.data.attributeCache && this.data.attributeCache.has(fieldName)) {\n        this.data.attributeCache.delete(fieldName);\n      }\n      \n      // 清除现有的颜色纹理\n      if (this.resources.colorTexture && this.resources.colorTexture.destroy) {\n        this.resources.colorTexture.destroy();\n        this.resources.colorTexture = null;\n      }\n      \n      // 重新加载属性数据\n      console.log(`正在加载属性数据: ${fieldName}`);\n      const loadSuccess = await this.loadCellAttribute(fieldName);\n      \n      if (!loadSuccess) {\n        console.error(`加载属性 ${fieldName} 失败`);\n        return false;\n      }\n      \n      // 更新当前颜色属性索引\n      this.data.colorIndex = colorIndex;\n      \n      // 更新着色器uniform - 改用渲染来传递参数\n      // 不再直接访问this.resources.drawScatter.uniforms\n      if (this.resources.drawScatter) {\n        console.log(`已更新colorIndex为 ${colorIndex}，将在下次渲染时传递`);\n      } else {\n        // 如果绘制命令不存在，尝试重新创建\n        console.warn(`绘制命令不存在，尝试重新创建`);\n        \n        const commandCreated = this.createDrawCommand();\n        if (!commandCreated) {\n          console.error(`无法创建绘制命令，无法继续渲染`);\n          return false;\n        }\n      }\n      \n      console.log(`属性已更新，请求重新渲染`);\n      \n      // 强制重新渲染 - 重要：在渲染时通过props传递currentColorField\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`切换属性时出错:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * 设置高亮属性\n   * @param {string} attributeName - 属性名称\n   * @param {number} attributeValue - 属性值索引\n   */\n  async setHighlightAttribute(attributeName, attributeValue) {\n    try {\n      // 检查参数有效性\n      if (!attributeName || attributeValue === undefined || attributeValue < 0) {\n        // 如果参数无效，清除高亮状态\n        console.log(`高亮参数无效: ${attributeName}:${attributeValue}，清除高亮`);\n        this.clearHighlight();\n        return false;\n      }\n      \n      console.log(`设置高亮属性: ${attributeName}, 值: ${attributeValue}`);\n      \n      // 检查属性名是否在字段列表中\n      if (!this.data.field || !Array.isArray(this.data.field)) {\n        console.error(`字段列表无效，无法设置高亮`);\n        return false;\n      }\n      \n      const attributeIndex = this.data.field.indexOf(attributeName);\n      if (attributeIndex === -1) {\n        console.error(`属性 ${attributeName} 不在字段列表中，可用字段: ${this.data.field.join(', ')}`);\n        return false;\n      }\n      \n      // 加载高亮属性数据\n      const attrData = await this.loadHighlightAttributeData(attributeName);\n      if (!attrData || attrData.length === 0) {\n        console.error(`无法加载属性 ${attributeName} 的数据，或数据为空`);\n        return false;\n      }\n      \n      // 检查属性值是否在有效范围内\n      const maxValue = Math.max(...Array.from(attrData).filter(v => !isNaN(v)));\n      if (attributeValue > maxValue) {\n        console.warn(`属性值 ${attributeValue} 超出数据范围 [0, ${maxValue}]`);\n      }\n      \n      // 创建高亮纹理\n      if (!this.resources.highlightTexture) {\n        // 创建高亮纹理\n        console.log(`创建高亮纹理，尺寸: ${this.resources.textureSize}`);\n        this.resources.highlightTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n      \n      // 更新状态\n      this.state.highlightAttributeName = attributeName;\n      this.state.highlightAttributeValues = [attributeValue]; // 修改：更新高亮属性值数组\n      \n      // 更新高亮纹理数据\n      console.log(`更新高亮纹理数据，总点数: ${this.data.total}`);\n      \n      // 确保纹理尺寸有效\n      if (!this.resources.textureSize || \n          !Array.isArray(this.resources.textureSize) || \n          this.resources.textureSize.length !== 2 ||\n          this.resources.textureSize[0] <= 0 || \n          this.resources.textureSize[1] <= 0) {\n        console.error(`纹理尺寸无效: ${this.resources.textureSize}`);\n        return false;\n      }\n      \n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        // 计算这一行的起始点索引\n        const startPointIndex = row * texWidth;\n        \n        // 计算这一行要处理的点数量（考虑最后一行可能不满）\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break; // 已处理完所有点\n        \n        // 创建这一行的纹理数据\n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 设置高亮数据\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          \n          // 如果点的属性值与高亮值匹配，则设置为1，否则为0\n          // 确保不会访问超出attrData范围的索引\n          let isHighlighted = false;\n          \n          if (globalPointIndex < attrData.length) {\n            const pointValue = attrData[globalPointIndex];\n            // 修改：检查点值是否在高亮值数组中（支持多个值的并集）\n            isHighlighted = pointValue !== undefined && \n                           this.state.highlightAttributeValues.some(highlightValue => \n                             Math.abs(pointValue - highlightValue) < 0.01);\n          }\n          \n          // 将高亮状态设置到alpha通道\n          rowData[i * 4] = 0;\n          rowData[i * 4 + 1] = 0;\n          rowData[i * 4 + 2] = 0;\n          rowData[i * 4 + 3] = isHighlighted ? 1.0 : 0.0;\n        }\n        \n        // 更新这一行到纹理\n        this.resources.highlightTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0, // 从行首开始\n          row\n        );\n      }\n      \n      console.log(`高亮纹理更新完成，属性: ${attributeName}, 值: ${attributeValue}`);\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`设置高亮属性时出错:`, error);\n      this.clearHighlight();\n      return false;\n    }\n  }\n  \n  /**\n   * 加载高亮属性数据\n   * @param {string} attributeName - 属性名称\n   * @returns {Promise<Float32Array>} - 属性数据\n   */\n  async loadHighlightAttributeData(attributeName) {\n    try {\n      console.log(`加载高亮属性数据: ${attributeName}`);\n      \n      // 检查缓存中是否有数据\n      if (this.data.attributeCache && this.data.attributeCache.has(attributeName)) {\n        const cachedData = this.data.attributeCache.get(attributeName);\n        return cachedData || new Float32Array(0);\n      }\n      \n      // 如果缓存中没有，加载属性数据\n      const attrData = await dataLoader.loadCellAttribute(attributeName);\n      \n      // 确保返回的数据是有效的Float32Array\n      const validAttrData = attrData instanceof Float32Array && attrData.length > 0 ? \n                           attrData : new Float32Array(0);\n      \n      // 缓存此属性数据\n      if (!this.data.attributeCache) {\n        this.data.attributeCache = new Map();\n      }\n      this.data.attributeCache.set(attributeName, validAttrData);\n      \n      return validAttrData;\n    } catch (error) {\n      console.error(`加载高亮属性 ${attributeName} 时出错:`, error);\n      return new Float32Array(0);\n    }\n  }\n  \n  /**\n   * 清除高亮状态\n   */\n  clearHighlight() {\n    // 清除高亮状态变量\n    this.state.highlightAttributeName = null;\n    this.state.highlightAttributeValues = []; // 修改：清空高亮属性值数组\n    \n    // 如果高亮纹理存在，将其清空\n    if (this.resources.highlightTexture) {\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      try {\n        // 创建全零的数据数组（清除所有高亮标记）\n        const emptyData = new Float32Array(texWidth * texHeight * 4).fill(0);\n        \n        // 更新纹理 - 确保使用完整的纹理尺寸\n        this.resources.highlightTexture.subimage({\n          data: emptyData,\n          width: texWidth,\n          height: texHeight\n        });\n        \n        console.log('高亮纹理已清除');\n      } catch (error) {\n        console.error('清除高亮纹理时出错:', error);\n      }\n    }\n    \n    // 强制设置为脏标记，确保重新渲染\n    this.state.isDirty = true;\n    \n    // 立即请求重新渲染，确保显示更新\n    if (!this.state.animationFrameId) {\n      this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n    }\n  }\n  \n  /**\n   * 创建WebGL绘制命令\n   */\n  createDrawCommand() {\n    try {\n      console.log('开始创建绘制命令...');\n      console.log('渲染器状态:', {\n        hasRegl: !!this.resources.regl,\n        hasPositionBuffer: !!this.resources.positionBuffer,\n        hasColorTexture: !!this.resources.colorTexture,\n        hasGeneBuffer: !!this.resources.geneBuffer,\n        hasGeneColorTexture: !!this.resources.geneColorTexture,\n        dataTotal: this.data.total,\n        dataCount: this.data.count\n      });\n      \n      if (!this.resources.regl || !this.resources.positionBuffer) {\n        console.error(\"无法创建绘制命令：REGL或位置缓冲区不存在\");\n        return false;\n      }\n      \n      // 直接定义顶点着色器，解决导入问题\n      const vertexShader = `#version 300 es\n      precision highp float;\n      precision highp int;\n      \n      in vec2 position;\n      in float vertexId;\n      in float gene;\n      uniform float zoom;\n      uniform vec2 xRange;\n      uniform vec2 yRange;\n      uniform vec2 geneExpRange;\n      uniform float aspectRatio;\n      uniform mat4 transform;\n      uniform bool geneColor;\n      uniform float viewportRatio;\n\n      uniform sampler2D pointDataTexture[1]; // 只使用一个纹理\n      uniform sampler2D geneColorTexture; // 基因颜色纹理\n      uniform bool hasGeneData; // 是否有基因数据\n      uniform vec2 textureSize;\n      uniform int filterNum;\n      out float v_localIndex;\n      uniform sampler2D filterTexture;\n      out vec4 v_color;\n      out float v_size;\n      uniform float hoverCategory;\n      uniform int currentColorField;\n      \n      // 从纹理获取颜色数据\n      vec4 getTextureData(vec2 uv) {\n        return texture(pointDataTexture[0], uv);\n      }\n      \n      // 从基因颜色纹理获取颜色\n      vec4 getGeneColor(vec2 uv) {\n        return texture(geneColorTexture, uv);\n      }\n      \n      uniform sampler2D highlightTexture; // 高亮纹理\n      uniform sampler2D hoverTexture; // 悬停纹理\n      uniform float highlightSize; // 高亮点大小倍数\n      uniform bool hasHighlight; // 是否有高亮状态\n      uniform bool isAttributeHighlight; // 添加isAttributeHighlight声明\n      uniform bool isCheckHighlight; // 添加isCheckHighlight声明，勾选高亮时非高亮点变灰\n      \n      // 检查点是否被高亮\n      bool isHighlighted(vec2 uv) {\n        if (!hasHighlight) return false;\n        vec4 highlightData = texture(highlightTexture, uv);\n        return highlightData.a > 0.5; // 使用alpha通道存储高亮状态\n      }\n      \n      // 检查点是否被悬停高亮\n      bool isHovered(vec2 uv) {\n        vec4 hoverData = texture(hoverTexture, uv);\n        return hoverData.a > 0.5; // 使用alpha通道存储悬停状态\n      }\n\n      vec3 getColorFromValue(float value) {\n        // 使用多层次颜色映射\n        float baseHue = mod(value * 0.618033988749895, 1.0);\n        float colorGroup = floor(mod(value, 5.0)); \n        float secondaryShift = colorGroup * 0.2 + mod(float(currentColorField) * 0.1, 0.2);\n        float hue = mod(baseHue + secondaryShift, 1.0);\n        float saturation = 0.6 + mod(value, 1.0) * 0.3;\n        float brightness = 0.7 + mod(value * 7.0, 1.0) * 0.2;\n        \n        vec3 rgb = vec3(0.0);\n        float h = hue * 6.0;\n        float i = floor(h);\n        float f = h - i;\n        float p = brightness * (1.0 - saturation);\n        float q = brightness * (1.0 - saturation * f);\n        float t = brightness * (1.0 - saturation * (1.0 - f));\n\n        if (i == 0.0) rgb = vec3(brightness, t, p);\n        else if (i == 1.0) rgb = vec3(q, brightness, p);\n        else if (i == 2.0) rgb = vec3(p, brightness, t);\n        else if (i == 3.0) rgb = vec3(p, q, brightness);\n        else if (i == 4.0) rgb = vec3(t, p, brightness);\n        else rgb = vec3(brightness, p, q);\n        \n        return rgb;\n      }\n\n      float checkAllFilters(vec2 uv) {\n        int count=0;\n        bool result = false;\n        bool isFirstCondition = true;\n        bool preResult = false;\n        bool prePreResult = false;\n        \n        if(filterNum == 0) {\n          vec4 data = getTextureData(uv);\n          return data.x; // 值始终存储在R通道\n        }\n        \n        for(int i=0; i<filterNum; i++) {\n          if(i >= filterNum) break; // 提前终止\n          \n          vec4 filterCondition=texelFetch(filterTexture, ivec2(i,0), 0);\n          int typeClass = int(filterCondition.r);\n          int typeItem = int(filterCondition.g);\n          float expectedValue = filterCondition.b;\n          int operatorType = int(filterCondition.a);\n        \n          // 从纹理读取数据\n          vec4 data0 = getTextureData(uv);\n          float value=-1.0;\n          float colorValue = data0.x; // 值始终存储在R通道\n          \n          bool cond = (abs(colorValue - expectedValue) < 0.001);\n          \n          if(i == 0) {\n              result = cond;\n          } else {\n              if(operatorType == 1) { // OR\n                  result = result || cond;\n              } else if(operatorType == 2) {\n                result = result ||(prePreResult && cond);\n              } else { // AND\n                  result = result && cond;\n              }\n          }\n          if(operatorType != 2) {\n            prePreResult = preResult;\n            preResult = result;\n          }\n        }\n        \n        if(result) {\n          vec4 data = getTextureData(uv);\n          return data.x; // 值始终存储在R通道\n        } else {\n          return -1.0;\n        }\n      }\n      \n      void main() {\n        vec2 normalized = vec2(\n          ((position.x - xRange.x) / (xRange.y - xRange.x) * 2.0 - 1.0) * 0.4,\n          ((position.y - yRange.x) / (yRange.y - yRange.x) * 2.0 - 1.0) * 0.4 * aspectRatio\n        );\n        \n        v_localIndex = vertexId;\n\n        float row = floor(vertexId / textureSize.x);\n        float col = mod(vertexId, textureSize.x);\n        vec2 uv = vec2(\n          (col + 0.5) / textureSize.x,\n          (row + 0.5) / textureSize.y\n        );\n\n        // 从纹理读取数据\n        float value = checkAllFilters(uv);\n\n        // 检查点是否被高亮\n        bool pointHighlighted = isHighlighted(uv);\n        \n        // 属性悬停相关变量\n        bool isAttributeHoverMode = (hoverCategory == -999.0);\n        bool pointIsHovered = false;\n        if (isAttributeHoverMode) {\n          pointIsHovered = isHovered(uv);\n        }\n\n        // 优先使用基因颜色纹理\n        if(hasGeneData && value >= 0.0) {\n          vec4 geneColorData = getGeneColor(uv);\n          v_color = geneColorData;\n        } else if(geneColor && gene > 0.0 && (geneExpRange.x == -1.0 || geneExpRange.y == -1.0 || (gene >= geneExpRange.x && gene <= geneExpRange.y))) {\n          // 基因染色模式\n          float intensity = clamp(gene / 3.0, 0.0, 1.0);\n          vec3 redColor = vec3(0.94, 0.35, 0.35);\n          vec3 purpleColor = vec3(0.55, 0.16, 0.63);\n          vec3 finalColor = mix(redColor, purpleColor, intensity);\n          v_color = vec4(finalColor, 1.0);\n        } else {\n            // 🔧 修复：统一颜色计算逻辑，先计算基本颜色，再根据筛选和高亮状态调整\n            vec3 rgb;\n            float alpha = 0.8;  // 默认透明度\n            \n            // 计算基本颜色（无论是否符合筛选条件）\n            if(value >= 0.0) {\n                // 符合筛选条件的点，使用属性值计算颜色\n                rgb = getColorFromValue(value);\n            } else {\n                // 不符合筛选条件的点，使用当前染色属性的默认颜色\n                vec4 data = getTextureData(uv);\n                rgb = getColorFromValue(data.x); // 使用实际属性值计算颜色\n            }\n            \n            // 判断是否处于悬停高亮模式\n            bool isHoverMode = hoverCategory != -1.0;\n            \n            // 🔧 修复：重新组织悬浮和高亮的优先级逻辑，确保悬浮效果在勾选后依然可见\n            bool hoverEffectApplied = false;\n            \n            // 首先处理悬浮效果（最高优先级）\n            if (isAttributeHoverMode && pointIsHovered) {\n                rgb *= 1.3; // 悬浮时增加更多亮度，确保可见\n                alpha = 1.0; // 完全不透明\n                hoverEffectApplied = true;\n            } else if (isHoverMode && value == hoverCategory) {\n                rgb *= 1.3; // 悬浮时增加更多亮度，确保可见\n                alpha = 1.0; // 完全不透明\n                hoverEffectApplied = true;\n            }\n            \n            // 然后处理高亮状态（当没有悬浮效果时）\n            if (!hoverEffectApplied && hasHighlight) {\n                if (pointHighlighted) {\n                    // 🔧 修复：符合勾选条件的点保持原色，不增亮\n                    alpha = 1.0; // 完全不透明\n                } else if (isCheckHighlight) {\n                    // 勾选高亮模式下，非高亮点变灰\n                    rgb = vec3(0.35, 0.35, 0.35);\n                    alpha = 0.7;\n                }\n            }\n            \n            // 最后处理属性悬浮模式下非悬浮点的变暗效果\n            if (isAttributeHoverMode && !pointIsHovered && !hoverEffectApplied) {\n                rgb *= 0.85;\n                alpha = 0.6;\n            }\n            \n            // 🔧 修复：最后处理不符合筛选条件的点\n            if(value < 0.0 && !hasHighlight) {\n                // 只有在没有高亮状态时，不符合筛选条件的点才变灰\n                rgb = vec3(0.4, 0.4, 0.4);\n                alpha = 0.8;\n            }\n            \n            v_color = vec4(rgb, alpha);\n        }\n\n        // 计算点的大小和Z值\n        float scale = 1.0;\n        float zValue = 0.0;\n        \n        // 🔧 修复：重新组织点大小和层级的优先级，确保悬浮效果优先级最高\n        // 悬浮效果具有最高优先级\n        if ((isAttributeHoverMode && pointIsHovered) || (value==hoverCategory && hoverCategory!=-1.0)) {\n            // 悬浮时稍微放大，但不如勾选那么明显\n            scale = 1.2;\n            zValue = -0.7; // 悬浮点显示在最上层\n        } else if(pointHighlighted) {\n            // 高亮点增大，但比之前小一些\n            scale = highlightSize;\n            zValue = -0.6; // 高亮点显示在第二层\n        } else if(value < 0.0) {\n            zValue = 0.5; // 灰色点放在后面\n        }\n        \n        // 保存点大小供片段着色器使用 - 减小基础大小从3.0到2.0\n        v_size = 2.0 * zoom * scale;\n        \n        gl_Position = transform * vec4(normalized, zValue, 1);\n        \n        // 使用viewportRatio确保在高DPI显示器上点大小正确\n        gl_PointSize = v_size * viewportRatio;\n      }\n      `;\n      \n      // 直接定义片段着色器\n      const fragmentShader = `#version 300 es\n      precision highp float;\n      precision highp int;\n      in float v_localIndex;\n      in vec4 v_color;\n      in float v_size;\n      out vec4 fragColor;\n      uniform bool useAntialiasing;\n     \n      void main() {\n        // 计算到圆心的距离\n        vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n        float r = dot(cxy, cxy);\n        \n        // 基本圆形\n        if (r > 1.0) {\n          discard;\n        }\n        \n        vec4 color = v_color;\n        \n        // 应用抗锯齿\n        if (useAntialiasing) {\n          // 使用固定的delta值代替fwidth计算\n          float delta = 0.05;\n          float alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\n          \n          // 应用抗锯齿\n          color.a *= alpha;\n          \n          // 增加点的半径方向渐变以使其更自然\n          float gradient = 1.0 - (r * 0.3); // 减小渐变程度，使颜色更均匀\n          color.rgb *= gradient;\n        }\n        \n        // 输出最终颜色\n        fragColor = color;\n      }`;\n      \n      // 使用预定义的着色器代码\n      this.resources.drawScatter = this.resources.regl({\n        viewport: {\n          x: 0,\n          y: 0,\n          width: () => this.resources.canvas.width,\n          height: () => this.resources.canvas.height,\n        },\n        frag: fragmentShader,\n        vert: vertexShader,\n        attributes: {\n          position: this.resources.regl.prop(\"position\"),\n          vertexId: this.resources.vertexIdBuffer,\n          gene: this.resources.geneBuffer, // 直接使用geneBuffer，不通过prop传递\n        },\n        uniforms: {\n          transform: this.resources.regl.prop(\"transform\"),\n          zoom: this.resources.regl.prop(\"zoom\"),\n          xRange: [this.data.dataRange.min_x, this.data.dataRange.max_x],\n          yRange: [this.data.dataRange.min_y, this.data.dataRange.max_y],\n          aspectRatio: () => {\n            const width = this.container.clientWidth;\n            const height = this.container.clientHeight;\n            return width / Math.max(height, 1);\n          },\n          // 单一的颜色纹理\n          \"pointDataTexture[0]\": (_, props) => props.colorTexture,\n          highlightTexture: (_, props) => props.highlightTexture,\n          hoverTexture: (_, props) => props.hoverTexture || props.colorTexture,\n          textureSize: (context, props) => props.textureSize,\n          filterTexture: (_, props) => props.filterTexture || props.colorTexture, // 确保始终有有效的纹理\n          hoverCategory: this.resources.regl.prop(\"hoverCategory\"),\n          filterNum: this.resources.regl.prop(\"filterNum\"),\n          currentColorField: this.resources.regl.prop(\"currentColorField\"),\n          geneExpRange: (context, props) => props.geneExpRange.range ? \n            [props.geneExpRange.range.start, props.geneExpRange.range.end] : \n            [-1.0, -1.0],\n          geneColor: (context, props) => props.geneExpRange.color ? true : false,\n          viewportRatio: () => this.state.viewportRatio,\n          useAntialiasing: () => this.options.antialiasing,\n          highlightSize: () => this.options.highlightSize, // 高亮点的大小倍数\n          hasHighlight: (_, props) => props.hasHighlight, // 是否有高亮\n          isAttributeHighlight: (_, props) => props.isAttributeHighlight || false, // 是否是基于属性高亮\n          isCheckHighlight: (_, props) => props.isCheckHighlight || false, // 是否是勾选高亮（影响非高亮点是否变灰）\n          geneColorTexture: (_, props) => props.geneColorTexture || this.resources.colorTexture, // 确保总是有一个有效的纹理\n          hasGeneData: (_, props) => props.hasGeneData || false, // 确保总是有一个布尔值\n        },\n        count: this.data.total,\n        primitive: \"points\",\n        depth: { enable: true },\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: 'src alpha',\n            srcAlpha: 'src alpha',\n            dstRGB: 'one minus src alpha',\n            dstAlpha: 'one minus src alpha'\n          }\n        }\n      });\n      \n      // 创建完绘制命令后设置标记，但不立即渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(\"创建绘制命令失败:\", error);\n      this.handleError(\"创建绘制命令时\", error);\n      // 明确将 drawScatter 设置为 null，如果创建失败\n      this.resources.drawScatter = null;\n      return false;\n    }\n  }\n  \n  /**\n   * 设置平移模式\n   */\n  setPanningMode() {\n    const canvas = this.resources.canvas;\n    \n    // 移除可能的选择事件监听\n    if (this.boundStartSelection) {\n      canvas.removeEventListener(\"mousedown\", this.boundStartSelection, { capture: true });\n      canvas.removeEventListener(\"mousemove\", this.boundUpdateSelection, { capture: true });\n      canvas.removeEventListener(\"mouseup\", this.boundEndSelection, { capture: true });\n    }\n    \n    // 绑定平移事件处理函数\n    this.boundStartPanning = this.startPanning.bind(this);\n    this.boundEndPanning = this.endPanning.bind(this);\n    this.boundHandleMouseMove = this.handleMouseMove.bind(this);\n    \n    // 添加平移事件监听\n    canvas.addEventListener(\"mousedown\", this.boundStartPanning);\n    canvas.addEventListener(\"mouseup\", this.boundEndPanning);\n    canvas.addEventListener(\"mousemove\", this.boundHandleMouseMove);\n    \n    // 重置选区状态并清除选区可见性\n    this.state.isSelecting = false;\n    this.state.selectionMode = false; // 设置为平移模式\n    this.state.selectionVisible = false; // 清除选区可见性，确保选区框消失\n    \n    // 设置鼠标样式\n    canvas.style.cursor = \"grab\";\n    \n    // 强制重新渲染以清除选区框\n    this.state.isDirty = true;\n    \n    // 输出测试消息\n    console.log(\"已切换回平移模式，选区框已清除\");\n  }\n  \n  /**\n   * 设置选择模式\n   */\n  setSelectionMode() {\n    if (!this.options.selectionEnabled) {\n      console.warn(\"选区功能已禁用\");\n      return;\n    }\n    \n    const canvas = this.resources.canvas;\n    \n    // 移除平移事件监听\n    if (this.boundStartPanning) {\n      canvas.removeEventListener(\"mousedown\", this.boundStartPanning);\n      canvas.removeEventListener(\"mouseup\", this.boundEndPanning);\n      canvas.removeEventListener(\"mousemove\", this.boundHandleMouseMove);\n    }\n    \n    // 绑定选择事件处理函数\n    this.boundStartSelection = this.startSelection.bind(this);\n    this.boundUpdateSelection = this.updateSelection.bind(this);\n    this.boundEndSelection = this.endSelection.bind(this);\n    \n    // 添加选择事件监听\n    canvas.addEventListener(\"mousedown\", this.boundStartSelection, { capture: true });\n    canvas.addEventListener(\"mousemove\", this.boundUpdateSelection, { capture: true });\n    canvas.addEventListener(\"mouseup\", this.boundEndSelection, { capture: true });\n    \n    // 重置状态\n    this.state.isPanning = false;\n    this.state.lastMousePosition = null;\n    this.state.selectionMode = true; // 设置为选择模式\n    \n    // 设置鼠标样式\n    canvas.style.cursor = \"crosshair\";\n    \n    // 输出测试消息\n    console.log(\"已切换到选区模式，可以进行区域选择\");\n  }\n  \n  /**\n   * 开始平移\n   */\n  startPanning(event) {\n    // 如果处于选择模式，禁止平移\n    if (this.state.selectionMode) return;\n    \n    event.preventDefault();\n    this.state.isPanning = true;\n    this.state.lastMousePosition = { x: event.clientX, y: event.clientY };\n    this.state.velocity = { x: 0, y: 0 };\n    this.state.lastTime = performance.now();\n    this.resources.canvas.style.cursor = \"grabbing\";\n  }\n  \n  /**\n   * 结束平移\n   */\n  endPanning() {\n    this.state.isPanning = false;\n    this.resources.canvas.style.cursor = \"grab\";\n    \n    // 应用惯性效果\n    if (this.state.inertiaEnabled && \n        (Math.abs(this.state.velocity.x) > 0.01 || \n         Math.abs(this.state.velocity.y) > 0.01)) {\n      this.applyInertia();\n    }\n  }\n  \n  /**\n   * 处理鼠标移动\n   */\n  handleMouseMove(event) {\n    // 如果在选择模式，则不处理平移和悬停\n    if (this.getMode() === \"select\") return;\n    \n    if (this.state.isPanning && this.state.lastMousePosition) {\n      this.pan(event);\n    } else {\n      // 使用节流版本的悬停检测\n      this.throttledHoverPoint(event);\n    }\n  }\n  \n  /**\n   * 调度渲染，优化性能\n   * @param {boolean} force - 是否强制渲染\n   */\n  scheduleRender(force = false) {\n    // 设置脏标记，渲染循环会处理\n    this.state.isDirty = true;\n    \n    // 如果强制渲染，立即触发一次渲染\n    if (force && !this.state.animationFrameId) {\n      this.state.animationFrameId = requestAnimationFrame(() => {\n        this.renderFrame();\n        this.state.animationFrameId = null;\n      });\n    }\n  }\n  \n  /**\n   * 创建变换矩阵\n   * @returns {Array<number>} 4x4变换矩阵\n   */\n  createTransformMatrix() {\n    return [\n      this.state.zoom * this.state.zoom, 0, 0, 0,\n      0, this.state.zoom * this.state.zoom, 0, 0,\n      0, 0, 1, 0,\n      this.state.offsetX, this.state.offsetY, 0, 1\n    ];\n  }\n  \n  /**\n   * 释放资源\n   */\n  dispose() {\n    try {\n      // 停止渲染循环\n      if (this.state.animationFrameId !== null) {\n        cancelAnimationFrame(this.state.animationFrameId);\n        this.state.animationFrameId = null;\n      }\n      \n      // 移除事件监听器\n    if (this.resources.canvas) {\n        // 移除滚轮事件监听\n      this.resources.canvas.removeEventListener(\"wheel\", this.smoothZoom);\n        \n        // 移除平移模式事件监听\n        if (this.boundStartPanning) {\n          this.resources.canvas.removeEventListener(\"mousedown\", this.boundStartPanning);\n          this.resources.canvas.removeEventListener(\"mouseup\", this.boundEndPanning);\n          this.resources.canvas.removeEventListener(\"mousemove\", this.boundHandleMouseMove);\n        }\n        \n        // 移除选择模式事件监听\n        if (this.boundStartSelection) {\n          this.resources.canvas.removeEventListener(\"mousedown\", this.boundStartSelection, { capture: true });\n          this.resources.canvas.removeEventListener(\"mousemove\", this.boundUpdateSelection, { capture: true });\n          this.resources.canvas.removeEventListener(\"mouseup\", this.boundEndSelection, { capture: true });\n        }\n        \n        // 移除窗口大小变化监听\n        const boundHandleResize = this.handleResize.bind(this);\n        window.removeEventListener(\"resize\", boundHandleResize);\n      }\n      \n      // 清理ResizeObserver\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n        this.resizeObserver = null;\n        console.log('ResizeObserver已清理');\n      }\n      \n      // 释放GPU资源\n      if (this.resources.regl) {\n        // 逐个清理缓冲区资源\n        if (this.resources.positionBuffer && this.resources.positionBuffer.destroy) {\n          this.resources.positionBuffer.destroy();\n          this.resources.positionBuffer = null;\n        }\n        \n        if (this.resources.vertexIdBuffer && this.resources.vertexIdBuffer.destroy) {\n          this.resources.vertexIdBuffer.destroy();\n          this.resources.vertexIdBuffer = null;\n        }\n        \n        if (this.resources.geneBuffer && this.resources.geneBuffer.destroy) {\n          this.resources.geneBuffer.destroy();\n          this.resources.geneBuffer = null;\n        }\n        \n        // 清理纹理资源\n        if (this.resources.filterTexture && this.resources.filterTexture.destroy) {\n          this.resources.filterTexture.destroy();\n          this.resources.filterTexture = null;\n        }\n        \n        // 清理颜色纹理\n        if (this.resources.colorTexture && this.resources.colorTexture.destroy) {\n          this.resources.colorTexture.destroy();\n          this.resources.colorTexture = null;\n        }\n        \n        // 清理高亮纹理\n        if (this.resources.highlightTexture && this.resources.highlightTexture.destroy) {\n          this.resources.highlightTexture.destroy();\n          this.resources.highlightTexture = null;\n        }\n        \n        // 清理悬停纹理\n        if (this.resources.hoverTexture && this.resources.hoverTexture.destroy) {\n          this.resources.hoverTexture.destroy();\n          this.resources.hoverTexture = null;\n        }\n        \n        // 清理基因颜色纹理\n        if (this.resources.geneColorTexture && this.resources.geneColorTexture.destroy) {\n          this.resources.geneColorTexture.destroy();\n          this.resources.geneColorTexture = null;\n        }\n        \n        // 清理所有点数据纹理\n        if (this.resources.textures && this.resources.textures.length > 0) {\n          this.resources.textures.forEach(texture => {\n            if (texture && texture.destroy) {\n              texture.destroy();\n            }\n          });\n          this.resources.textures = [];\n        }\n        \n        // 获取WebGL上下文引用\n        const gl = this.resources.regl._gl;\n        \n        // 销毁REGL实例\n        if (this.resources.regl.destroy) {\n          this.resources.regl.destroy();\n          this.resources.regl = null;\n        }\n        \n        // 执行额外的WebGL清理\n        if (gl) {\n          // 清除WebGL上下文的额外状态\n          gl.getExtension('WEBGL_lose_context')?.loseContext();\n          \n          // 清理WebGL上下文中可能残留的纹理单元\n          const maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n          for (let i = 0; i < maxTextureUnits; i++) {\n            gl.activeTexture(gl.TEXTURE0 + i);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n          }\n          \n          // 清理其他绑定\n          gl.bindBuffer(gl.ARRAY_BUFFER, null);\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n          gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n          gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n          \n          // 禁用可能启用的顶点属性数组\n          const maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n          for (let i = 0; i < maxVertexAttribs; i++) {\n            gl.disableVertexAttribArray(i);\n          }\n        }\n        }\n        \n        // 从DOM中移除canvas\n        if (this.resources.canvas && this.resources.canvas.parentNode) {\n          this.resources.canvas.parentNode.removeChild(this.resources.canvas);\n        this.resources.canvas = null;\n      }\n      \n      // 清除四叉树和其他数据引用\n      this.data.treeMap.clear();\n      this.data.quadTree = null;\n      this.data.total = 0;\n      this.data.count = 0;\n      \n      // 清除属性缓存\n      if (this.data.attributeCache) {\n        this.data.attributeCache.clear();\n        this.data.attributeCache = null;\n      }\n      \n      // 重置状态变量\n      this.state = {\n        zoom: this.options.defaultZoom,\n        offsetX: this.options.defaultOffset[0],\n        offsetY: this.options.defaultOffset[1],\n        isPanning: false,\n        isSelecting: false,\n        selectionMode: false,\n        selectionStart: null,\n        selectionEnd: null,\n        selectionVisible: false,\n        selectedIndices: [],\n        hoverCategory: -1,\n        isZooming: false,\n        targetZoom: this.options.defaultZoom,\n        viewportRatio: 1,\n        isDirty: false,\n        selectionStartData: null,\n        selectionEndData: null\n      };\n      \n      // 引用清空\n      this.boundStartPanning = null;\n      this.boundEndPanning = null;\n      this.boundHandleMouseMove = null;\n      this.boundStartSelection = null;\n      this.boundUpdateSelection = null;\n      this.boundEndSelection = null;\n      \n      // 建议浏览器进行垃圾回收\n      if (window.gc) window.gc();\n      \n      console.log(\"渲染器资源已完全释放\");\n      return true;\n      } catch (error) {\n      console.error(\"释放资源时发生错误:\", error);\n      this.handleError(\"释放资源时\", error);\n      return false;\n    }\n  }\n  \n  /**\n   * 错误处理\n   */\n  handleError(context, error) {\n    console.error(`${context}:`, error);\n    \n    // 显示用户友好的错误消息\n    if (this.container) {\n      const errorDiv = document.createElement(\"div\");\n      errorDiv.className = \"renderer-error\";\n      errorDiv.textContent = `渲染错误: ${error.message || '未知错误'}`;\n      errorDiv.style.cssText = \"color: red; padding: 20px; background: rgba(255,255,255,0.9); position: absolute; top: 10px; left: 10px; z-index: 1000; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.2);\";\n      \n      // 添加关闭按钮\n      const closeBtn = document.createElement(\"button\");\n      closeBtn.textContent = \"×\";\n      closeBtn.style.cssText = \"margin-left: 10px; background: none; border: none; cursor: pointer;\";\n      closeBtn.onclick = () => errorDiv.remove();\n      \n      errorDiv.appendChild(closeBtn);\n      this.container.appendChild(errorDiv);\n      \n      // 自动关闭\n      setTimeout(() => {\n        if (errorDiv.parentNode) {\n          errorDiv.remove();\n        }\n      }, 10000);\n    }\n  }\n  \n  /**\n   * 平移视图\n   * @param {Event} event - 鼠标事件\n   */\n  pan(event) {\n    // 如果处于选择模式，禁止平移\n    if (this.state.selectionMode) return;\n    \n    if (!this.state.isPanning || !this.state.lastMousePosition) return;\n    \n    const now = performance.now();\n    const dt = now - this.state.lastTime;\n    this.state.lastTime = now;\n    \n    const dx = event.movementX;\n    const dy = event.movementY;\n    \n    // 计算速度，用于惯性效果\n    if (dt > 0) {\n      this.state.velocity.x = dx * 0.8 + this.state.velocity.x * 0.2;\n      this.state.velocity.y = dy * 0.8 + this.state.velocity.y * 0.2;\n    }\n    \n    // 应用平移\n    this.state.offsetX += dx * 2.0 * this.state.zoom / (this.state.zoom * this.resources.canvas.width);\n    this.state.offsetY -= dy * 2.0 * this.state.zoom / (this.state.zoom * this.resources.canvas.height);\n    \n    // 更新上一次鼠标位置\n    this.state.lastMousePosition = { x: event.clientX, y: event.clientY };\n    \n    // 请求渲染\n    this.scheduleRender();\n  }\n  \n  /**\n   * 应用惯性效果\n   */\n  applyInertia() {\n    const decay = 0.95; // 衰减系数\n    \n    const animate = () => {\n      // 当速度足够小时停止动画\n      if (Math.abs(this.state.velocity.x) < 0.01 && Math.abs(this.state.velocity.y) < 0.01) {\n        return;\n      }\n      \n      // 应用衰减\n      this.state.velocity.x *= decay;\n      this.state.velocity.y *= decay;\n      \n      // 计算位移\n      const dx = this.state.velocity.x / (this.state.zoom * this.resources.canvas.width);\n      const dy = this.state.velocity.y / (this.state.zoom * this.resources.canvas.height);\n      \n      // 应用位移\n      this.state.offsetX += dx * 2.0 * this.state.zoom;\n      this.state.offsetY -= dy * 2.0 * this.state.zoom;\n      \n      // 请求渲染\n      this.scheduleRender();\n      \n      // 继续下一帧动画\n      requestAnimationFrame(animate);\n    };\n    \n    // 开始动画\n    animate();\n  }\n  \n  /**\n   * 平滑缩放\n   * @param {number} deltaY - 滚轮事件的deltaY值\n   */\n  smoothZoom(deltaY) {\n    const scaleAmount = 0.1;\n    this.state.targetZoom += deltaY < 0 ? scaleAmount : -scaleAmount;\n    this.state.targetZoom = Math.max(0.1, this.state.targetZoom); // 限制最小缩放级别\n    \n    if (!this.state.isZooming) {\n      this.state.isZooming = true;\n      this.animateZoom();\n    }\n  }\n  \n  /**\n   * 动画实现平滑缩放\n   */\n  animateZoom() {\n    // 使用缓动函数使缩放更平滑\n    this.state.zoom += (this.state.targetZoom - this.state.zoom) * 0.2;\n    \n    if (Math.abs(this.state.targetZoom - this.state.zoom) < 0.01) {\n      // 达到目标缩放级别，停止动画\n      this.state.zoom = this.state.targetZoom;\n      this.state.isZooming = false;\n    } else {\n      // 继续动画\n      requestAnimationFrame(this.animateZoom.bind(this));\n    }\n    \n    // 请求渲染\n    this.scheduleRender();\n  }\n  \n  /**\n   * 处理容器尺寸变化\n   * 确保Canvas和WebGL视口正确适应新尺寸\n   */\n  handleResize() {\n    // 增强的安全检查\n    if (!this.container || !this.resources.canvas || !this.resources.regl) {\n      console.warn('ScatterRenderer: 关键资源未初始化，跳过尺寸更新');\n      return;\n    }\n    \n    // 检查容器是否仍在DOM中\n    if (!document.contains(this.container)) {\n      console.warn('ScatterRenderer: 容器已从DOM中移除，跳过尺寸更新');\n      return;\n    }\n    \n    console.log('ScatterRenderer: 开始处理尺寸变化');\n    \n    try {\n      // 获取容器的当前尺寸\n      const containerWidth = this.container.offsetWidth;\n      const containerHeight = this.container.offsetHeight;\n      \n      console.log(`ScatterRenderer: 容器尺寸 - 宽度: ${containerWidth}, 高度: ${containerHeight}`);\n      \n      // 如果容器尺寸为0，跳过更新\n      if (containerWidth === 0 || containerHeight === 0) {\n        console.warn('ScatterRenderer: 容器尺寸为0，跳过尺寸更新');\n        return;\n      }\n      \n      // 获取设备像素比，确保高清显示\n      const pixelRatio = window.devicePixelRatio || 1;\n      this.state.viewportRatio = pixelRatio;\n      \n      // 计算新的画布尺寸\n      const newCanvasWidth = Math.floor(containerWidth * pixelRatio);\n      const newCanvasHeight = Math.floor(containerHeight * pixelRatio);\n      \n      // 检查是否真的需要更新尺寸\n      if (this.resources.canvas.width === newCanvasWidth && \n          this.resources.canvas.height === newCanvasHeight) {\n        console.log('ScatterRenderer: 画布尺寸未变化，跳过更新');\n        return;\n      }\n      \n      console.log(`ScatterRenderer: 更新画布尺寸 - 宽度: ${newCanvasWidth}, 高度: ${newCanvasHeight}, 像素比: ${pixelRatio}`);\n      \n      // 更新画布的实际渲染尺寸（内部分辨率）\n      this.resources.canvas.width = newCanvasWidth;\n      this.resources.canvas.height = newCanvasHeight;\n      \n      // 更新画布的CSS显示尺寸\n      this.resources.canvas.style.width = containerWidth + 'px';\n      this.resources.canvas.style.height = containerHeight + 'px';\n      \n      // 更新REGL视口 - 这是关键步骤，确保WebGL渲染区域正确\n      try {\n        if (this.resources.regl && this.resources.regl._gl) {\n          this.resources.regl._gl.viewport(0, 0, newCanvasWidth, newCanvasHeight);\n          console.log(`ScatterRenderer: REGL视口已更新为 ${newCanvasWidth}x${newCanvasHeight}`);\n        }\n      } catch (error) {\n        console.error('ScatterRenderer: 更新REGL视口时出错:', error);\n      }\n      \n      // 更新宽高比相关的状态\n      this.state.aspectRatio = containerWidth / containerHeight;\n      \n      // 标记需要重新渲染\n      this.state.isDirty = true;\n      \n      // 立即请求重新渲染，确保尺寸变化后立即更新显示\n      this.scheduleRender(true); // 强制渲染\n      \n      console.log('ScatterRenderer: 尺寸更新完成，已请求重新渲染');\n    } catch (error) {\n      console.error('ScatterRenderer: 处理尺寸变化时出错:', error);\n    }\n  }\n  \n  /**\n   * 获取鼠标在WebGL坐标系中的位置\n   * @param {Event} event - 鼠标事件\n   * @returns {Array<number>} WebGL坐标 [x, y]\n   */\n  getMousePositionInWebGL(event) {\n    const rect = this.container.getBoundingClientRect();\n    \n    // 计算鼠标在canvas中的位置并归一化到[-1, 1]范围\n    const mouseX = (event.clientX - rect.left) / rect.width * 2 - 1;\n    const mouseY = -((event.clientY - rect.top) / rect.height * 2 - 1);\n    \n    return [mouseX, mouseY];\n  }\n  \n  /**\n   * 从WebGL坐标转换到数据坐标\n   * @param {Array<number>} position - WebGL坐标 [x, y]\n   * @returns {Array<number>} 数据坐标 [x, y]\n   */\n  getDataCoordinates(position) {\n    const [x, y] = position;\n    const aspectRatio = this.container.clientWidth / this.container.clientHeight;\n    \n    // 逆向应用变换矩阵\n    const transformMatrix = this.createTransformMatrix();\n    \n    // 计算变换的逆向应用\n    const scaleFactor = transformMatrix[0]; // zoom^2\n    \n    // 将变换后的坐标转换回原始归一化坐标\n    const normalizedX = (x - transformMatrix[12]) / scaleFactor;\n    const normalizedY = (y - transformMatrix[13]) / scaleFactor;\n    \n    // 从归一化数据坐标到原始数据坐标\n    const dataX = ((normalizedX / 0.4 + 1) / 2) * \n                  (this.data.dataRange.max_x - this.data.dataRange.min_x) + \n                  this.data.dataRange.min_x;\n    \n    const dataY = ((normalizedY / (0.4 * aspectRatio) + 1) / 2) * \n                  (this.data.dataRange.max_y - this.data.dataRange.min_y) + \n                  this.data.dataRange.min_y;\n    \n    return [dataX, dataY];\n  }\n  \n  /**\n   * 从数据坐标转换到WebGL坐标\n   * @param {Array<number>} position - 数据坐标 [x, y]\n   * @returns {Array<number>} WebGL坐标 [x, y]\n   */\n  getWebGLCoordinates(position) {\n    const [dataX, dataY] = position;\n    const aspectRatio = this.container.clientWidth / this.container.clientHeight;\n    \n    // 首先将数据坐标转换为归一化坐标\n    const normalizedX = ((dataX - this.data.dataRange.min_x) / \n                       (this.data.dataRange.max_x - this.data.dataRange.min_x) * 2.0 - 1.0) * 0.4;\n    \n    const normalizedY = ((dataY - this.data.dataRange.min_y) / \n                       (this.data.dataRange.max_y - this.data.dataRange.min_y) * 2.0 - 1.0) * 0.4 * aspectRatio;\n    \n    // 获取当前变换矩阵\n    const transformMatrix = this.createTransformMatrix();\n    \n    // 应用变换矩阵\n    const transformedX = normalizedX * transformMatrix[0] + transformMatrix[12];\n    const transformedY = normalizedY * transformMatrix[5] + transformMatrix[13];\n    \n    return [transformedX, transformedY];\n  }\n  \n  /**\n   * 开始选择区域\n   * @param {Event} event - 鼠标事件\n   */\n  startSelection(event) {\n    event.preventDefault();\n    event.stopPropagation(); // 阻止事件传播，防止触发平移\n    \n    // 确保不在平移状态\n    this.state.isPanning = false;\n    this.state.isSelecting = true;\n    \n    // 获取鼠标在canvas中的位置\n    const webGLCoords = this.getMousePositionInWebGL(event);\n    \n    // 将WebGL坐标转换为数据坐标，以便跟随缩放移动\n    const dataCoords = this.getDataCoordinates(webGLCoords);\n    \n    // 保存数据坐标\n    this.state.selectionStartData = dataCoords;\n    this.state.selectionEndData = dataCoords; // 初始化结束位置为开始位置\n    \n    // 保存WebGL坐标用于立即渲染\n    this.state.selectionStart = webGLCoords;\n    this.state.selectionEnd = webGLCoords;\n    \n    // 设置鼠标样式\n    this.resources.canvas.style.cursor = \"crosshair\";\n    \n    // 调试日志\n    console.log(\"开始选区: \", {webGLCoords, dataCoords});\n    \n    // 立即渲染\n    this.scheduleRender();\n  }\n  \n  /**\n   * 更新选择区域\n   * @param {Event} event - 鼠标事件\n   */\n  updateSelection(event) {\n    if (!this.state.isSelecting) return;\n    \n    event.preventDefault();\n    event.stopPropagation(); // 阻止事件传播，防止触发平移\n    \n    // 获取鼠标在WebGL坐标系中的位置\n    const webGLCoords = this.getMousePositionInWebGL(event);\n    \n    // 将WebGL坐标转换为数据坐标，以便跟随缩放移动\n    const dataCoords = this.getDataCoordinates(webGLCoords);\n    \n    // 更新选择结束位置（两种坐标都更新）\n    this.state.selectionEndData = dataCoords;\n    this.state.selectionEnd = webGLCoords;\n    \n    // 调试日志\n    console.log(\"更新选区: \", {\n      start: this.state.selectionStartData,\n      end: dataCoords\n    });\n    \n    // 请求渲染以更新选择框\n    this.scheduleRender();\n  }\n  \n  /**\n   * 结束选择区域\n   * @param {Event} event - 鼠标事件\n   */\n  async endSelection(event) {\n    if (!this.state.isSelecting) return;\n    \n    event.preventDefault();\n    event.stopPropagation(); // 阻止事件传播\n    \n    // 获取鼠标在WebGL坐标系中的位置\n    const webGLCoords = this.getMousePositionInWebGL(event);\n    \n    // 将WebGL坐标转换为数据坐标，以便跟随缩放移动\n    const dataCoords = this.getDataCoordinates(webGLCoords);\n    \n    // 更新最终选择结束位置（两种坐标）\n    this.state.selectionEndData = dataCoords;\n    this.state.selectionEnd = webGLCoords;\n    \n    // 计算选区是否有足够大小（使用数据坐标计算）\n    const minX = Math.min(this.state.selectionStartData[0], this.state.selectionEndData[0]);\n    const maxX = Math.max(this.state.selectionStartData[0], this.state.selectionEndData[0]);\n    const minY = Math.min(this.state.selectionStartData[1], this.state.selectionEndData[1]);\n    const maxY = Math.max(this.state.selectionStartData[1], this.state.selectionEndData[1]);\n    \n    // 检查选区是否足够大\n    const hasSelection = Math.abs(maxX - minX) > 0.001 && Math.abs(maxY - minY) > 0.001;\n    \n    // 调试日志\n    console.log(\"结束选区: \", {\n      start: this.state.selectionStartData,\n      end: dataCoords,\n      hasSelection,\n      selectionBox: {minX, maxX, minY, maxY}\n    });\n    \n    this.state.isSelecting = false;\n    \n    if (hasSelection) {\n      // 设置选区可见\n      this.state.selectionVisible = true;\n      \n      // 获取选择区域内的点\n      const selectedPoints = await this.getSelectedPoints();\n      \n      // 触发回调\n      if (this.callbacks.onPointSelected) {\n        this.callbacks.onPointSelected(selectedPoints);\n      }\n    } else {\n      // 如果选区太小，清除选区\n      this.clearSelection();\n    }\n    \n    // 更新渲染\n    this.scheduleRender();\n    \n    // 恢复鼠标样式\n    this.resources.canvas.style.cursor = \"crosshair\"; // 保持选择模式的鼠标样式\n  }\n  \n  /**\n   * 获取选择区域内的点\n   * @returns {Array} 选择区域内的点数组\n   */\n  async getSelectedPoints() {\n    if (!this.state.selectionStartData || !this.state.selectionEndData) return [];\n    \n    // 直接使用已保存的数据坐标\n    const [startX, startY] = this.state.selectionStartData;\n    const [endX, endY] = this.state.selectionEndData;\n    \n    // 计算选择框的范围\n    const minX = Math.min(startX, endX);\n    const maxX = Math.max(startX, endX);\n    const minY = Math.min(startY, endY);\n    const maxY = Math.max(startY, endY);\n    \n    console.log(\"选区范围（数据坐标）:\", minX, maxX, minY, maxY);\n    \n    // 获取四叉树\n    const quadTree = this.data.treeMap.get(\"tree\");\n    if (!quadTree) return [];\n    \n    // 查找范围内的节点\n    const nodes = quadTree.findNodesInRange(quadTree.root, {\n      minX, maxX, minY, maxY\n    });\n    \n    console.log(\"选区内找到节点数:\", nodes.length);\n    \n    try {\n      // 收集选区内的点\n      const selectedPoints = [];\n      \n      // 加载所有属性数据\n      const attributeDataMap = new Map();\n      \n      // 加载所有字段的属性数据\n      for (const fieldName of this.data.field) {\n        let attrData = null;\n        \n        // 检查属性缓存中是否有数据\n        if (this.data.attributeCache && this.data.attributeCache.has(fieldName)) {\n          attrData = this.data.attributeCache.get(fieldName);\n        } else {\n          // 如果缓存中没有，尝试加载\n          console.log(`属性 ${fieldName} 数据不在缓存中，尝试加载`);\n          attrData = await dataLoader.loadCellAttribute(fieldName);\n          \n          // 缓存数据\n          if (attrData && attrData.length > 0) {\n            if (!this.data.attributeCache) {\n              this.data.attributeCache = new Map();\n            }\n            this.data.attributeCache.set(fieldName, attrData);\n          }\n        }\n        \n        if (attrData && attrData.length > 0) {\n          attributeDataMap.set(fieldName, attrData);\n        }\n      }\n      \n      // 处理每个节点\n      for (const node of nodes) {\n        // 获取节点坐标数据\n        const nodeData = await this.safeGetMapData(node.id);\n        if (!nodeData || nodeData.length === 0) continue;\n        \n        // 获取节点的全局索引信息\n        const nodeIndexInfo = this.data.nodeIndices.get(node.id);\n        if (!nodeIndexInfo) {\n          console.warn(`找不到节点 ${node.id} 的索引信息，跳过处理`);\n          continue;\n        }\n        \n        // 过滤出选择框内的点\n        for (let i = 0; i < nodeData.length; i++) {\n          const point = nodeData[i];\n          if (point[0] >= minX && point[0] <= maxX && \n              point[1] >= minY && point[1] <= maxY) {\n            \n            // 计算全局点索引\n            const globalIndex = nodeIndexInfo.startIndex + i;\n            \n            // 构造与SingleCellGraph.selectArea()期望格式兼容的数据结构\n            // 格式：[x, y, ...属性值数组, 颜色数组]\n            const pointData = [\n              point[0], // x坐标\n              point[1]  // y坐标\n            ];\n            \n            // 添加所有属性值\n            const attributeValues = [];\n            for (const fieldName of this.data.field) {\n              const attrData = attributeDataMap.get(fieldName);\n              if (attrData && globalIndex < attrData.length) {\n                attributeValues.push(attrData[globalIndex] || 0);\n              } else {\n                attributeValues.push(0); // 默认值\n              }\n            }\n            \n            // 将属性值添加到点数据中\n            pointData.push(...attributeValues);\n            \n            // 计算颜色值（基于当前选中的颜色属性）\n            let colorValue = [0.4, 0.4, 0.4, 1.0]; // 更深的灰色，确保在白色背景上可见\n            \n            if (this.data.colorIndex >= 0 && this.data.colorIndex < this.data.field.length) {\n              const currentFieldName = this.data.field[this.data.colorIndex];\n              const currentAttrData = attributeDataMap.get(currentFieldName);\n              \n              if (currentAttrData && globalIndex < currentAttrData.length) {\n                const attrValue = currentAttrData[globalIndex] || 0;\n                colorValue = getColorFromValue(attrValue, this.data.colorIndex);\n              }\n            }\n            \n            // 添加颜色信息作为最后一个元素\n            pointData.push(colorValue);\n            \n            selectedPoints.push(pointData);\n          }\n        }\n      }\n      \n      console.log(\"选中点数:\", selectedPoints.length);\n      console.log(\"选中点数据格式示例:\", selectedPoints.length > 0 ? selectedPoints[0] : \"无数据\");\n      \n      return selectedPoints;\n      \n    } catch (err) {\n      console.error(\"获取选区点时出错:\", err);\n      return [];\n    }\n  }\n  \n  /**\n   * 清除选择\n   */\n  clearSelection() {\n    console.log('ScatterRenderer: 开始清除选区状态');\n    \n    // 记录清除前的状态\n    console.log('清除前状态:', {\n      selectionStart: this.state.selectionStart,\n      selectionEnd: this.state.selectionEnd,\n      selectionStartData: this.state.selectionStartData,\n      selectionEndData: this.state.selectionEndData,\n      isSelecting: this.state.isSelecting,\n      selectionVisible: this.state.selectionVisible,\n      selectionMode: this.state.selectionMode\n    });\n    \n    // 清除选区坐标数据\n    this.state.selectionStart = null;\n    this.state.selectionEnd = null;\n    this.state.selectionStartData = null;\n    this.state.selectionEndData = null;\n    this.state.selectedIndices = [];\n    this.state.isSelecting = false;\n    this.state.selectionVisible = false; // 重置选区可见状态\n    this.state.selectionMode = false; // 确保退出选择模式\n    \n    // 确保切换回平移模式\n    this.setPanningMode();\n    \n    // 强制设置为脏标记，确保重新渲染\n    this.state.isDirty = true;\n    \n    // 立即请求重新渲染，确保选区框被清除\n    if (!this.state.animationFrameId) {\n      this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n    }\n    \n    console.log('ScatterRenderer: 选区状态已清除');\n  }\n  \n  /**\n   * 绘制选择框\n   */\n  drawSelectionBox() {\n    // 确保我们有存储的数据坐标\n    if (!this.state.selectionStartData || !this.state.selectionEndData) return;\n    \n    // 将保存的数据坐标转换回当前视图的WebGL坐标\n    const startWebGL = this.getWebGLCoordinates(this.state.selectionStartData);\n    const endWebGL = this.getWebGLCoordinates(this.state.selectionEndData);\n    \n    // 计算选区边界（使用转换后的WebGL坐标）\n    const minX = Math.min(startWebGL[0], endWebGL[0]);\n    const maxX = Math.max(startWebGL[0], endWebGL[0]);\n    const minY = Math.min(startWebGL[1], endWebGL[1]);\n    const maxY = Math.max(startWebGL[1], endWebGL[1]);\n    \n    // 确保选区有一定的大小\n    if (Math.abs(maxX - minX) < 0.01 && Math.abs(maxY - minY) < 0.01) {\n      return; // 选区太小，不绘制\n    }\n    \n    // 先绘制半透明遮罩层\n    this.drawMaskLayer(minX, maxX, minY, maxY);\n    \n    // 再绘制不透明的边框线，确保边框在最上层\n    this.drawBorders(minX, maxX, minY, maxY);\n    \n    // 记录控制台日志用于调试\n    console.log(\"绘制选区框: \", {minX, maxX, minY, maxY});\n  }\n  \n  /**\n   * 绘制遮罩层\n   * @param {number} minX - 左边界\n   * @param {number} maxX - 右边界\n   * @param {number} minY - 下边界\n   * @param {number} maxY - 上边界\n   */\n  drawMaskLayer(minX, maxX, minY, maxY) {\n    if (!this.resources.regl) return;\n    \n    try {\n      // 创建围绕选区的四个矩形，形成遮罩\n      const positions = [\n        // 上方区域\n        [-1, -1], [-1, minY], [1, minY], [-1, -1], [1, -1], [1, minY],\n        // 下方区域\n        [-1, 1], [-1, maxY], [1, maxY], [-1, 1], [1, 1], [1, maxY],\n        // 左侧区域\n        [-1, minY], [minX, minY], [minX, maxY], [-1, minY], [-1, maxY], [minX, maxY],\n        // 右侧区域\n        [1, minY], [maxX, minY], [maxX, maxY], [maxX, maxY], [1, maxY], [1, minY]\n      ];\n      \n      // 创建缓冲区\n      const positionBuffer = this.resources.regl.buffer(positions);\n      \n      // 绘制遮罩\n      this.resources.regl({\n        viewport: {\n          width: this.resources.canvas.width,\n          height: this.resources.canvas.height,\n        },\n        depth: {\n          enable: false, // 禁用深度测试，确保遮罩显示在最上层\n        },\n        blend: {\n          enable: true,\n          func: {\n            src: \"src alpha\",\n            dst: \"one minus src alpha\",\n          },\n        },\n        frag: generateMaskLayerFragmentShader(),\n        vert: `#version 300 es\n          precision mediump float;\n          in vec2 position;\n          void main() {\n            gl_Position = vec4(position, -0.99, 1); // 将z值设置为接近近平面，确保显示在前面\n          }\n        `,\n        attributes: {\n          position: positionBuffer\n        },\n        count: positions.length,\n        primitive: \"triangles\",\n      })();\n      \n      // 释放缓冲区\n      positionBuffer.destroy();\n    } catch (error) {\n      console.error(\"绘制遮罩层错误:\", error);\n    }\n  }\n  \n  /**\n   * 绘制实心边框线（不使用虚线，确保可见性）\n   * @param {number} minX - 左边界\n   * @param {number} maxX - 右边界\n   * @param {number} minY - 下边界\n   * @param {number} maxY - 上边界\n   */\n  drawBorders(minX, maxX, minY, maxY) {\n    if (!this.resources.regl) return;\n    \n    try {\n      // 使用宽线绘制方法 - 预计算粗线顶点\n      // 每条边被扩展为三角形，以便达到更粗的线宽效果\n      // 外边框线宽 - 单位是WebGL坐标系中的尺寸\n      const lineWidth = 0.001;\n      \n      // 绘制四条边的三角形带\n      const thickLineVertices = [\n        // 顶边 (两个三角形)\n        [minX, minY], [maxX, minY], [minX, minY + lineWidth],\n        [minX, minY + lineWidth], [maxX, minY], [maxX, minY + lineWidth],\n        \n        // 右边 (两个三角形)\n        [maxX, minY], [maxX + lineWidth, minY], [maxX, maxY],\n        [maxX, maxY], [maxX + lineWidth, minY], [maxX + lineWidth, maxY],\n        \n        // 底边 (两个三角形)\n        [minX, maxY - lineWidth], [maxX, maxY - lineWidth], [minX, maxY],\n        [minX, maxY], [maxX, maxY - lineWidth], [maxX, maxY],\n        \n        // 左边 (两个三角形)\n        [minX, minY], [minX + lineWidth, minY], [minX, maxY],\n        [minX, maxY], [minX + lineWidth, minY], [minX + lineWidth, maxY]\n      ];\n      \n      // 创建粗边框缓冲区\n      const thickLineBuffer = this.resources.regl.buffer(thickLineVertices);\n      \n      // 绘制粗边框 - 亮蓝色\n      this.resources.regl({\n        viewport: {\n          width: this.resources.canvas.width,\n          height: this.resources.canvas.height,\n        },\n        depth: {\n          enable: false, // 禁用深度测试，确保边框显示在最上层\n        },\n        blend: {\n          enable: true,\n          func: {\n            srcRGB: 'one',\n            dstRGB: 'zero',\n            srcAlpha: 'one',\n            dstAlpha: 'zero'\n          }\n        },\n        frag: `#version 300 es\n          precision mediump float;\n          out vec4 fragColor;\n          void main() {\n            fragColor = vec4(0.2, 0.2, 0.2, 1.0); // 亮蓝色，完全不透明\n          }\n        `,\n        vert: `#version 300 es\n          precision mediump float;\n          in vec2 position;\n          void main() {\n            gl_Position = vec4(position, -0.95, 1.0); // z值设为-0.95，确保在最上层\n          }\n        `,\n        attributes: {\n          position: thickLineBuffer\n        },\n        primitive: \"triangles\", // 使用三角形绘制粗线\n        count: thickLineVertices.length\n      })();\n      \n      // 释放缓冲区\n      thickLineBuffer.destroy();\n      \n      // // 再绘制一个内边框 - 白色，略细一些\n      // // 计算内部偏移量 - 使边框略小一些\n      // const innerOffset = 0.01;  \n      // const innerMinX = minX + innerOffset;\n      // const innerMaxX = maxX - innerOffset;\n      // const innerMinY = minY + innerOffset;\n      // const innerMaxY = maxY - innerOffset;\n      \n      // // 内边框线宽\n      // const innerWidth = 0.003;\n      \n      // // 绘制四条边的三角形带\n      // const innerLineVertices = [\n      //   // 顶边 (两个三角形)\n      //   [innerMinX, innerMinY], [innerMaxX, innerMinY], [innerMinX, innerMinY + innerWidth],\n      //   [innerMinX, innerMinY + innerWidth], [innerMaxX, innerMinY], [innerMaxX, innerMinY + innerWidth],\n        \n      //   // 右边 (两个三角形)\n      //   [innerMaxX, innerMinY], [innerMaxX + innerWidth, innerMinY], [innerMaxX, innerMaxY],\n      //   [innerMaxX, innerMaxY], [innerMaxX + innerWidth, innerMinY], [innerMaxX + innerWidth, innerMaxY],\n        \n      //   // 底边 (两个三角形)\n      //   [innerMinX, innerMaxY - innerWidth], [innerMaxX, innerMaxY - innerWidth], [innerMinX, innerMaxY],\n      //   [innerMinX, innerMaxY], [innerMaxX, innerMaxY - innerWidth], [innerMaxX, innerMaxY],\n        \n      //   // 左边 (两个三角形)\n      //   [innerMinX, innerMinY], [innerMinX + innerWidth, innerMinY], [innerMinX, innerMaxY],\n      //   [innerMinX, innerMaxY], [innerMinX + innerWidth, innerMinY], [innerMinX + innerWidth, innerMaxY]\n      // ];\n      \n      // const innerLineBuffer = this.resources.regl.buffer(innerLineVertices);\n      \n      // // 绘制内边框 - 白色\n      // this.resources.regl({\n      //   viewport: {\n      //     width: this.resources.canvas.width,\n      //     height: this.resources.canvas.height,\n      //   },\n      //   depth: {\n      //     enable: false, // 禁用深度测试\n      //   },\n      //   blend: {\n      //     enable: true,\n      //     func: {\n      //       srcRGB: 'one',\n      //       dstRGB: 'zero',\n      //       srcAlpha: 'one',\n      //       dstAlpha: 'zero'\n      //     }\n      //   },\n      //   frag: `#version 300 es\n      //     precision mediump float;\n      //     out vec4 fragColor;\n      //     void main() {\n      //       fragColor = vec4(1.0, 1.0, 1.0, 1.0); // 白色，完全不透明\n      //     }\n      //   `,\n      //   vert: `#version 300 es\n      //     precision mediump float;\n      //     in vec2 position;\n      //     void main() {\n      //       gl_Position = vec4(position, -0.94, 1.0); // z值设为-0.94，确保在蓝色边框之上\n      //     }\n      //   `,\n      //   attributes: {\n      //     position: innerLineBuffer\n      //   },\n      //   primitive: \"triangles\", // 使用三角形绘制\n      //   count: innerLineVertices.length\n      // })();\n      \n      // // 释放内边框缓冲区\n      // innerLineBuffer.destroy();\n      \n      // 记录调试信息\n      // console.log(\"边框已绘制\", {minX, maxX, minY, maxY});\n    } catch (error) {\n      console.error(\"绘制边框错误:\", error);\n    }\n  }\n  \n  /**\n   * 处理点悬停\n   * @param {Event} event - 鼠标事件\n   */\n  async hoverPoint(event) {\n    // 如果在选择模式或正在平移或选择中，不处理悬停\n    if (this.state.selectionMode || this.state.isPanning || this.state.isSelecting) return;\n    \n    // 获取鼠标位置\n    const [mouseX, mouseY] = this.getMousePositionInWebGL(event);\n    \n    // 转换为数据坐标\n    const [dataX, dataY] = this.getDataCoordinates([mouseX, mouseY]);\n    \n    // 获取四叉树\n    const quadTree = this.data.treeMap.get(\"tree\");\n    if (!quadTree) return;\n    \n    // 查找鼠标位置所在的节点\n    const node = quadTree.findNodeByPoint(dataX, dataY);\n    if (!node) {\n      // 如果没有找到节点，清除悬停状态\n      if (this.state.hoverCategory !== -1) {\n        this.state.hoverCategory = -1;\n        this.scheduleRender();\n      }\n      \n      // 隐藏提示框\n      this.hideTooltip();\n      return;\n    }\n    \n    // 从缓存获取节点坐标数据\n    const nodeData = await this.safeGetMapData(node.id) || [];\n    \n    // 获取节点的全局索引信息\n    const nodeIndexInfo = this.data.nodeIndices.get(node.id);\n    if (!nodeIndexInfo) {\n      console.warn(`找不到节点 ${node.id} 的索引信息`);\n      return;\n    }\n    \n    // 定义动态阈值，基于缩放级别调整\n    const baseThreshold = 5; // 基础像素值\n    \n    // 缩放调整因子 - 随着放大缩放值会变小，需要更敏感的检测\n    const zoomAdjustment = Math.max(0.2, 1.5 / Math.sqrt(this.state.zoom));\n    \n    // 计算最终阈值\n    const threshold = baseThreshold * zoomAdjustment * \n                    (2 / Math.min(this.resources.canvas.width, this.resources.canvas.height));\n    \n    // 查找最近的点\n    let hoveredPoint = null;\n    let closestDistance = Infinity;\n    let localPointIndex = -1;\n    \n    for (let i = 0; i < nodeData.length; i++) {\n      // 转换点坐标到WebGL坐标\n      const [px, py] = this.getWebGLCoordinates([nodeData[i][0], nodeData[i][1]]);\n      \n      // 计算距离\n      const distX = px - mouseX;\n      const distY = py - mouseY;\n      const distance = Math.sqrt(distX * distX + distY * distY);\n      \n      // 跟踪最近的点\n      if (distance < closestDistance) {\n        closestDistance = distance;\n        \n        // 检查是否在阈值范围内\n        if (distance < threshold) {\n          hoveredPoint = nodeData[i];\n          localPointIndex = i;\n        }\n      }\n    }\n    \n    // 处理悬停状态\n    if (hoveredPoint) {\n      // 计算全局点索引\n      const globalPointIndex = nodeIndexInfo.startIndex + localPointIndex;\n      \n      // 获取属性值\n      let attrValue = -1;\n      \n      // 如果有指定的颜色属性索引，获取对应的属性值\n      if (this.data.colorIndex >= 0 && this.data.colorIndex < this.data.field.length) {\n        const fieldName = this.data.field[this.data.colorIndex];\n        \n        // 检查属性缓存中是否有数据\n        if (this.data.attributeCache && this.data.attributeCache.has(fieldName)) {\n          const attrData = this.data.attributeCache.get(fieldName);\n          if (globalPointIndex < attrData.length) {\n            attrValue = attrData[globalPointIndex] || 0;\n          }\n        } else {\n          // 如果缓存中没有，提示需要加载\n          console.log(`属性 ${fieldName} 数据不在缓存中，需要加载`);\n        }\n      }\n      \n      // 保存当前悬停的属性值\n      this.state.hoverCategory = attrValue;\n      console.log(`设置悬停类别: ${attrValue}`);\n      \n      // 显示提示框，传递全局索引\n      this.showTooltip(hoveredPoint, event, attrValue, globalPointIndex);\n      \n      // 触发悬停回调\n      if (this.callbacks.onPointHovered) {\n        this.callbacks.onPointHovered({\n          ...hoveredPoint,\n          attributeValue: attrValue,\n          globalIndex: globalPointIndex\n        });\n      }\n    } else {\n      // 清除悬停状态\n      this.state.hoverCategory = -1;\n      \n      // 隐藏提示框\n      this.hideTooltip();\n    }\n    \n    // 更新渲染\n    this.scheduleRender();\n  }\n  \n  /**\n   * 设置特定属性值对应的悬停类别\n   * @param {number} category - 类别值\n   */\n  setHoverCategory(category) {\n    // 清除过渡状态\n    this.state.isTransitioning = false;\n    \n    if (this.state.hoverCategory !== category) {\n      this.state.hoverCategory = category;\n      this.scheduleRender();\n      console.log(`设置悬停类别: ${category}`);\n    }\n  }\n  \n  /**\n   * 清除悬停类别\n   */\n  clearHoverCategory() {\n    if (this.state.hoverCategory !== -1) {\n      console.log('清除悬停类别，保留勾选高亮状态');\n      \n      // 保存当前的勾选高亮状态\n      const savedHighlightState = {\n        highlightAttributeName: this.state.highlightAttributeName,\n        highlightAttributeValues: [...(this.state.highlightAttributeValues || [])],\n        highlightByAttribute: this.state.highlightByAttribute,\n        isCheckHighlight: this.state.isCheckHighlight\n      };\n      \n      // 只清除悬停相关状态\n      this.state.hoverCategory = -1;\n      this.state.hoverAttributeName = null;\n      this.state.hoverValueIndex = -1;\n      \n      // 清除悬停纹理\n      if (this.resources.hoverTexture) {\n        this.resources.hoverTexture.destroy();\n        this.resources.hoverTexture = null;\n      }\n      \n      // 确保勾选高亮状态不被意外清除\n      this.state.highlightAttributeName = savedHighlightState.highlightAttributeName;\n      this.state.highlightAttributeValues = savedHighlightState.highlightAttributeValues;\n      this.state.highlightByAttribute = savedHighlightState.highlightByAttribute;\n      this.state.isCheckHighlight = savedHighlightState.isCheckHighlight;\n      \n      // 强制设置为脏标记，确保重新渲染\n      this.state.isDirty = true;\n      \n      // 立即请求重新渲染，确保显示更新\n      if (!this.state.animationFrameId) {\n        this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n      }\n      \n      console.log('悬停状态已清除，勾选高亮状态已保留:', savedHighlightState);\n    }\n  }\n  \n  /**\n   * 显示提示框\n   * @param {Array} point - 悬停的点\n   * @param {Event} event - 鼠标事件\n   * @param {number} attrValue - 属性值\n   * @param {number} globalIndex - 全局点索引\n   */\n  showTooltip(point, event, attrValue = -1, globalIndex = -1) {\n    // 检查是否存在tooltip元素，如果不存在则创建\n    let tooltip = document.getElementById(\"tooltip\");\n    if (!tooltip) {\n      tooltip = document.createElement(\"div\");\n      tooltip.id = \"tooltip\";\n      tooltip.className = \"tooltip-main\";\n      \n      // 添加明显可见的样式\n      const tooltipStyle = `\n        position: absolute;\n        background-color: #fff;\n        border: 2px solid #ff0000;\n        border-radius: 4px;\n        padding: 8px;\n        box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n        z-index: 9999;\n        max-width: 250px;\n        pointer-events: none;\n        font-family: Arial, sans-serif;\n      `;\n      tooltip.style.cssText = tooltipStyle;\n      \n      // 添加到canvas的父容器中\n      this.container.appendChild(tooltip);\n    }\n    \n    // 获取颜色值\n    const color = getColorFromValue(attrValue, this.data.colorIndex);\n    \n    // 格式化颜色为CSS格式\n    const colorStr = `rgba(${color[0] * 255}, ${color[1] * 255}, ${color[2] * 255}, ${color[3]})`;\n    \n    // 获取字段名称\n    const fieldName = this.data.colorIndex >= 0 && this.data.colorIndex < this.data.field.length\n      ? this.data.field[this.data.colorIndex]\n      : 'category';\n    \n    // 获取分类名称\n    const categoryName = this.options.fieldValue && \n                         this.options.fieldValue[fieldName] ? \n                         this.options.fieldValue[fieldName][attrValue] || \n                         `Value: ${attrValue}` : `Value: ${attrValue}`;\n    \n    // 设置提示框内容\n    tooltip.innerHTML = `\n      <p style=\"margin: 0 0 8px 0;\">\n        <span style=\"display:inline-block;width:20px;height:20px;border-radius:50%;background-color:${colorStr};\"></span>\n        <span style=\"margin-left:10px;font-size:16px;font-weight:bold;\">${categoryName}</span>\n      </p>\n      <p style=\"margin:0 0 5px 30px;font-size:14px;\"> Colored by ${fieldName}</p>\n      <p style=\"margin:0 0 0 30px;font-size:12px; color:#828282;\">Coords: (${point[0].toFixed(3)}, ${point[1].toFixed(3)})</p>\n      <p style=\"margin:0 0 0 30px;font-size:12px; color:#828282;\">Index: ${globalIndex}</p>\n    `;\n    \n    // 获取canvas的位置\n    const canvasRect = this.container.getBoundingClientRect();\n    \n    // 计算鼠标相对于canvas的位置\n    const mouseX = event.clientX - canvasRect.left;\n    const mouseY = event.clientY - canvasRect.top;\n    \n    // 显示tooltip以获取尺寸\n    tooltip.style.display = \"block\";\n    const tooltipWidth = tooltip.offsetWidth;\n    const tooltipHeight = tooltip.offsetHeight;\n    \n    // 计算tooltip位置 - 右下角优先，但保持在container内\n    let tooltipX = mouseX + 20; // 右侧偏移20px\n    let tooltipY = mouseY + 20; // 下方偏移20px\n    \n    // 确保tooltip在container内\n    if (tooltipX + tooltipWidth > canvasRect.width) {\n      tooltipX = mouseX - tooltipWidth - 10; // 改为左侧\n    }\n    \n    if (tooltipY + tooltipHeight > canvasRect.height) {\n      tooltipY = mouseY - tooltipHeight - 10; // 改为上方\n    }\n    \n    // 确保不超出左上边界\n    tooltipX = Math.max(5, tooltipX);\n    tooltipY = Math.max(5, tooltipY);\n    \n    // 设置位置\n    tooltip.style.left = `${tooltipX}px`;\n    tooltip.style.top = `${tooltipY}px`;\n    \n    // 确保可见并有过渡效果\n    tooltip.style.transition = \"opacity 0.2s\";\n    tooltip.style.opacity = \"1\";\n  }\n  \n  /**\n   * 隐藏提示框\n   */\n  hideTooltip() {\n    const tooltip = document.getElementById(\"tooltip\");\n    if (tooltip) {\n      tooltip.style.opacity = \"0\";\n      // 延迟设置display:none，让淡出效果生效\n      setTimeout(() => {\n        if (tooltip) tooltip.style.display = \"none\";\n      }, 200);\n    }\n  }\n  \n  /**\n   * 启动渲染循环\n   */\n  startRenderLoop() {\n    if (this.state.animationFrameId !== null) {\n      cancelAnimationFrame(this.state.animationFrameId);\n    }\n    \n    this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n  }\n  \n  /**\n   * 渲染帧\n   */\n  renderFrame() {\n    // 计算需要渲染的条件：有变更或使用惯性滚动\n    const shouldRender = this.state.isDirty || \n                         this.state.isZooming || \n                         (this.state.inertiaEnabled && \n                          (Math.abs(this.state.velocity.x) > 0.01 || \n                           Math.abs(this.state.velocity.y) > 0.01));\n    \n    if (shouldRender) {\n      perfTracker.startMark('render');\n      \n      try {\n        // 检查必要资源是否可用\n        if (!this.resources.positionBuffer || !this.resources.colorTexture) {\n          console.warn(\"渲染资源不完整，跳过渲染\");\n        } else {\n          // 更新FPS计数器\n          const fps = fpsCounter.update();\n          \n          // 执行渲染\n          if (this.resources.drawScatter) {\n            this.resources.regl.clear({\n              color: [1, 1, 1, 1],\n              depth: 1\n            });\n            \n            // 确保将当前颜色字段索引正确传递给着色器\n            // 直接从data.colorIndex读取，不使用uniforms\n            const currentColorField = this.data.colorIndex !== undefined ? \n                                     this.data.colorIndex : 0;\n            \n            // 检查是否有高亮纹理\n            const hasHighlight = this.resources.highlightTexture !== null && \n                               (this.state.highlightAttributeName !== null || this.state.highlightByAttribute);\n            \n            // 悬停状态判断\n            const isHoverMode = this.state.hoverCategory !== -1;\n            \n            // 鼠标在列表区域但没有悬停在具体选项上\n            const isMouseInEmptyArea = this.state.isMouseInListArea && !isHoverMode;\n            \n            // 是否是勾选高亮模式\n            const isCheckMode = this.state.isCheckHighlight;\n            \n            // 勾选高亮模式不受鼠标位置影响；只有在普通高亮模式下才考虑鼠标位置\n            // 当isCheckMode为true时，确保effectiveHighlight为true\n            const effectiveHighlight = isCheckMode ? true : \n                                     (hasHighlight && (!isHoverMode && !isMouseInEmptyArea));\n            \n            try {\n              // 调试日志\n              if (hasHighlight || isHoverMode || isMouseInEmptyArea) {\n                console.log(`渲染状态 - 高亮属性: ${this.state.highlightAttributeName}, ` + \n                            `值: ${this.state.highlightAttributeValues}, ` + \n                            `基于属性高亮: ${this.state.highlightByAttribute}, ` + \n                            `悬停类别: ${this.state.hoverCategory}, ` + \n                            `悬停模式: ${isHoverMode}, ` +\n                            `鼠标在列表空白处: ${isMouseInEmptyArea}, ` +\n                            `有效高亮: ${effectiveHighlight}`);\n              }\n              \n              // 是否是基于属性的高亮\n              const isAttributeHighlight = this.state.highlightByAttribute;\n              \n              // 是否是勾选高亮（勾选时非高亮点变灰）\n              const isCheckHighlight = this.state.isCheckHighlight || false;\n              \n              // 调试：记录关键渲染参数\n              console.log('渲染参数:', {\n                hasColorTexture: !!this.resources.colorTexture,\n                hasGeneColorTexture: !!this.resources.geneColorTexture,\n                hasGeneData: this.data.geneData !== null && this.resources.geneColorTexture !== null,\n                total: this.data.total,\n                filterNum: this.data.filterNum || 0\n              });\n              \n              // 传递所有状态给着色器\n              this.resources.drawScatter({\n                position: this.resources.positionBuffer,\n                transform: this.createTransformMatrix(),\n                zoom: this.state.zoom,\n                textureSize: this.resources.textureSize,\n                colorTexture: this.resources.colorTexture,\n                highlightTexture: hasHighlight ? this.resources.highlightTexture : this.resources.colorTexture,\n                hoverTexture: this.resources.hoverTexture || this.resources.colorTexture, // 使用悬停纹理，如不存在则使用颜色纹理\n                filterTexture: this.resources.filterTexture || this.resources.colorTexture, // 当没有筛选纹理时使用颜色纹理作为默认值\n                filterNum: this.data.filterNum || 0,\n                hoverCategory: this.state.hoverCategory !== -999 ? this.state.hoverCategory : -1, // 避免使用特殊值-999 \n                currentColorField: currentColorField,\n                geneExpRange: this.options.geneExpRange || {range: {start: -1.0, end: -1.0}},\n                // 对于勾选高亮，始终保持高亮效果启用，不管鼠标位置\n                hasHighlight: isCheckMode ? true : (effectiveHighlight || this.state.highlightByAttribute),\n                isAttributeHighlight: isAttributeHighlight, // 标识是否是基于属性高亮\n                isCheckHighlight: isCheckHighlight, // 标识是否是勾选高亮，影响非高亮点渲染\n                geneColorTexture: this.resources.geneColorTexture || this.resources.colorTexture, // 如果没有基因颜色纹理，使用默认颜色纹理\n                hasGeneData: this.data.geneData !== null && this.resources.geneColorTexture !== null, // 确保既有数据又有纹理\n              });\n              \n              // 绘制选择框（如果存在且应该显示）\n              if ((this.state.isSelecting || this.state.selectionVisible) && \n                  this.state.selectionStart && this.state.selectionEnd) {\n                this.drawSelectionBox();\n              }\n            } catch (renderError) {\n              console.error(\"绘制失败:\", renderError);\n              \n              // 尝试重建绘制命令\n              console.warn(\"尝试重建绘制命令...\");\n              this.resources.drawScatter = null;\n              if (this.createDrawCommand()) {\n                console.log(\"绘制命令已重建，将在下一帧重试\");\n              }\n            }\n          }\n        }\n        \n        const renderTime = perfTracker.endMark('render');\n        perfTracker.trackRenderTime(renderTime);\n        perfWatcher.checkRenderTime(renderTime);\n        \n        // 重置脏标记\n        this.state.isDirty = false;\n        \n      } catch (error) {\n        console.error(\"渲染失败:\", error);\n        this.handleError(\"渲染时\", error);\n      }\n    }\n    \n    // 应用惯性和动画\n    if (this.state.isZooming) {\n      this.animateZoom();\n    }\n    \n    // 安排下一帧\n    this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n  }\n  \n  /**\n   * 设置交互模式\n   * @param {string} mode - 交互模式，可选值：\"pan\"（平移模式）或\"select\"（选择模式）\n   * @returns {boolean} - 是否成功设置模式\n   */\n  setMode(mode) {\n    if (!this.resources.canvas) {\n      console.error(\"无法设置模式：canvas不存在\");\n      return false;\n    }\n    \n    // 如果已经在该模式，不重复设置\n    if ((mode.toLowerCase() === \"pan\" && !this.state.selectionMode) || \n        (mode.toLowerCase() === \"select\" && this.state.selectionMode)) {\n      return true;\n    }\n    \n    switch (mode.toLowerCase()) {\n      case \"pan\":\n        this.setPanningMode();\n        return true;\n        \n      case \"select\":\n        this.setSelectionMode();\n        return true;\n        \n      default:\n        console.error(`未知的模式: ${mode}，可选值为 \"pan\" 或 \"select\"`);\n        return false;\n    }\n  }\n  \n  /**\n   * 获取当前模式\n   * @returns {string} - 当前模式，\"pan\"或\"select\"\n   */\n  getMode() {\n    return this.state.selectionMode ? \"select\" : \"pan\";\n  }\n  \n  /**\n   * 测试选区功能\n   * 提供给用户快速测试选区功能\n   * @param {boolean} enableSelection - 是否启用选区模式\n   * @param {boolean} drawTestBox - 是否绘制测试选区框\n   * @returns {string} - 测试状态信息\n   */\n  testSelection(enableSelection = true, drawTestBox = true) {\n    // 当前模式\n    const currentMode = this.getMode();\n    const statusMessage = [];\n    \n    statusMessage.push(`当前模式: ${currentMode}`);\n    \n    if (enableSelection) {\n      // 切换到选区模式\n      this.setMode(\"select\");\n      statusMessage.push(\"已切换到选区模式\");\n      \n      if (drawTestBox) {\n        // 绘制测试选区框\n        this.forceDrawSelectionBox(false);\n        statusMessage.push(\"已绘制测试选区框\");\n      } else {\n        statusMessage.push(\"请拖动鼠标进行框选\");\n      }\n      \n      if (this.callbacks.onPointSelected) {\n        statusMessage.push(\"选中回调已设置，选中后将触发回调\");\n      } else {\n        statusMessage.push(\"警告: 未设置选中回调函数(onPointSelected)\");\n        \n        // 自动添加一个测试回调\n        this.callbacks.onPointSelected = (points) => {\n          console.log(`选中了 ${points.length} 个点`);\n          alert(`选中了 ${points.length} 个点`);\n        };\n        statusMessage.push(\"已添加测试回调\");\n      }\n    } else {\n      // 切换回平移模式\n      this.setMode(\"pan\");\n      statusMessage.push(\"已切换回平移模式\");\n      \n      // 如果有测试框，清除它\n      if (this.state.selectionVisible) {\n        this.clearSelection();\n        statusMessage.push(\"已清除测试选区框\");\n      }\n    }\n    \n    // 记录WebGL和混合设置\n    const gl = this.resources.regl._gl;\n    if (gl) {\n      statusMessage.push(`WebGL版本: ${gl.getParameter(gl.VERSION)}`);\n      statusMessage.push(`最大纹理大小: ${gl.getParameter(gl.MAX_TEXTURE_SIZE)}`);\n    }\n    \n    return statusMessage.join(\"\\n\");\n  }\n  \n  /**\n   * 隐藏或显示选区框\n   * @param {boolean} visible - 是否显示选区框\n   */\n  setSelectionVisible(visible = true) {\n    if (this.state.selectionStart && this.state.selectionEnd) {\n      this.state.selectionVisible = visible;\n      this.scheduleRender();\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * 强制绘制测试选区框\n   * 主要用于调试选区框的绘制功能\n   * @param {boolean} clearAfter - 绘制后是否清除选区\n   * @returns {boolean} - 是否成功绘制\n   */\n  forceDrawSelectionBox(clearAfter = false) {\n    // 如果没有选区数据，创建测试数据\n    if (!this.state.selectionStartData || !this.state.selectionEndData) {\n      // 创建一个测试选区 - 尺寸固定，居中显示\n      const centerX = 0;\n      const centerY = 0;\n      const size = 0.5; // 选区大小\n      \n      // 将创建两个对角顶点\n      this.state.selectionStartData = [centerX - size/2, centerY - size/2];\n      this.state.selectionEndData = [centerX + size/2, centerY + size/2];\n      \n      // 转换为WebGL坐标\n      this.state.selectionStart = this.getWebGLCoordinates(this.state.selectionStartData);\n      this.state.selectionEnd = this.getWebGLCoordinates(this.state.selectionEndData);\n    }\n    \n    // 强制显示选区\n    this.state.selectionVisible = true;\n    \n    // 调试日志\n    console.log(\"强制绘制选区: \", {\n      start: this.state.selectionStartData,\n      end: this.state.selectionEndData,\n      startWebGL: this.state.selectionStart,\n      endWebGL: this.state.selectionEnd\n    });\n    \n    // 请求渲染\n    this.scheduleRender();\n    \n    // 如果需要清除选区\n    if (clearAfter) {\n      // 延迟3秒后清除选区\n      setTimeout(() => {\n        this.clearSelection();\n        this.scheduleRender();\n      }, 3000);\n    }\n    \n    return true;\n  }\n  \n  /**\n   * 将当前画布保存为PNG图像\n   * @param {string} fileName - 下载文件的名称(可选)\n   */\n  downloadCanvasAsPNG(fileName = 'scatter_plot') {\n    try {\n      const canvas = this.resources.canvas;\n      if (!canvas) {\n        console.error('无法下载：画布不存在');\n        return;\n      }\n      \n      // 确保文件名有效\n      const safeFileName = fileName.replace(/[^a-z0-9]/gi, '_').toLowerCase();\n      \n      // 创建下载链接\n      const link = document.createElement('a');\n      link.download = `${safeFileName}_${new Date().toISOString().split('T')[0]}.png`;\n      \n      // 将画布内容转换为数据URL\n      link.href = canvas.toDataURL('image/png');\n      \n      // 触发下载\n      document.body.appendChild(link);\n      link.click();\n      \n      // 清理DOM\n      setTimeout(() => {\n        document.body.removeChild(link);\n        URL.revokeObjectURL(link.href);\n      }, 100);\n      \n      console.log('图像已下载');\n    } catch (error) {\n      console.error('下载图像时出错:', error);\n    }\n  }\n\n  /**\n   * 设置鼠标是否在列表区域标志\n   * @param {boolean} isInArea - 是否在列表区域\n   */\n  setMouseInListArea(isInArea) {\n    // 只在状态变化时才触发重新渲染\n    if (this.state.isMouseInListArea !== isInArea) {\n      console.log(`鼠标${isInArea ? '进入' : '离开'}列表区域`);\n      this.state.isMouseInListArea = isInArea;\n      \n      // 在勾选高亮模式下，不需要因为鼠标位置变化而重新渲染\n      // 只有在没有勾选高亮时才因鼠标位置变化而重新渲染\n      if (!this.state.isCheckHighlight) {\n        this.state.isDirty = true;\n      }\n    }\n  }\n  \n  /**\n   * 根据属性名和属性值索引设置悬停高亮\n   * @param {string} attributeName - 属性名称\n   * @param {number} valueIndex - 属性值索引\n   * @returns {Promise<boolean>} - 是否成功设置悬停高亮\n   */\n  async setHoverByAttribute(attributeName, valueIndex) {\n    try {\n      // 如果参数无效，则清除悬停状态\n      if (!attributeName || valueIndex === undefined || valueIndex < 0) {\n        console.log(`悬停参数无效: ${attributeName}:${valueIndex}，清除悬停`);\n        this.clearHoverCategory();\n        return false;\n      }\n\n      console.log(`设置基于属性的悬停: ${attributeName}, 值索引: ${valueIndex}`);\n\n      // 检查属性名是否在字段列表中\n      if (!this.data.field || !this.data.field.includes(attributeName)) {\n        console.error(`属性 ${attributeName} 不在字段列表中，可用字段: ${this.data.field.join(', ')}`);\n        return false;\n      }\n\n      // 加载悬停属性数据 - 这里是关键，加载当前悬停的属性数据，而不是使用当前渲染色彩的属性\n      const attrData = await this.loadHighlightAttributeData(attributeName);\n      if (!attrData || attrData.length === 0) {\n        console.error(`无法加载属性 ${attributeName} 的数据，或数据为空`);\n        return false;\n      }\n\n      // 创建临时悬停纹理 - 用于存储当前悬停属性的二进制标记\n      if (!this.resources.hoverTexture) {\n        console.log(`创建悬停纹理，尺寸: ${this.resources.textureSize}`);\n        this.resources.hoverTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n\n      // 更新悬停纹理数据 - 将符合特定属性值的点标记出来\n      console.log(`更新悬停纹理数据，总点数: ${this.data.total}，目标值索引: ${valueIndex}`);\n\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        // 计算这一行的起始点索引\n        const startPointIndex = row * texWidth;\n        \n        // 计算这一行要处理的点数量（考虑最后一行可能不满）\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break; // 已处理完所有点\n        \n        // 创建这一行的纹理数据\n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 标记符合条件的点\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          \n          // 检查点的属性值是否匹配悬停值\n          let isHovered = false;\n          \n          if (globalPointIndex < attrData.length) {\n            const pointValue = Math.round(attrData[globalPointIndex]); // 确保整数比较\n            isHovered = pointValue === valueIndex;\n          }\n          \n          // 将悬停状态存储在透明度通道\n          rowData[i * 4] = isHovered ? 1.0 : 0.0;\n          rowData[i * 4 + 1] = 0.0;\n          rowData[i * 4 + 2] = 0.0;\n          rowData[i * 4 + 3] = isHovered ? 1.0 : 0.0;\n        }\n        \n        // 更新这一行到悬停纹理\n        this.resources.hoverTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0, // 从行首开始\n          row\n        );\n      }\n      \n      // 设置悬停状态 - 使用特殊值标记这是基于属性的悬停而非值的悬停\n      this.state.hoverCategory = -999; // 特殊值，表示使用悬停纹理\n      this.state.hoverAttributeName = attributeName;\n      this.state.hoverValueIndex = valueIndex;\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`设置基于属性的悬停出错:`, error);\n      this.clearHoverByAttribute();\n      return false;\n    }\n  }\n  \n  /**\n   * 清除属性悬停状态\n   */\n  clearHoverByAttribute() {\n    // 清除悬停状态变量\n    this.state.hoverCategory = -1;\n    this.state.hoverAttributeName = null;\n    this.state.hoverValueIndex = -1;\n    \n    // 如果悬停纹理存在，清空它\n    if (this.resources.hoverTexture) {\n      this.resources.hoverTexture.destroy();\n      this.resources.hoverTexture = null;\n    }\n    \n    // 强制设置为脏标记，确保重新渲染\n    this.state.isDirty = true;\n  }\n  \n  /**\n   * 加载指定属性数据并根据值索引高亮相关点\n   * @param {string} attributeName - 属性名称\n   * @param {number} valueIndex - 属性值索引\n   * @param {boolean} isCheckHighlight - 是否是勾选高亮模式（勾选时其他点变灰，悬停时保持原色）\n   * @returns {Promise<boolean>} - 是否成功设置高亮\n   */\n  async loadAttributeAndHighlight(attributeName, valueIndex, isCheckHighlight = false) {\n    try {\n      // 如果参数无效，清除高亮状态\n      if (!attributeName || valueIndex === undefined || valueIndex < 0) {\n        console.log(`高亮参数无效: ${attributeName}:${valueIndex}，清除高亮`);\n        this.clearAttributeHighlight();\n        return false;\n      }\n\n      console.log(`加载属性并高亮: ${attributeName}, 值索引: ${valueIndex}, 勾选高亮: ${isCheckHighlight}`);\n\n      // 检查属性名是否在字段列表中\n      if (!this.data.field || !this.data.field.includes(attributeName)) {\n        console.error(`属性 ${attributeName} 不在字段列表中，可用字段: ${this.data.field.join(', ')}`);\n        return false;\n      }\n\n      // 加载属性数据\n      const attrData = await this.loadHighlightAttributeData(attributeName);\n      if (!attrData || attrData.length === 0) {\n        console.error(`无法加载属性 ${attributeName} 的数据，或数据为空`);\n        return false;\n      }\n\n      // 创建高亮纹理\n      if (!this.resources.highlightTexture) {\n        // 创建高亮纹理\n        console.log(`创建高亮纹理，尺寸: ${this.resources.textureSize}`);\n        this.resources.highlightTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n\n      // 更新状态\n      this.state.highlightAttributeName = attributeName;\n      this.state.highlightAttributeValues = [valueIndex]; // 修改：更新高亮属性值数组\n      this.state.highlightByAttribute = true; // 标记这是基于属性的高亮\n      this.state.isCheckHighlight = isCheckHighlight; // 新增：标记是否是勾选高亮\n\n      // 更新高亮纹理数据\n      console.log(`更新高亮纹理数据，总点数: ${this.data.total}`);\n\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n\n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        // 计算这一行的起始点索引\n        const startPointIndex = row * texWidth;\n        \n        // 计算这一行要处理的点数量（考虑最后一行可能不满）\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break; // 已处理完所有点\n        \n        // 创建这一行的纹理数据\n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 设置高亮数据\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          \n          // 如果点的属性值与高亮值匹配，则设置为1，否则为0\n          // 确保不会访问超出attrData范围的索引\n          let isHighlighted = false;\n          \n          if (globalPointIndex < attrData.length) {\n            const pointValue = Math.round(attrData[globalPointIndex]);\n            // 修改：检查点值是否在高亮值数组中（支持多个值的并集）\n            isHighlighted = this.state.highlightAttributeValues.some(highlightValue => \n              pointValue === highlightValue);\n          }\n          \n          // 将高亮状态设置到alpha通道\n          rowData[i * 4] = 0;\n          rowData[i * 4 + 1] = 0;\n          rowData[i * 4 + 2] = 0;\n          rowData[i * 4 + 3] = isHighlighted ? 1.0 : 0.0;\n        }\n        \n        // 更新这一行到纹理\n        this.resources.highlightTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0, // 从行首开始\n          row\n        );\n      }\n      \n      console.log(`属性高亮纹理更新完成，属性: ${attributeName}, 值索引: ${valueIndex}`);\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`设置属性高亮时出错:`, error);\n      this.clearAttributeHighlight();\n      return false;\n    }\n  }\n  \n  /**\n   * 清除属性高亮状态\n   */\n  clearAttributeHighlight() {\n    console.log('完全清除所有属性高亮状态');\n    \n    // 清除单属性高亮状态变量\n    this.state.highlightAttributeName = null;\n    this.state.highlightAttributeValues = []; // 修改：清空高亮属性值数组\n    this.state.highlightByAttribute = false;\n    this.state.isCheckHighlight = false; // 重要：确保清除勾选高亮标记\n    \n    // 清除多属性交集高亮状态\n    this.state.multiAttributeHighlight.enabled = false;\n    this.state.multiAttributeHighlight.attributes.clear();\n    this.state.multiAttributeHighlight.isCheckHighlight = false;\n    \n    // 如果高亮纹理存在，将其清空\n    if (this.resources.highlightTexture) {\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      try {\n        // 创建全零的数据数组（清除所有高亮标记）\n        const emptyData = new Float32Array(texWidth * texHeight * 4).fill(0);\n        \n        // 更新纹理 - 确保使用完整的纹理尺寸\n        this.resources.highlightTexture.subimage({\n          data: emptyData,\n          width: texWidth,\n          height: texHeight\n        });\n        \n        console.log('属性高亮纹理已清除');\n      } catch (error) {\n        console.error('清除高亮纹理时出错:', error);\n      }\n    }\n    \n    // 强制设置为脏标记，确保重新渲染\n    this.state.isDirty = true;\n  }\n  \n  /**\n   * 设置多个属性值的高亮（并集）\n   * @param {string} attributeName - 属性名称\n   * @param {Array<number>} valueIndices - 属性值索引数组\n   * @param {boolean} isCheckHighlight - 是否是勾选高亮模式\n   * @returns {Promise<boolean>} - 是否成功设置高亮\n   */\n  async setMultipleAttributeHighlight(attributeName, valueIndices, isCheckHighlight = false) {\n    try {\n      // 检查参数有效性\n      if (!attributeName || !Array.isArray(valueIndices) || valueIndices.length === 0) {\n        console.log(`多值高亮参数无效: ${attributeName}:${valueIndices}，清除高亮`);\n        this.clearAttributeHighlight();\n        return false;\n      }\n\n      // 过滤掉无效的值索引\n      const validValueIndices = valueIndices.filter(index => \n        typeof index === 'number' && index >= 0);\n      \n      if (validValueIndices.length === 0) {\n        console.log(`没有有效的值索引，清除高亮`);\n        this.clearAttributeHighlight();\n        return false;\n      }\n\n      console.log(`设置多值高亮: ${attributeName}, 值索引: [${validValueIndices.join(', ')}], 勾选高亮: ${isCheckHighlight}`);\n\n      // 检查属性名是否在字段列表中\n      if (!this.data.field || !this.data.field.includes(attributeName)) {\n        console.error(`属性 ${attributeName} 不在字段列表中，可用字段: ${this.data.field.join(', ')}`);\n        return false;\n      }\n\n      // 加载属性数据\n      const attrData = await this.loadHighlightAttributeData(attributeName);\n      if (!attrData || attrData.length === 0) {\n        console.error(`无法加载属性 ${attributeName} 的数据，或数据为空`);\n        return false;\n      }\n\n      // 创建高亮纹理\n      if (!this.resources.highlightTexture) {\n        console.log(`创建高亮纹理，尺寸: ${this.resources.textureSize}`);\n        this.resources.highlightTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n\n      // 更新状态 - 设置多个高亮值\n      this.state.highlightAttributeName = attributeName;\n      this.state.highlightAttributeValues = [...validValueIndices]; // 复制数组，避免引用问题\n      this.state.highlightByAttribute = true;\n      this.state.isCheckHighlight = isCheckHighlight;\n\n      // 更新高亮纹理数据\n      console.log(`更新多值高亮纹理数据，总点数: ${this.data.total}，高亮值: [${validValueIndices.join(', ')}]`);\n\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n\n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        const startPointIndex = row * texWidth;\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break;\n        \n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 设置高亮数据 - 支持多个值的并集\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          let isHighlighted = false;\n          \n          if (globalPointIndex < attrData.length) {\n            const pointValue = Math.round(attrData[globalPointIndex]);\n            // 检查点值是否在任何一个高亮值中（并集逻辑）\n            isHighlighted = validValueIndices.includes(pointValue);\n          }\n          \n          // 将高亮状态设置到alpha通道\n          rowData[i * 4] = 0;\n          rowData[i * 4 + 1] = 0;\n          rowData[i * 4 + 2] = 0;\n          rowData[i * 4 + 3] = isHighlighted ? 1.0 : 0.0;\n        }\n        \n        // 更新这一行到纹理\n        this.resources.highlightTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0,\n          row\n        );\n      }\n      \n      console.log(`多值高亮纹理更新完成，属性: ${attributeName}, 值索引: [${validValueIndices.join(', ')}]`);\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      return true;\n    } catch (error) {\n      console.error(`设置多值高亮时出错:`, error);\n      this.clearAttributeHighlight();\n      return false;\n    }\n  }\n  \n  /**\n   * 设置多属性交集高亮\n   * @param {string} attributeName - 属性名称\n   * @param {Array<number>} valueIndices - 属性值索引数组\n   * @param {boolean} isCheckHighlight - 是否是勾选高亮模式\n   * @returns {Promise<boolean>} - 是否成功设置高亮\n   */\n  async setMultiAttributeIntersectionHighlight(attributeName, valueIndices, isCheckHighlight = false) {\n    try {\n      console.log(`=== 设置多属性交集高亮开始 ===`);\n      console.log(`属性: ${attributeName}, 值索引: [${valueIndices.join(', ')}], 勾选高亮: ${isCheckHighlight}`);\n      \n      // 检查参数有效性\n      if (!attributeName || !Array.isArray(valueIndices)) {\n        console.log(`多属性交集高亮参数无效: ${attributeName}:${valueIndices}`);\n        return false;\n      }\n\n      // 过滤掉无效的值索引\n      const validValueIndices = valueIndices.filter(index => \n        typeof index === 'number' && index >= 0);\n      \n      // 检查属性名是否在字段列表中\n      if (!this.data.field || !this.data.field.includes(attributeName)) {\n        console.error(`属性 ${attributeName} 不在字段列表中，可用字段: ${this.data.field.join(', ')}`);\n        return false;\n      }\n\n      // 启用多属性交集高亮模式\n      this.state.multiAttributeHighlight.enabled = true;\n      this.state.multiAttributeHighlight.isCheckHighlight = isCheckHighlight;\n      \n      // 更新或添加属性的勾选状态\n      if (validValueIndices.length > 0) {\n        this.state.multiAttributeHighlight.attributes.set(attributeName, validValueIndices);\n        console.log(`已添加属性 ${attributeName} 的勾选状态: [${validValueIndices.join(', ')}]`);\n      } else {\n        // 如果没有有效值索引，移除该属性\n        this.state.multiAttributeHighlight.attributes.delete(attributeName);\n        console.log(`已移除属性 ${attributeName} 的勾选状态`);\n      }\n      \n      // 检查是否还有其他属性被勾选\n      if (this.state.multiAttributeHighlight.attributes.size === 0) {\n        console.log(`没有任何属性被勾选，禁用多属性交集高亮`);\n        this.state.multiAttributeHighlight.enabled = false;\n        \n        // 完全清除多属性交集高亮状态\n        this.clearMultiAttributeHighlight();\n        return true;\n      }\n      \n      // 计算交集高亮\n      await this.calculateIntersectionHighlight();\n      \n      console.log(`=== 设置多属性交集高亮完成 ===`);\n      return true;\n    } catch (error) {\n      console.error(`设置多属性交集高亮时出错:`, error);\n      this.clearMultiAttributeHighlight();\n      return false;\n    }\n  }\n  \n  /**\n   * 计算多属性交集高亮\n   * @returns {Promise<boolean>} - 是否成功计算\n   */\n  async calculateIntersectionHighlight() {\n    try {\n      console.log(`=== 开始计算多属性交集高亮 ===`);\n      \n      const attributeMap = this.state.multiAttributeHighlight.attributes;\n      const attributeNames = Array.from(attributeMap.keys());\n      \n      console.log(`参与交集计算的属性: [${attributeNames.join(', ')}]`);\n      \n      // 加载所有相关属性的数据\n      const attributeDataMap = new Map();\n      for (const attributeName of attributeNames) {\n        const attrData = await this.loadHighlightAttributeData(attributeName);\n        if (!attrData || attrData.length === 0) {\n          console.error(`无法加载属性 ${attributeName} 的数据`);\n          return false;\n        }\n        attributeDataMap.set(attributeName, attrData);\n        console.log(`已加载属性 ${attributeName} 的数据，长度: ${attrData.length}`);\n      }\n\n      // 创建高亮纹理\n      if (!this.resources.highlightTexture) {\n        console.log(`创建高亮纹理，尺寸: ${this.resources.textureSize}`);\n        this.resources.highlightTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n\n      // 更新状态\n      this.state.highlightByAttribute = true;\n      this.state.isCheckHighlight = this.state.multiAttributeHighlight.isCheckHighlight;\n\n      // 更新高亮纹理数据\n      console.log(`更新多属性交集高亮纹理数据，总点数: ${this.data.total}`);\n\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      let highlightedPointsCount = 0;\n\n      // 批量处理，每次处理一行\n      for (let row = 0; row < texHeight; row++) {\n        const startPointIndex = row * texWidth;\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break;\n        \n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        // 设置高亮数据 - 计算多属性交集\n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          let isHighlighted = true; // 默认为true，需要所有条件都满足（交集）\n          \n          // 检查每个属性的条件\n          for (const [attributeName, valueIndices] of attributeMap) {\n            const attrData = attributeDataMap.get(attributeName);\n            \n            if (!attrData || globalPointIndex >= attrData.length) {\n              isHighlighted = false;\n              break;\n            }\n            \n            const pointValue = Math.round(attrData[globalPointIndex]);\n            const matchesThisAttribute = valueIndices.includes(pointValue);\n            \n            if (!matchesThisAttribute) {\n              isHighlighted = false;\n              break; // 如果任何一个属性不匹配，则该点不高亮（交集逻辑）\n            }\n          }\n          \n          if (isHighlighted) {\n            highlightedPointsCount++;\n          }\n          \n          // 将高亮状态设置到alpha通道\n          rowData[i * 4] = 0;\n          rowData[i * 4 + 1] = 0;\n          rowData[i * 4 + 2] = 0;\n          rowData[i * 4 + 3] = isHighlighted ? 1.0 : 0.0;\n        }\n        \n        // 更新这一行到纹理\n        this.resources.highlightTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0,\n          row\n        );\n      }\n      \n      console.log(`多属性交集高亮纹理更新完成，高亮点数: ${highlightedPointsCount}`);\n      \n      // 打印详细的交集信息\n      for (const [attributeName, valueIndices] of attributeMap) {\n        console.log(`属性 ${attributeName}: 勾选值索引 [${valueIndices.join(', ')}]`);\n      }\n      \n      // 请求重新渲染\n      this.state.isDirty = true;\n      \n      console.log(`=== 多属性交集高亮计算完成 ===`);\n      return true;\n    } catch (error) {\n      console.error(`计算多属性交集高亮时出错:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * 清除多属性交集高亮\n   */\n  clearMultiAttributeHighlight() {\n    console.log('清除多属性交集高亮状态');\n    \n    // 清除多属性交集高亮状态\n    this.state.multiAttributeHighlight.enabled = false;\n    this.state.multiAttributeHighlight.attributes.clear();\n    this.state.multiAttributeHighlight.isCheckHighlight = false;\n    \n    // 清除单属性高亮状态\n    this.state.highlightAttributeName = null;\n    this.state.highlightAttributeValues = [];\n    this.state.highlightByAttribute = false;\n    this.state.isCheckHighlight = false;\n    \n    // 清除高亮纹理\n    if (this.resources.highlightTexture) {\n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      try {\n        // 创建全零的数据数组（清除所有高亮标记）\n        const emptyData = new Float32Array(texWidth * texHeight * 4).fill(0);\n        \n        // 更新纹理 - 确保使用完整的纹理尺寸\n        this.resources.highlightTexture.subimage({\n          data: emptyData,\n          width: texWidth,\n          height: texHeight\n        });\n        \n        console.log('多属性交集高亮纹理已清除');\n      } catch (error) {\n        console.error('清除多属性交集高亮纹理时出错:', error);\n      }\n    }\n    \n    // 强制设置为脏标记，确保重新渲染\n    this.state.isDirty = true;\n    \n    // 立即请求重新渲染，确保显示更新\n    if (!this.state.animationFrameId) {\n      this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n    }\n  }\n\n  /**\n   * 更新基因数据\n   * @param {Array} geneData - 基因表达数据数组\n   * @param {Object} expressionRange - 表达范围过滤器 {gene: string, range: {start: number, end: number}}\n   */\n  async updateGeneData(geneData, expressionRange = null) {\n    try {\n      console.log('更新基因数据:', geneData);\n      if (expressionRange) {\n        console.log('应用表达范围过滤:', expressionRange);\n      }\n      \n      if (!geneData || !Array.isArray(geneData) || geneData.length === 0) {\n        console.log('基因数据为空，清除基因颜色映射');\n        this.data.geneData = null;\n        this.state.isDirty = true;\n        return;\n      }\n      \n      // 检查基因数据长度是否与细胞总数匹配\n      if (geneData.length !== this.data.total) {\n        console.warn(`基因数据长度 ${geneData.length} 与细胞总数 ${this.data.total} 不匹配`);\n      }\n      \n      // 存储基因数据和表达范围\n      this.data.geneData = geneData;\n      this.data.geneExpressionRange = expressionRange;\n      \n      // 创建或更新基因颜色纹理，传入表达范围过滤器\n      await this.updateGeneColorTexture(geneData, expressionRange);\n      \n      // 标记需要重新渲染\n      this.state.isDirty = true;\n      \n      console.log('基因数据更新完成');\n    } catch (error) {\n      console.error('更新基因数据时出错:', error);\n    }\n  }\n\n  /**\n   * 更新基因颜色纹理\n   * @param {Array} geneData - 基因表达数据\n   * @param {Object} expressionRange - 表达范围过滤器 {gene: string, range: {start: number, end: number}}\n   */\n  async updateGeneColorTexture(geneData, expressionRange = null) {\n    try {\n      if (!this.resources.textureSize || !Array.isArray(this.resources.textureSize)) {\n        console.error('纹理尺寸未初始化');\n        return;\n      }\n      \n      const texWidth = this.resources.textureSize[0];\n      const texHeight = this.resources.textureSize[1];\n      \n      // 创建基因颜色纹理（如果不存在）\n      if (!this.resources.geneColorTexture) {\n        console.log('创建基因颜色纹理');\n        this.resources.geneColorTexture = this.resources.regl.texture({\n          shape: this.resources.textureSize,\n          format: \"rgba\",\n          type: \"float32\",\n          min: \"nearest\",\n          mag: \"nearest\",\n          wrap: \"clamp\",\n        });\n      }\n      \n      // 计算基因表达值的范围\n      const validValues = geneData.filter(val => val > 0 && !isNaN(val));\n      if (validValues.length === 0) {\n        console.log('没有有效的基因表达值');\n        return;\n      }\n      \n      const minValue = Math.min(...validValues);\n      const maxValue = Math.max(...validValues);\n      const range = maxValue - minValue;\n      \n      console.log(`基因表达范围: ${minValue.toFixed(4)} - ${maxValue.toFixed(4)}`);\n      \n      // 检查是否有表达范围过滤器\n      let filterRange = null;\n      if (expressionRange && expressionRange.range) {\n        filterRange = expressionRange.range;\n        console.log(`应用表达范围过滤: ${filterRange.start.toFixed(4)} - ${filterRange.end.toFixed(4)}`);\n      }\n      \n      // 批量更新纹理数据\n      for (let row = 0; row < texHeight; row++) {\n        const startPointIndex = row * texWidth;\n        const pointsInRow = Math.min(texWidth, Math.max(0, this.data.total - startPointIndex));\n        \n        if (pointsInRow <= 0) break;\n        \n        const rowData = new Float32Array(pointsInRow * 4);\n        \n        for (let i = 0; i < pointsInRow; i++) {\n          const globalPointIndex = startPointIndex + i;\n          \n          if (globalPointIndex < geneData.length) {\n            const expressionValue = geneData[globalPointIndex];\n            \n            // 检查是否在过滤范围内\n            let inFilterRange = true;\n            if (filterRange) {\n              inFilterRange = expressionValue >= filterRange.start && expressionValue <= filterRange.end;\n            }\n            \n            if (inFilterRange && expressionValue > 0) {\n              // 在过滤范围内且有表达的点，显示颜色\n            // 将表达值归一化到[0,1]范围\n            let normalizedValue = 0;\n              if (range > 0) {\n              normalizedValue = (expressionValue - minValue) / range;\n            }\n            \n            // 使用简单的蓝-红渐变色映射\n            // 低表达：蓝色 (0, 0, 1)\n            // 高表达：红色 (1, 0, 0)\n            const red = normalizedValue;\n            const blue = 1 - normalizedValue;\n            const green = 0;\n              const alpha = 1.0;\n            \n            rowData[i * 4] = red;\n            rowData[i * 4 + 1] = green;\n            rowData[i * 4 + 2] = blue;\n            rowData[i * 4 + 3] = alpha;\n            } else {\n              // 不在过滤范围内或无表达的点，显示为灰色\n              rowData[i * 4] = 0.4;     // 更深的灰色 R\n              rowData[i * 4 + 1] = 0.4; // 更深的灰色 G\n              rowData[i * 4 + 2] = 0.4; // 更深的灰色 B\n              rowData[i * 4 + 3] = 0.6; // 稍微透明\n            }\n          } else {\n            // 超出数据范围的点设为灰色\n            rowData[i * 4] = 0.4;\n            rowData[i * 4 + 1] = 0.4;\n            rowData[i * 4 + 2] = 0.4;\n            rowData[i * 4 + 3] = 0.5;\n          }\n        }\n        \n        // 更新纹理行\n        this.resources.geneColorTexture.subimage(\n          {\n            data: rowData,\n            width: pointsInRow,\n            height: 1,\n          },\n          0,\n          row\n        );\n      }\n      \n      console.log('基因颜色纹理更新完成');\n    } catch (error) {\n      console.error('更新基因颜色纹理时出错:', error);\n    }\n  }\n\n  /**\n   * 清除基因数据\n   */\n  clearGeneData() {\n    this.data.geneData = null;\n    \n    // 清除基因颜色纹理\n    if (this.resources.geneColorTexture) {\n      this.resources.geneColorTexture.destroy();\n      this.resources.geneColorTexture = null;\n    }\n    \n    this.state.isDirty = true;\n    console.log('基因数据已清除');\n  }\n\n  /**\n   * 更新筛选条件\n   * @param {Object} filterData - 筛选数据\n   * @param {Array} filterData.typeClass - 类型类别数组\n   * @param {Array} filterData.typeItem - 类型项目数组\n   * @param {Array} filterData.typeValue - 类型值数组\n   * @param {Array} filterData.operatorType - 操作符类型数组\n   * @param {number} filterData.filterNum - 筛选条件数量\n   */\n  updateFilter(filterData) {\n    try {\n      console.log('🔍 ScatterRenderer.updateFilter 被调用:', filterData);\n      \n      if (!this.resources.regl) {\n        console.warn('REGL未初始化，无法更新筛选');\n        return;\n      }\n      \n      const { typeClass, typeItem, typeValue, operatorType, filterNum } = filterData;\n      \n      // 如果没有筛选条件，清除筛选纹理\n      if (!filterNum || filterNum === 0) {\n        console.log('清除筛选条件');\n        if (this.resources.filterTexture) {\n          this.resources.filterTexture.destroy();\n          this.resources.filterTexture = null;\n        }\n        this.data.filterNum = 0;\n        this.state.isDirty = true;\n        return;\n      }\n      \n      // 创建筛选纹理数据\n      const filterTextureData = new Float32Array(filterNum * 4);\n      \n      for (let i = 0; i < filterNum; i++) {\n        filterTextureData[i * 4] = typeClass[i] || 0;     // R: typeClass\n        filterTextureData[i * 4 + 1] = typeItem[i] || 0; // G: typeItem\n        filterTextureData[i * 4 + 2] = typeValue[i] || 0; // B: typeValue\n        filterTextureData[i * 4 + 3] = operatorType[i] || 0; // A: operatorType\n        \n        console.log(`筛选条件 ${i}: class=${typeClass[i]}, item=${typeItem[i]}, value=${typeValue[i]}, op=${operatorType[i]}`);\n      }\n      \n      // 创建或更新筛选纹理\n      if (this.resources.filterTexture) {\n        this.resources.filterTexture.destroy();\n      }\n      \n      this.resources.filterTexture = this.resources.regl.texture({\n        shape: [filterNum, 1],\n        format: \"rgba\",\n        type: \"float32\",\n        data: filterTextureData,\n        min: \"nearest\",\n        mag: \"nearest\",\n        wrap: \"clamp\",\n      });\n      \n      // 更新筛选状态\n      this.data.filterNum = filterNum;\n      this.state.isDirty = true;\n      \n      console.log(`✅ 筛选纹理已更新，包含 ${filterNum} 个筛选条件`);\n      \n      // 立即请求重新渲染\n      if (!this.state.animationFrameId) {\n        this.state.animationFrameId = requestAnimationFrame(this.renderFrame);\n      }\n      \n    } catch (error) {\n      console.error('更新筛选时出错:', error);\n    }\n  }\n}\n\n// 导出单例实例，方便直接使用\nexport default ScatterRenderer; \n","<template>\n  <div style=\"height: 100%\">\n    <div id=\"canvasContainer\" style=\"height: 100%\" ref=\"scatterBrain\"></div>\n    <!-- 确保tooltip元素直接在body下，而不是在容器内 -->\n  </div>\n</template>\n\n<script>\nimport ScatterRenderer from \"@/render/ScatterRenderer\";\nimport { perfTracker } from \"@/render/performance\";\nimport { mapState } from 'vuex';\nimport { buildDatasetPath, getDataset } from '@/api/config';\n\nexport default {\n  props: {\n    // 基因数据\n    geneData: {\n      type: Array,\n      default: () => []\n    },\n    // 基因表达范围\n    geneExpRange: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      renderer: null,\n      selectedIndices: [],\n      isInitialized: false,\n      highlightListener: null,\n      multipleHighlightListener: null,\n      multiAttributeIntersectionListener: null,\n      clearHighlightListener: null,\n      hoverListener: null,\n      clearHoverListener: null,\n      mouseEnterListAreaListener: null,\n      mouseLeaveListAreaListener: null,\n      currentHighlight: null,\n      currentCheckedHighlight: null\n    };\n  },\n\n  computed: {\n    ...mapState({\n      operate: state => state.uiState.operateActive || 1,\n      colorData: state => state.cellData.colorData || [],\n      total: state => state.cellData.total || -1,\n      colorBy: state => state.cellData.colorField || \"\",\n      typeClass: state => state.uiState.typeClass || [],\n      typeItem: state => state.uiState.typeItem || [],\n      typeValue: state => state.uiState.typeValue || [],\n      operatorType: state => state.uiState.operatorType || [],\n      filterNum: state => state.uiState.filterNum || 0,\n      field: state => state.cellData.field || [],\n      fieldValue: state => state.cellData.fieldValue || {},\n      hoverVal: state => state.cellData.hoverVal || -1\n    })\n  },\n\n  watch: {\n    operate: {\n      handler(newMode) {\n        this.switchMode(newMode);\n      }\n    },\n    colorBy: {\n      async handler(newColorBy) {\n        if (!this.renderer || !this.isInitialized) return;\n        \n        // 更新渲染器的颜色属性\n        const colorIndex = this.field.indexOf(newColorBy);\n        if (colorIndex >= 0) {\n          await this.renderer.setColorAttribute(colorIndex);\n        }\n      }\n    },\n    geneExpRange: {\n      handler(newRange) {\n        if (!this.renderer) return;\n        \n        console.log('基因表达范围更新:', newRange);\n        \n        // 如果有基因数据和表达范围，更新渲染器\n        if (this.geneData && this.geneData.length > 0 && newRange && newRange.range) {\n          console.log('应用基因表达范围过滤');\n          this.renderer.updateGeneData(this.geneData, newRange);\n        } else if (this.geneData && this.geneData.length > 0) {\n          // 如果没有范围过滤，正常更新基因数据\n          this.renderer.updateGeneData(this.geneData);\n        }\n        \n        this.renderer.options.geneExpRange = newRange;\n        this.renderer.state.isDirty = true; // 请求重新渲染\n      },\n      deep: true\n    },\n    geneData: {\n      handler(newGeneData) {\n        if (!this.renderer || !this.isInitialized) return;\n        \n        console.log('基因数据更新:', newGeneData);\n        \n        // 当基因数据更新时，检查是否有表达范围过滤\n        if (this.renderer.updateGeneData) {\n          const expressionRange = this.geneExpRange;\n          if (expressionRange && expressionRange.range) {\n            console.log('应用基因表达范围过滤:', expressionRange);\n            this.renderer.updateGeneData(newGeneData, expressionRange);\n          } else {\n          this.renderer.updateGeneData(newGeneData);\n          }\n        }\n      },\n      deep: true\n    },\n    // 监听total和field的变化，在数据就绪时初始化渲染器\n    total: {\n      handler(newTotal) {\n        if (newTotal > 0 && !this.renderer && this.field && this.field.length > 0) {\n          console.log(`数据已就绪，total: ${newTotal}，开始初始化渲染器`);\n          this.initRenderer();\n        }\n      },\n      immediate: true\n    },\n    field: {\n      handler(newField) {\n        if (newField && newField.length > 0 && !this.renderer && this.total > 0) {\n          console.log(`字段列表已就绪，长度: ${newField.length}，开始初始化渲染器`);\n          this.initRenderer();\n        }\n      },\n      immediate: true\n    },\n    // 监听筛选条件的变化\n    typeClass: {\n      handler() {\n        this.updateFilter();\n      },\n      deep: true\n    },\n    typeItem: {\n      handler() {\n        this.updateFilter();\n      },\n      deep: true\n    },\n    typeValue: {\n      handler() {\n        this.updateFilter();\n      },\n      deep: true\n    },\n    operatorType: {\n      handler() {\n        this.updateFilter();\n      },\n      deep: true\n    },\n    filterNum: {\n      handler() {\n        this.updateFilter();\n      }\n    }\n  },\n\n  mounted() {\n    console.log('ScatterBrainSingle mounted - 开始诊断');\n    console.log('初始数据状态:', {\n      total: this.total,\n      fieldLength: this.field ? this.field.length : 0,\n      colorBy: this.colorBy,\n      geneDataLength: this.geneData ? this.geneData.length : 0\n    });\n    \n    // 监听数据集切换事件\n    if (typeof window !== 'undefined') {\n      window.addEventListener('datasetChanged', this.handleDatasetChange);\n    }\n    \n    // 检查数据是否已就绪\n    if (this.total > 0 && this.field && this.field.length > 0) {\n      console.log(`初始数据已就绪，开始初始化渲染器`);\n      this.initRenderer();\n    } else {\n      console.log(`等待数据加载完成，total: ${this.total}, 字段数: ${this.field ? this.field.length : 0}`);\n      // 数据加载未完成，依靠watch监听器在数据就绪时初始化\n    }\n    \n    this.setupHighlightListeners();\n  },\n\n  beforeDestroy() {\n    console.log('ScatterBrainSingle: 组件即将销毁，开始清理资源');\n    \n    // 移除数据集切换事件监听\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('datasetChanged', this.handleDatasetChange);\n    }\n    \n    // 立即移除事件监听器\n    this.removeHighlightListeners();\n    \n    // 立即清理渲染器资源\n    if (this.renderer) {\n      try {\n        // 清除所有高亮状态\n        if (typeof this.renderer.clearHoverCategory === 'function') {\n          this.renderer.clearHoverCategory();\n        }\n        if (this.renderer.clearAttributeHighlight && typeof this.renderer.clearAttributeHighlight === 'function') {\n          this.renderer.clearAttributeHighlight();\n        }\n        \n        // 立即销毁渲染器，这会清理ResizeObserver\n        if (typeof this.renderer.dispose === 'function') {\n          this.renderer.dispose();\n        }\n        \n        console.log('ScatterBrainSingle: 渲染器已清理');\n      } catch (error) {\n        console.error('ScatterBrainSingle: 清理渲染器时出错:', error);\n      } finally {\n        // 确保渲染器引用被清空\n        this.renderer = null;\n      }\n    }\n    \n    // 清理组件状态\n    this.isInitialized = false;\n    this.selectedIndices = [];\n    this.currentHighlight = null;\n    this.currentCheckedHighlight = null;\n    \n    console.log('ScatterBrainSingle: 组件资源清理完成');\n  },\n\n  methods: {\n    /**\n     * 处理数据集切换事件\n     */\n    async handleDatasetChange(event) {\n      console.log('ScatterBrainSingle: 数据集切换到', event.detail.dataset);\n      \n      // 🔥 使用新的资源重置方法，确保buffer正确重新分配和缓存清理\n      if (this.renderer) {\n        try {\n          // 获取旧数据集信息用于清理缓存\n          const oldDataset = event.detail.oldDataset || this.datasetName;\n          console.log(`数据集切换: ${oldDataset} -> ${event.detail.dataset}`);\n          \n          await this.renderer.resetForNewDataset(oldDataset);\n          \n          // 安全地调用dispose方法\n          if (this.renderer && typeof this.renderer.dispose === 'function') {\n            this.renderer.dispose();\n          }\n        } catch (error) {\n          console.error('重置渲染器资源时出错:', error);\n          // 即使出错也要尝试清理渲染器\n          if (this.renderer && typeof this.renderer.dispose === 'function') {\n            try {\n              this.renderer.dispose();\n            } catch (disposeError) {\n              console.error('清理渲染器时出错:', disposeError);\n            }\n          }\n        } finally {\n          // 确保渲染器引用被清空\n          this.renderer = null;\n        }\n      }\n      \n      // 重置组件状态\n      this.isInitialized = false;\n      this.selectedIndices = [];\n      this.currentHighlight = null;\n      this.currentCheckedHighlight = null;\n      \n      // 等待数据加载完成后重新初始化渲染器\n      setTimeout(() => {\n        if (this.total > 0 && this.field && this.field.length > 0) {\n          console.log('数据集切换后重新初始化渲染器');\n          this.initRenderer();\n        }\n      }, 500); // 给数据加载一些时间\n    },\n    \n    /**\n     * 更新筛选条件\n     * 将筛选数据传递给渲染器进行筛选\n     */\n    updateFilter() {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      console.log('🔍 ScatterBrainSingle.updateFilter 被调用');\n      console.log('筛选数据:', {\n        typeClass: this.typeClass,\n        typeItem: this.typeItem,\n        typeValue: this.typeValue,\n        operatorType: this.operatorType,\n        filterNum: this.filterNum\n      });\n      \n      // 调用渲染器的updateFilter方法\n      this.renderer.updateFilter({\n        typeClass: this.typeClass,\n        typeItem: this.typeItem,\n        typeValue: this.typeValue,\n        operatorType: this.operatorType,\n        filterNum: this.filterNum\n      });\n    },\n    \n    /**\n     * 初始化渲染器\n     */\n    async initRenderer() {\n      try {\n        perfTracker.startMark('initializeRenderer');\n        \n        // 检查total和field是否有效\n        if (this.total <= 0) {\n          console.warn(\"total参数无效，等待有效数据后再初始化渲染器...\");\n          // 设置一个定时器，1秒后再次尝试初始化\n          setTimeout(() => {\n            if (this.total > 0) {\n              this.initRenderer();\n            } else {\n              console.warn(\"total参数仍然无效，请检查数据加载\");\n            }\n          }, 1000);\n          return;\n        }\n        \n        // 检查字段列表是否为空\n        if (!this.field || !Array.isArray(this.field) || this.field.length === 0) {\n          console.warn(\"字段列表为空，等待字段数据加载后再初始化渲染器...\");\n          // 设置一个定时器，1秒后再次尝试初始化\n          setTimeout(() => {\n            if (this.field && this.field.length > 0) {\n              this.initRenderer();\n            } else {\n              console.warn(\"字段列表仍然为空，请检查数据加载\");\n            }\n          }, 1000);\n          return;\n        }\n        \n        // 获取容器元素\n        const container = this.$refs.scatterBrain;\n        \n        // 创建渲染器实例\n        this.renderer = new ScatterRenderer(container, {\n          pointSize: 3.0,\n          defaultZoom: 1,\n          defaultOffset: [0, 0],\n          antialiasing: true,\n          highlightSize: 1.5 // 高亮点的大小倍数（减小变大效果）\n        });\n        \n        // 初始化渲染器\n        await this.renderer.initialize();\n        \n        // 设置回调函数\n        this.renderer.callbacks.onPointSelected = this.handlePointSelected;\n        \n        // 确定正确的colorIndex\n        const colorIndex = this.field.indexOf(this.colorBy);\n        const validColorIndex = colorIndex >= 0 ? colorIndex : 0;\n        \n        console.log(`开始加载数据，total: ${this.total}, 字段数: ${this.field.length}, colorBy: ${this.colorBy}`);\n        \n        // 加载数据\n        await this.renderer.loadData({\n          quadTreePath: buildDatasetPath('quad_tree.json'),\n          total: this.total,\n          field: this.field,\n          colorBy: this.colorBy,\n          colorIndex: validColorIndex\n        });\n        \n        // 设置操作模式\n        this.renderer.setMode(this.operate === 1 ? \"pan\" : \"select\");\n        \n        // 监听键盘事件 - 按Escape键切换回平移模式\n        document.addEventListener('keydown', this.handleKeyDown);\n        \n        // 设置颜色属性\n        await this.renderer.setColorAttribute(validColorIndex);\n        \n        const duration = perfTracker.endMark('initializeRenderer');\n        console.log(`渲染器初始化完成，耗时: ${duration.toFixed(2)}ms`);\n        \n        this.isInitialized = true;\n      } catch (error) {\n        console.error(\"初始化ScatterBrainSingle渲染器失败:\", error);\n      }\n    },\n    \n    /**\n     * 设置高亮事件监听器\n     */\n    setupHighlightListeners() {\n      if (this.highlightListener) return;\n      \n      // 创建事件监听函数\n      this.highlightListener = this.handleHighlightEvent.bind(this);\n      this.multipleHighlightListener = this.handleMultipleHighlightEvent.bind(this);\n      this.multiAttributeIntersectionListener = this.handleMultiAttributeIntersectionEvent.bind(this);\n      this.clearHighlightListener = this.handleClearHighlightEvent.bind(this);\n      this.hoverListener = this.handleHoverEvent.bind(this);\n      this.clearHoverListener = this.handleClearHoverEvent.bind(this);\n      this.mouseEnterListAreaListener = this.handleMouseEnterListArea.bind(this);\n      this.mouseLeaveListAreaListener = this.handleMouseLeaveListArea.bind(this);\n      \n      // 监听高亮和清除高亮事件\n      document.addEventListener('highlight-attribute', this.highlightListener);\n      document.addEventListener('highlight-multiple-attributes', this.multipleHighlightListener);\n      document.addEventListener('highlight-multi-attribute-intersection', this.multiAttributeIntersectionListener);\n      document.addEventListener('clear-highlight', this.clearHighlightListener);\n      \n      // 监听悬停事件\n      document.addEventListener('cell-property-item-mouseenter', this.hoverListener);\n      document.addEventListener('cell-property-item-mouseleave', this.clearHoverListener);\n      \n      // 监听鼠标进入和离开列表区域事件\n      document.addEventListener('mouse-enter-list-area', this.mouseEnterListAreaListener);\n      document.addEventListener('mouse-leave-list-area', this.mouseLeaveListAreaListener);\n    },\n    \n    /**\n     * 移除高亮事件监听器\n     */\n    removeHighlightListeners() {\n      if (this.highlightListener) {\n        document.removeEventListener('highlight-attribute', this.highlightListener);\n        this.highlightListener = null;\n      }\n      \n      if (this.multipleHighlightListener) {\n        document.removeEventListener('highlight-multiple-attributes', this.multipleHighlightListener);\n        this.multipleHighlightListener = null;\n      }\n      \n      if (this.multiAttributeIntersectionListener) {\n        document.removeEventListener('highlight-multi-attribute-intersection', this.multiAttributeIntersectionListener);\n        this.multiAttributeIntersectionListener = null;\n      }\n      \n      if (this.clearHighlightListener) {\n        document.removeEventListener('clear-highlight', this.clearHighlightListener);\n        this.clearHighlightListener = null;\n      }\n      \n      if (this.hoverListener) {\n        document.removeEventListener('cell-property-item-mouseenter', this.hoverListener);\n        this.hoverListener = null;\n      }\n      \n      if (this.clearHoverListener) {\n        document.removeEventListener('cell-property-item-mouseleave', this.clearHoverListener);\n        this.clearHoverListener = null;\n      }\n      \n      if (this.mouseEnterListAreaListener) {\n        document.removeEventListener('mouse-enter-list-area', this.mouseEnterListAreaListener);\n        this.mouseEnterListAreaListener = null;\n      }\n      \n      if (this.mouseLeaveListAreaListener) {\n        document.removeEventListener('mouse-leave-list-area', this.mouseLeaveListAreaListener);\n        this.mouseLeaveListAreaListener = null;\n      }\n    },\n    \n    /**\n     * 处理高亮事件\n     * @param {CustomEvent} event - 高亮事件\n     */\n    async handleHighlightEvent(event) {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      const { attributeName, attributeValue, isCheckHighlight } = event.detail;\n      \n      if (!attributeName || attributeValue === undefined) {\n        console.warn('高亮事件缺少必要参数');\n        return;\n      }\n      \n      console.log(`接收到高亮事件: 属性=${attributeName}, 值=${attributeValue}, 勾选高亮=${isCheckHighlight}`);\n      \n      try {\n        if (isCheckHighlight) {\n          // 当是勾选高亮时，使用专门的方法处理\n          await this.renderer.loadAttributeAndHighlight(attributeName, attributeValue, true);\n          \n          // 保存当前勾选高亮状态，以便在悬停结束后恢复\n          this.currentCheckedHighlight = {\n            attributeName,\n            attributeValue, // 单值高亮保存attributeValue字段\n            isCheckHighlight: true\n          };\n          \n          console.log(`已保存单值勾选高亮状态:`, this.currentCheckedHighlight);\n        } else {\n          // 默认使用普通高亮方法\n          await this.renderer.setHighlightAttribute(attributeName, attributeValue);\n        }\n      } catch (error) {\n        console.error('设置高亮时出错:', error);\n      }\n    },\n    \n    /**\n     * 处理多值高亮事件\n     * @param {CustomEvent} event - 多值高亮事件\n     */\n    async handleMultipleHighlightEvent(event) {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      const { attributeName, attributeValueIndices, isCheckHighlight } = event.detail;\n      \n      if (!attributeName || !Array.isArray(attributeValueIndices) || attributeValueIndices.length === 0) {\n        console.warn('多值高亮事件缺少必要参数');\n        return;\n      }\n      \n      console.log(`接收到多值高亮事件: 属性=${attributeName}, 值索引=[${attributeValueIndices.join(', ')}], 勾选高亮=${isCheckHighlight}`);\n      \n      try {\n        // 使用新的多值高亮方法\n        await this.renderer.setMultipleAttributeHighlight(attributeName, attributeValueIndices, isCheckHighlight);\n        \n        // 保存当前勾选高亮状态，以便在悬停结束后恢复\n        this.currentCheckedHighlight = {\n          attributeName,\n          attributeValueIndices: [...attributeValueIndices], // 复制数组\n          isCheckHighlight: true\n        };\n        \n        console.log(`已保存多值勾选高亮状态:`, this.currentCheckedHighlight);\n      } catch (error) {\n        console.error('设置多值高亮时出错:', error);\n      }\n    },\n    \n    /**\n     * 处理多属性交集高亮事件\n     * @param {CustomEvent} event - 多属性交集高亮事件\n     */\n    async handleMultiAttributeIntersectionEvent(event) {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      const { attributeName, attributeValueIndices } = event.detail;\n      \n      if (!attributeName || !Array.isArray(attributeValueIndices)) {\n        console.warn('多属性交集高亮事件缺少必要参数');\n        return;\n      }\n      \n      console.log(`接收到多属性交集高亮事件: 属性=${attributeName}, 值索引=[${attributeValueIndices.join(', ')}]`);\n      \n      try {\n        // 检查是否是清除该属性的勾选（空数组）\n        if (attributeValueIndices.length === 0) {\n          console.log(`清除属性 ${attributeName} 的勾选高亮`);\n          \n          // 调用多属性交集高亮方法来移除该属性\n          await this.renderer.setMultiAttributeIntersectionHighlight(attributeName, [], true);\n          \n          // 检查是否还有其他属性被勾选\n          if (this.renderer.state.multiAttributeHighlight.attributes.size === 0) {\n            console.log('没有任何属性被勾选，清除勾选高亮状态');\n            this.currentCheckedHighlight = null;\n          }\n        } else {\n          // 有勾选项，设置多属性交集高亮\n          await this.renderer.setMultiAttributeIntersectionHighlight(attributeName, attributeValueIndices, true);\n          \n          // 更新当前勾选高亮状态为多属性交集模式\n          this.currentCheckedHighlight = {\n            mode: 'multi-attribute-intersection',\n            isCheckHighlight: true\n          };\n          \n          console.log(`已设置多属性交集高亮状态`);\n        }\n      } catch (error) {\n        console.error('设置多属性交集高亮时出错:', error);\n      }\n    },\n    \n    /**\n     * 处理清除高亮事件\n     */\n    handleClearHighlightEvent(event) {\n      if (!this.renderer || !this.isInitialized) {\n        return;\n      }\n      \n      console.log('接收到清除高亮事件', event.detail);\n      \n      try {\n        // 检查事件详情，看是否指定了特定属性\n        const eventDetail = event.detail || {};\n        const targetAttributeName = eventDetail.attributeName;\n        const checkForCheckedItems = eventDetail.checkForCheckedItems;\n        const force = eventDetail.force;\n        const reason = eventDetail.reason;\n        \n        console.log(`清除高亮事件详情: 属性=${targetAttributeName}, 检查勾选=${checkForCheckedItems}, 强制=${force}, 原因=${reason}`);\n        \n        // 如果是强制清除，直接执行\n        if (force) {\n          console.log('强制清除所有高亮状态');\n          this.renderer.clearAttributeHighlight();\n          this.currentHighlight = null;\n          this.currentCheckedHighlight = null;\n          return;\n        }\n        \n        // 如果需要检查勾选项，且有勾选高亮状态，则不清除\n        if (checkForCheckedItems && this.currentCheckedHighlight) {\n          console.log('需要检查勾选项，且有勾选高亮状态，忽略清除请求');\n          return;\n        }\n        \n        // 如果有保存的勾选高亮状态，检查是否与目标属性匹配\n        if (this.currentCheckedHighlight) {\n          const checkedAttributeName = this.currentCheckedHighlight.attributeName;\n          \n          // 如果指定了目标属性且与当前勾选高亮的属性不同\n          if (targetAttributeName && targetAttributeName !== checkedAttributeName) {\n            console.log(`清除属性 ${targetAttributeName} 的高亮，保留勾选高亮 ${checkedAttributeName}`);\n            return;\n          } else if (!targetAttributeName) {\n            // 没有指定目标属性，但有勾选高亮，不清除\n            console.log('有勾选高亮状态，忽略清除高亮事件');\n            return;\n          }\n        }\n        \n        // 只有在没有勾选高亮状态时才执行清除操作\n        console.log('没有勾选高亮状态，执行清除操作');\n        \n        // 清除渲染器中的所有高亮状态\n        this.renderer.clearAttributeHighlight();\n        \n        // 清除当前存储的高亮状态\n        this.currentHighlight = null;\n        \n        // 清除保存的勾选高亮状态\n        this.currentCheckedHighlight = null;\n        console.log('已清除所有高亮状态');\n      } catch (error) {\n        console.error('清除高亮时出错:', error);\n      }\n    },\n    \n    /**\n     * 处理点选择事件\n     * @param {Array} selectedPoints - 选中的点\n     */\n    handlePointSelected(selectedPoints) {\n      console.log(`选中了${selectedPoints.length}个点`);\n      this.selectedIndices = selectedPoints;\n      this.$emit('selectArea', selectedPoints);\n    },\n    \n    /**\n     * 处理键盘事件\n     * @param {KeyboardEvent} event - 键盘事件\n     */\n    handleKeyDown(event) {\n      // 如果按下ESC键，切换回平移模式\n      if (event.key === 'Escape' && this.renderer) {\n        this.renderer.setMode('pan');\n      }\n    },\n    \n    /**\n     * 切换操作模式\n     * @param {number} mode - 模式值（1: 平移, 2: 选择）\n     */\n    switchMode(mode) {\n      if (!this.renderer) return;\n      \n      // 切换渲染器模式\n      this.renderer.setMode(mode === 1 ? \"pan\" : \"select\");\n    },\n    \n    /**\n     * 下载当前图像\n     */\n    downloadImage() {\n      if (this.renderer) {\n        this.renderer.downloadCanvasAsPNG(`scatter_${this.colorBy}`);\n      }\n    },\n    \n    /**\n     * 备用下载方法\n     */\n    backupDownload() {\n      try {\n        const container = document.querySelector('#canvasContainer');\n        if (!container) return;\n        \n        const canvas = container.querySelector('canvas');\n        if (!canvas) return;\n        \n        const link = document.createElement('a');\n        link.download = `scatter_plot_${this.colorBy || 'default'}.png`;\n        link.href = canvas.toDataURL('image/png');\n        \n        document.body.appendChild(link);\n        link.click();\n        \n        setTimeout(() => {\n          document.body.removeChild(link);\n          URL.revokeObjectURL(link.href);\n        }, 100);\n      } catch (error) {\n        console.error('下载图像失败:', error);\n      }\n    },\n    \n    /**\n     * 处理悬停事件 - 针对细胞属性项\n     * @param {CustomEvent} event - 悬停事件\n     */\n    async handleHoverEvent(event) {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      try {\n        // 检查事件详情是否存在\n        if (!event.detail) {\n          console.warn('悬停事件缺少详情信息');\n          return;\n        }\n        \n        const { valueIndex, attributeName, attributeValue } = event.detail;\n        \n        // 详细记录当前悬停状态\n        console.log(`悬停事件: 属性=${attributeName}, 值=${attributeValue}, 索引=${valueIndex}`);\n        \n        // 确保valueIndex有效\n        if (valueIndex === undefined || valueIndex < 0) {\n          console.warn(`无效的悬停索引: ${valueIndex}`);\n          return;\n        }\n        \n        // 如果当前颜色属性与悬停属性相同，使用简单的hoverCategory\n        if (attributeName === this.colorBy) {\n          console.log(`使用当前颜色字段悬停方式: ${attributeName}, 值索引: ${valueIndex}`);\n          this.renderer.setHoverCategory(valueIndex);\n        } else {\n          // 不同属性，使用跨属性悬停方法\n          console.log(`使用跨属性悬停方式: ${attributeName}, 值索引: ${valueIndex}`);\n          // 显式指定isCheckHighlight=false，确保悬停不会使非高亮点变灰\n          await this.renderer.loadAttributeAndHighlight(attributeName, valueIndex, false);\n        }\n        \n      } catch (error) {\n        console.error('处理悬停事件出错:', error);\n      }\n    },\n    \n    /**\n     * 处理离开悬停事件\n     */\n    async handleClearHoverEvent() {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      try {\n        console.log('清除悬停高亮，保留勾选高亮');\n        \n        // 检查是否有保存的勾选高亮状态\n        if (this.currentCheckedHighlight) {\n          console.log('检测到勾选高亮状态，直接恢复而不清除...', this.currentCheckedHighlight);\n          \n          // 检查是否是多属性交集模式\n          if (this.currentCheckedHighlight.mode === 'multi-attribute-intersection') {\n            console.log('恢复多属性交集高亮状态');\n            // 多属性交集模式下，重新计算交集高亮\n            await this.renderer.calculateIntersectionHighlight();\n          } else {\n            // 单属性模式的恢复逻辑\n            const { attributeName, attributeValueIndices, isCheckHighlight } = this.currentCheckedHighlight;\n            \n            // 直接恢复勾选高亮，不先清除\n            if (Array.isArray(attributeValueIndices)) {\n              // 多值高亮恢复\n              await this.renderer.setMultipleAttributeHighlight(attributeName, attributeValueIndices, isCheckHighlight);\n            } else {\n              // 兼容旧的单值高亮恢复（attributeValue字段）\n              const attributeValue = this.currentCheckedHighlight.attributeValue;\n              if (attributeValue !== undefined) {\n                await this.renderer.loadAttributeAndHighlight(attributeName, attributeValue, isCheckHighlight);\n              }\n            }\n          }\n          \n          // 只清除悬停状态，不影响高亮纹理\n          this.renderer.clearHoverCategory();\n        } else {\n          // 如果没有勾选高亮状态，才清除悬停\n          this.renderer.clearHoverCategory();\n        }\n      } catch (error) {\n        console.error('清除悬停高亮出错:', error);\n      }\n    },\n    \n    /**\n     * 处理鼠标进入列表区域事件\n     */\n    handleMouseEnterListArea() {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      console.log('ScatterBrainSingle: 鼠标进入列表区域');\n      \n      // 设置鼠标在列表区域标志\n      this.renderer.setMouseInListArea(true);\n    },\n    \n    /**\n     * 处理鼠标离开列表区域事件\n     */\n    handleMouseLeaveListArea() {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      console.log('ScatterBrainSingle: 鼠标离开列表区域');\n      \n      // 清除鼠标在列表区域标志\n      this.renderer.setMouseInListArea(false);\n    },\n    \n    /**\n     * 处理容器尺寸变化\n     * 当Selected Cells抽屉打开或关闭时调用\n     */\n    handleContainerResize() {\n      if (!this.renderer || !this.isInitialized) {\n        console.warn('ScatterBrainSingle: 渲染器未初始化，跳过尺寸变化处理');\n        return;\n      }\n      \n      console.log('ScatterBrainSingle: 处理容器尺寸变化');\n      \n      try {\n        // 获取容器当前尺寸用于调试\n        const container = this.$refs.scatterBrain;\n        if (container) {\n          const { offsetWidth, offsetHeight } = container;\n          console.log(`ScatterBrainSingle: 容器当前尺寸 - 宽度: ${offsetWidth}, 高度: ${offsetHeight}`);\n        }\n        \n        // 使用nextTick确保DOM更新完成\n        this.$nextTick(() => {\n          // 再次延迟确保布局稳定\n          setTimeout(() => {\n            if (this.renderer && typeof this.renderer.handleResize === 'function') {\n              console.log('ScatterBrainSingle: 调用渲染器handleResize方法');\n              this.renderer.handleResize();\n              console.log('ScatterBrainSingle: 渲染器尺寸已更新');\n            } else {\n              console.warn('ScatterBrainSingle: 渲染器handleResize方法不可用');\n            }\n          }, 100); // 增加延迟时间确保布局完成\n        });\n      } catch (error) {\n        console.error('ScatterBrainSingle: 处理容器尺寸变化时出错:', error);\n      }\n    },\n    \n    /**\n     * 清除选区状态\n     */\n    clearSelection() {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      console.log('ScatterBrainSingle: 清除选区状态');\n      \n      try {\n        if (typeof this.renderer.clearSelection === 'function') {\n          this.renderer.clearSelection();\n        }\n      } catch (error) {\n        console.error('ScatterBrainSingle: 清除选区状态时出错:', error);\n      }\n    },\n    \n    /**\n     * 设置操作模式\n     * @param {string} mode - 操作模式 ('pan' 或 'select')\n     */\n    setMode(mode) {\n      if (!this.renderer || !this.isInitialized) return;\n      \n      console.log(`ScatterBrainSingle: 设置操作模式为 ${mode}`);\n      \n      try {\n        if (typeof this.renderer.setMode === 'function') {\n          this.renderer.setMode(mode);\n        }\n      } catch (error) {\n        console.error(`ScatterBrainSingle: 设置操作模式为 ${mode} 时出错:`, error);\n      }\n    }\n  },\n};\n</script>\n\n<style>\ncanvas {\n  width: 100%;\n  height: 100%;\n  display: block; /* 避免inline元素的默认间距 */\n  user-select: none;  /* 禁用文本选择 */\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  /* 确保Canvas能正确适应容器尺寸变化 */\n  box-sizing: border-box;\n  /* 防止图像模糊 */\n  image-rendering: -webkit-optimize-contrast;\n  image-rendering: crisp-edges;\n  image-rendering: pixelated;\n  /* 确保Canvas在容器中正确定位 */\n  position: relative;\n  /* 防止Canvas被拉伸变形 */\n  object-fit: contain;\n}\n\n/* 确保容器能正确处理尺寸变化 */\n#canvasContainer {\n  position: relative;\n  overflow: hidden; /* 防止滚动条出现 */\n  /* 确保容器能正确响应尺寸变化 */\n  resize: both;\n}\n\n/* 确保tooltip样式设置为明显可见的样式 */\n.tooltip-main {\n  position: fixed !important; /* 使用fixed确保相对于视口定位 */\n  background-color: rgba(255, 255, 255, 0.98) !important;\n  color: #333 !important;\n  padding: 12px !important;\n  text-align: left !important;\n  border: 3px solid #ff0000 !important; /* 使用鲜艳的红色边框 */\n  border-radius: 6px !important;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4) !important;\n  z-index: 100000 !important; /* 确保在最上层 */\n  pointer-events: none !important;\n  font-size: 14px !important;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif !important;\n  transition: opacity 0.15s ease-in-out !important;\n  min-width: 150px !important;\n  max-width: 300px !important;\n  word-wrap: break-word !important;\n}\n</style>\n\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ScatterBrainSingle.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ScatterBrainSingle.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ScatterBrainSingle.vue?vue&type=template&id=5a85b488\"\nimport script from \"./ScatterBrainSingle.vue?vue&type=script&lang=js\"\nexport * from \"./ScatterBrainSingle.vue?vue&type=script&lang=js\"\nimport style0 from \"./ScatterBrainSingle.vue?vue&type=style&index=0&id=5a85b488&prod&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('div',{staticClass:\"select-list ml-3 mr-3\"},[_c('div',{staticClass:\"select-item\"},_vm._l((_vm.source.node),function(value,key,index){return _c('p',{key:index,staticClass:\"info-item\"},[(key !== 'x' && key !== 'y')?[_c('span',{staticClass:\"text-hidden\",staticStyle:{\"width\":\"40%\"}},[_vm._v(_vm._s(key))]),_c('span',{staticClass:\"text-hidden\",staticStyle:{\"width\":\"50%\"}},[_vm._v(_vm._s(value))])]:_vm._e()],2)}),0)])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n <div>\r\n     <div\r\n          class=\"select-list ml-3 mr-3\"\r\n        >\r\n          <div class=\"select-item\">\r\n            <p\r\n              class=\"info-item\"\r\n              v-for=\"(value, key, index) in source.node\"\r\n              :key=\"index\"\r\n            >\r\n              <template v-if=\"key !== 'x' && key !== 'y'\">\r\n                <span class=\"text-hidden\" style=\"width: 40%\">{{ key }}</span>\r\n                <span class=\"text-hidden\" style=\"width: 50%\">{{ value }}</span>\r\n              </template>\r\n            </p>\r\n          </div>\r\n    </div>\r\n </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'infoList',\r\n  props: {\r\n    index: {\r\n      type: Number\r\n    },// 每一行的索引\r\n    source: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },// 每一行的内容\r\n    label: {\r\n      type: String\r\n    },// 需要显示的名称\r\n    value: {\r\n      type: String\r\n    },// 绑定的值\r\n  },\r\n  mounted(){\r\n  }\r\n}\r\n</script>\r\n<style scoped lang=\"scss\">\r\n.text-hidden {\r\n  display: inline-block;\r\n  white-space: nowrap;\r\n  /* 2. 溢出的部分隐藏起来 */\r\n  overflow: hidden;\r\n  /* 3. 文字溢出的时候用省略号来显示 */\r\n  text-overflow: ellipsis;\r\n}\r\n.select-list {\r\n  text-align: left;\r\n  border-bottom: 1px solid #eee;\r\n  padding: 10px 0;\r\n}\r\n.info-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n</style>\r\n\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./infoList.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./infoList.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./infoList.vue?vue&type=template&id=07b8a7c6&scoped=true\"\nimport script from \"./infoList.vue?vue&type=script&lang=js\"\nexport * from \"./infoList.vue?vue&type=script&lang=js\"\nimport style0 from \"./infoList.vue?vue&type=style&index=0&id=07b8a7c6&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"07b8a7c6\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"graph-controls\"},[_c('v-row',{staticClass:\"graph-row\",class:{'flex-column': _vm.$vuetify.breakpoint.xs}},[_c('v-col',{staticClass:\"dataset-info\",attrs:{\"cols\":_vm.$vuetify.breakpoint.xs ? 12 : (5 / _vm.graphNum)}},[_c('p',{staticClass:\"mb-2 dataset-name text-truncate\"},[_vm._v(\" \"+_vm._s(_vm.datasetName)+\" \")]),_c('p',{staticClass:\"status-line\"},[_c('svg',{staticClass:\"v-icon__svg mr-1\",attrs:{\"viewBox\":\"0 0 24 24\",\"role\":\"img\",\"aria-hidden\":\"true\"}},[_c('path',{attrs:{\"d\":\"M12,19.58V19.58C10.4,19.58 8.89,18.96 7.76,17.83C6.62,16.69 6,15.19 6,13.58C6,12 6.62,10.47 7.76,9.34L12,5.1M17.66,7.93L12,2.27V2.27L6.34,7.93C3.22,11.05 3.22,16.12 6.34,19.24C7.9,20.8 9.95,21.58 12,21.58C14.05,21.58 16.1,20.8 17.66,19.24C20.78,16.12 20.78,11.05 17.66,7.93Z\"}})]),_c('span',{staticClass:\"mr-2 text-truncate\"},[_vm._v(_vm._s(_vm.colorBy))]),_c('v-icon',{staticClass:\"mr-1\",attrs:{\"small\":\"\"}},[_vm._v(\"mdi-link\")]),(!_vm.filterNum)?_c('span',{staticClass:\"mr-2\"},[_vm._v(\"None\")]):_c('span',{staticClass:\"mr-2\"},[_vm._v(_vm._s(_vm.filterNum)+\" filters\")]),_c('v-icon',{staticClass:\"mr-1\",attrs:{\"small\":\"\"}},[_vm._v(\"mdi-camera-outline\")]),_c('span',[_vm._v(\"Sync Camera\")])],1)]),_c('v-col',{staticClass:\"control-buttons\",attrs:{\"cols\":_vm.$vuetify.breakpoint.xs ? 12 : (7 / _vm.graphNum)}},[_c('div',{staticClass:\"icons-container\"},[_c('v-icon',{staticClass:\"graph-icon\",class:{ opearate_active: _vm.operateActive === 1 },on:{\"click\":function($event){return _vm.changeOperator(1)}}},[_vm._v(\"mdi-arrow-expand-all\")]),_c('v-icon',{staticClass:\"graph-icon\",class:{ opearate_active: _vm.operateActive === 2 },on:{\"click\":_vm.openSelectDrawer}},[_vm._v(\"mdi-select-arrow-up\")]),_c('v-divider',{staticClass:\"mx-2\",staticStyle:{\"height\":\"20px\"},attrs:{\"inset\":\"\",\"vertical\":\"\"}}),_c('v-icon',{staticClass:\"graph-icon\",class:{ opearate_active: _vm.operateActive === 3 },on:{\"click\":_vm.separateGraph}},[_vm._v(\"mdi-plus-circle-multiple-outline\")]),_c('v-icon',{staticClass:\"graph-icon\",class:{ opearate_active: _vm.operateActive === 4 },on:{\"click\":_vm.downloadImage}},[_vm._v(\"mdi-arrow-down\")]),_c('v-icon',{staticClass:\"graph-icon\",class:{ opearate_active: _vm.operateActive === 5 },on:{\"click\":_vm.deleteSeparateGraph}},[_vm._v(\"mdi-delete\")])],1)])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<!--\n * 图表控制组件\n * 从SingleCellGraph.vue中拆分出的控制栏逻辑\n -->\n<template>\n  <div class=\"graph-controls\">\n    <v-row class=\"graph-row\" :class=\"{'flex-column': $vuetify.breakpoint.xs}\">\n      <v-col\n        :cols=\"$vuetify.breakpoint.xs ? 12 : (5 / graphNum)\"\n        class=\"dataset-info\"\n      >\n        <p class=\"mb-2 dataset-name text-truncate\">\n          {{ datasetName }}\n        </p>\n        <p class=\"status-line\">\n          <svg\n            viewBox=\"0 0 24 24\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            class=\"v-icon__svg mr-1\"\n          >\n            <path\n              d=\"M12,19.58V19.58C10.4,19.58 8.89,18.96 7.76,17.83C6.62,16.69 6,15.19 6,13.58C6,12 6.62,10.47 7.76,9.34L12,5.1M17.66,7.93L12,2.27V2.27L6.34,7.93C3.22,11.05 3.22,16.12 6.34,19.24C7.9,20.8 9.95,21.58 12,21.58C14.05,21.58 16.1,20.8 17.66,19.24C20.78,16.12 20.78,11.05 17.66,7.93Z\"\n            ></path>\n          </svg>\n          <span class=\"mr-2 text-truncate\">{{ colorBy }}</span>\n          <v-icon class=\"mr-1\" small>mdi-link</v-icon>\n          <span class=\"mr-2\" v-if=\"!filterNum\">None</span>\n          <span class=\"mr-2\" v-else>{{ filterNum }} filters</span>\n          <v-icon class=\"mr-1\" small>mdi-camera-outline</v-icon>\n          <span>Sync Camera</span>\n        </p>\n      </v-col>\n      <v-col\n        :cols=\"$vuetify.breakpoint.xs ? 12 : (7 / graphNum)\"\n        class=\"control-buttons\"\n      >\n        <div class=\"icons-container\">\n          <v-icon\n            class=\"graph-icon\"\n            :class=\"{ opearate_active: operateActive === 1 }\"\n            @click=\"changeOperator(1)\"\n            >mdi-arrow-expand-all</v-icon\n          >\n          <v-icon\n            class=\"graph-icon\"\n            :class=\"{ opearate_active: operateActive === 2 }\"\n            @click=\"openSelectDrawer\"\n            >mdi-select-arrow-up</v-icon\n          >\n          <v-divider\n            class=\"mx-2\"\n            inset\n            vertical\n            style=\"height: 20px\"\n          ></v-divider>\n          <v-icon\n            class=\"graph-icon\"\n            :class=\"{ opearate_active: operateActive === 3 }\"\n            @click=\"separateGraph\"\n            >mdi-plus-circle-multiple-outline</v-icon\n          >\n          <v-icon\n            class=\"graph-icon\"\n            :class=\"{ opearate_active: operateActive === 4 }\"\n            @click=\"downloadImage\"\n            >mdi-arrow-down</v-icon\n          >\n          <v-icon\n            class=\"graph-icon\"\n            :class=\"{ opearate_active: operateActive === 5 }\"\n            @click=\"deleteSeparateGraph\"\n            >mdi-delete</v-icon\n          >\n        </div>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from 'vuex';\n\nexport default {\n  name: 'GraphControls',\n  props: {\n    // 数据集名称\n    datasetName: {\n      type: String,\n      default: ''\n    },\n    // 颜色字段\n    colorBy: {\n      type: String,\n      default: ''\n    },\n    // 过滤数量\n    filterNum: {\n      type: Number,\n      default: 0\n    },\n    // 操作类型\n    operateActive: {\n      type: Number,\n      default: 1\n    },\n    // 图表数量\n    graphNum: {\n      type: Number,\n      default: 1\n    }\n  },\n  methods: {\n    ...mapActions('uiState', [\n      'setOperateActive',\n      'openDrawer'\n    ]),\n    \n    /**\n     * 改变操作模式\n     * @param {number} type - 操作类型\n     */\n    changeOperator(type) {\n      this.setOperateActive(type);\n      this.$emit('changeOperator', type);\n    },\n    \n    /**\n     * 打开选择抽屉\n     */\n    openSelectDrawer() {\n      this.setOperateActive(2);\n      this.openDrawer();\n      this.$emit('openSelectDrawer');\n    },\n    \n    /**\n     * 分离图表\n     */\n    separateGraph() {\n      this.setOperateActive(3);\n      this.$emit('separateGraph');\n    },\n    \n    /**\n     * 删除分离的图表\n     */\n    deleteSeparateGraph() {\n      this.setOperateActive(5);\n      this.$emit('deleteSeparateGraph');\n    },\n    \n    /**\n     * 下载图表为PNG图像\n     */\n    downloadImage() {\n      this.$emit('downloadImage');\n    }\n  }\n};\n</script>\n\n<style scoped>\n.graph-controls {\n  padding: 8px;\n  border-bottom: 1px solid #eee;\n  width: 100%;\n}\n\n.graph-row {\n  width: 100%;\n}\n\n.dataset-info {\n  text-align: left;\n  font-size: 14px;\n  color: #000;\n  min-width: 0;\n}\n\n.dataset-name {\n  white-space: nowrap;\n  max-width: 100%;\n}\n\n.status-line {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  max-width: 100%;\n}\n\n.control-buttons {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  padding-right: 0;\n}\n\n.icons-container {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  margin-left: auto;\n  flex-wrap: wrap;\n}\n\n@media (max-width: 600px) {\n  .control-buttons {\n    justify-content: center;\n    margin-top: 10px;\n  }\n  \n  .icons-container {\n    margin-left: 0;\n    justify-content: center;\n  }\n  \n  .graph-icon {\n    margin: 4px;\n  }\n  \n  .status-line {\n    justify-content: flex-start;\n  }\n}\n\n.graph-icon {\n  cursor: pointer;\n  color: #777;\n  transition: all 0.3s;\n  margin-right: 8px;\n}\n\n.graph-icon:hover {\n  color: #000;\n}\n\n.opearate_active {\n  color: #1976d2 !important;\n}\n\n.text-truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n</style> ","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GraphControls.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GraphControls.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./GraphControls.vue?vue&type=template&id=30eed7df&scoped=true\"\nimport script from \"./GraphControls.vue?vue&type=script&lang=js\"\nexport * from \"./GraphControls.vue?vue&type=script&lang=js\"\nimport style0 from \"./GraphControls.vue?vue&type=style&index=0&id=30eed7df&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"30eed7df\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n  <v-row style=\"height: 100%\" class=\"single-cell-graph\">\r\n    <v-col\r\n      :cols=\"drawer ? 9 : 12 / graphNum\"\r\n      style=\"height: 100%\"\r\n      v-for=\"i in graphNum\"\r\n      :key=\"i\"\r\n    >\r\n      <v-progress-linear\r\n        v-show=\"loading\"\r\n        indeterminate\r\n        color=\"yellow darken-2\"\r\n      ></v-progress-linear>\r\n      <div class=\"graph-brain\">\r\n        <GraphControls\r\n          :datasetName=\"datasetName\"\r\n          :colorBy=\"colorBy\"\r\n          :filterNum=\"filterNum\"\r\n          :operateActive=\"operateActive\"\r\n          :graphNum=\"graphNum\"\r\n          @changeOperator=\"changeOperator\"\r\n          @openSelectDrawer=\"openSelectDrawer\"\r\n          @separateGraph=\"separateGraph\"\r\n          @deleteSeparateGraph=\"deleteSeparateGraph\" \r\n          @downloadImage=\"downloadImage\"\r\n\r\n        ></GraphControls>\r\n        <v-row style=\"flex-shrink: 0; flex: 1\">\r\n          <v-col cols=\"12\">\r\n            <ScatterBrainSingle\r\n              v-if=\"datasetType==='single'\"\r\n              ref=\"singleChart\"\r\n              :operate=\"operateActive\"\r\n              :typeInfo=\"typeInfo\"\r\n              :colorData=\"colorData\"\r\n              :umapData=\"partialData\"\r\n              :dataRange=\"dataRange\"\r\n              :colorRange=\"colorRange\"\r\n              :total=\"total\"\r\n              :quadTree=\"quadTree\"\r\n              :key=\"refKey\"\r\n              :hoverVal=\"hoverCategory\"\r\n              :nodeMap=\"nodeMap\"\r\n              :sizeData=\"sizeData\"\r\n              :colorBy=\"colorBy\"\r\n              @selectArea=\"selectArea\"\r\n              :selectedTypes=\"selectedTypes\"\r\n              :typeClass=\"typeClass\"\r\n              :typeItem=\"typeItem\"\r\n              :typeValue=\"typeValue\"\r\n              :operatorType=\"operatorType\"\r\n              :filterNum=\"filterNum\"\r\n              :field=\"field\"\r\n              :fieldValue=\"fieldValue\"\r\n              :geneData=\"geneData\"\r\n              :geneExpRange=\"geneExpRange\"\r\n            ></ScatterBrainSingle>\r\n            <ScatterBrainMultiple\r\n              v-else\r\n              ref=\"multipleChart\"\r\n              :operate=\"operateActive\"\r\n              :typeInfo=\"typeInfo\"\r\n              :colorData=\"colorData\"\r\n              :umapData=\"partialData\"\r\n              :dataRange=\"dataRange\"\r\n              :colorRange=\"colorRange\"\r\n              :total=\"total\"\r\n              :quadTree=\"quadTree\"\r\n              :key=\"refKey\"\r\n              :hoverVal=\"hoverCategory\"\r\n              :nodeMap=\"nodeMap\"\r\n              :sizeData=\"sizeData\"\r\n              :colorBy=\"colorBy\"\r\n              @selectArea=\"selectArea\"\r\n              :selectedTypes=\"selectedTypes\"\r\n              :typeClass=\"typeClass\"\r\n              :typeItem=\"typeItem\"\r\n              :typeValue=\"typeValue\"\r\n              :operatorType=\"operatorType\"\r\n              :filterNum=\"filterNum\"\r\n              :field=\"field\"\r\n              :fieldValue=\"fieldValue\"\r\n              :summaryData=\"summaryData\"\r\n            ></ScatterBrainMultiple>\r\n          </v-col>\r\n        </v-row>\r\n      </div>\r\n    </v-col>\r\n    <v-col\r\n      :cols=\"3\"\r\n      style=\"height: 100vh; border-left: 1px solid #eee\"\r\n      v-if=\"drawer\"\r\n    >\r\n      <div class=\"drawer-title\">\r\n        <h3>Selected Cells</h3>\r\n        <v-icon @click=\"handleCloseDrawer\">mdi-close</v-icon>\r\n      </div>\r\n      <v-list style=\"overflow-y: auto\" height=\"30vh\">\r\n        <v-list-item-group v-model=\"selectedItem\" color=\"primary\">\r\n          <v-list-item\r\n            v-for=\"(item, index) in selectNodes\"\r\n            :key=\"index\"\r\n            @click=\"changeCellItem(index)\"\r\n          >\r\n            <v-list-item-avatar>\r\n              <span\r\n                class=\"color-circle\"\r\n                :style=\"{ backgroundColor: _.get(item, 'key', '#fff') }\"\r\n              ></span>\r\n            </v-list-item-avatar>\r\n\r\n            <v-list-item-content>\r\n              <v-list-item-title>\r\n                {{ _.get(item, ['value', 0, 'node', colorBy], '') }}\r\n              </v-list-item-title>\r\n            </v-list-item-content>\r\n\r\n            <v-list-item-action>\r\n              <span>{{ _.get(item, [\"value\", \"length\"], \"\") }}</span>\r\n            </v-list-item-action>\r\n          </v-list-item>\r\n        </v-list-item-group>\r\n      </v-list>\r\n      <div style=\"border-top: 2px solid #eee; height: 60vh; overflow-y: auto\">\r\n        <div class=\"drawer-title ml-2\">\r\n          <div style=\"display: flex; align-items: center; width: 60%\">\r\n            <span\r\n              class=\"color-circle\"\r\n              :style=\"{ backgroundColor: _.get(selectInfo, 'key', '#fff') }\"\r\n            ></span>\r\n            <span class=\"ml-3 text-hidden\" style=\"width: 50%\">{{\r\n              _.get(\r\n                selectInfo,\r\n                [\"value\", 0, \"node\", \"Siletti_modf_SCANVI_L1\"],\r\n                \"\"\r\n              )\r\n            }}</span>\r\n          </div>\r\n          <v-icon style=\"flex: 1\">mdi-download</v-icon>\r\n        </div>\r\n        <virtual-list\r\n          :data-key=\"'id'\"\r\n          :data-sources=\"_.get(selectInfo, 'value', [])\"\r\n          :data-component=\"itemComponent\"\r\n          :keeps=\"_.get(selectInfo, ['value', 'length'], 0)\"\r\n        />\r\n      </div>\r\n    </v-col>\r\n  </v-row>\r\n</template>\r\n\r\n<script>\r\nimport ScatterBrainSingle from \"./ScatterBrainSingle.vue\";\r\n// import ScatterBrainMultiple from \"./ScatterBrainMultiple.vue\";\r\nimport VirtualList from \"vue-virtual-scroll-list\";\r\nimport infoList from \"./components/infoList.vue\";\r\nimport { mapState, mapGetters, mapActions } from 'vuex';\r\nimport { nonReactiveDataMixin } from '@/utils/nonReactiveDataStore';\r\nimport GraphControls from \"../components/visualization/GraphControls.vue\";\r\n\r\nexport default {\r\n  mixins: [nonReactiveDataMixin], // 🔄 添加非响应式数据mixin\r\n  props: {\r\n    // 数据集类型\r\n    datasetType: {\r\n      type: String,\r\n      default: 'single'\r\n    },\r\n    // 可视化类型\r\n    visualizationType: {\r\n      type: String,\r\n      default: 'umap'\r\n    }\r\n  },\r\n  components: {\r\n    VirtualList,\r\n    // ScatterBrainMultiple,\r\n    ScatterBrainSingle,\r\n    GraphControls,\r\n  },\r\n  data() {\r\n    return {\r\n      itemComponent: infoList,\r\n      graphNum: 1,\r\n      selectedItem: 0,\r\n      selectInfo: {},\r\n      colorData: [],\r\n      orginColorData: [],\r\n      refKey: 0,\r\n      umapData: [],\r\n      partialData: [],\r\n      colorRange: {},\r\n      sizeData: [],\r\n      quadTree: null,\r\n      nodeMap: null,\r\n      hoverCategory: -1,\r\n      treeMap: new Map(),\r\n      typeClass: [],\r\n      typeItem: [],\r\n      typeValue: [],\r\n      operatorType: [],\r\n      geneData: [],\r\n      selectedTypes: [] // 添加缺失的 selectedTypes 属性\r\n    };\r\n  },\r\n  computed: {\r\n    // 🔄 修改computed以使用新的getters（从nonReactiveDataStore获取大数据）\r\n    ...mapState('cellData', [\r\n      'typeInfo',\r\n      'classInfo',\r\n      // 'geneExp',      // 已迁移到nonReactiveDataStore\r\n      'hoverInfo',\r\n      'field',\r\n      // 'fieldValue',   // 已迁移到nonReactiveDataStore\r\n      'total',\r\n      'dataRange',\r\n      'summaryData',\r\n      'colorField',\r\n      'geneExpRange'\r\n    ]),\r\n    ...mapGetters('cellData', [\r\n      'getGeneExp',\r\n      'getFieldValue'\r\n    ]),\r\n    ...mapState('uiState', [\r\n      'drawer',\r\n      'operateActive',\r\n      'selectNodes'\r\n    ]),\r\n    ...mapGetters('uiState', [\r\n      'isDrawerOpen'\r\n    ]),\r\n    \r\n    // 使用getters获取大数据（自动从nonReactiveDataStore获取）\r\n    geneExp() {\r\n      return this.getGeneExp;\r\n    },\r\n    fieldValue() {\r\n      return this.getFieldValue;\r\n    },\r\n    \r\n    colorBy() {\r\n      return this.colorField;\r\n    },\r\n    datasetName() {\r\n      return this.$store.state.cellData.datasetName;\r\n    },\r\n    filterNum() {\r\n      return this.typeClass.length;\r\n    },\r\n    ...mapState({\r\n      loading: state => state.loading\r\n    }),\r\n    // 使用props中的datasetType\r\n    // datasetType() {\r\n    //   return this.datasetType;\r\n    // }\r\n  },\r\n  watch: {\r\n    drawer: {\r\n      handler(newDrawerState, oldDrawerState) {\r\n        this.$nextTick(() => {\r\n          setTimeout(() => {\r\n            this.handleDrawerStateChange(newDrawerState);\r\n          }, 100);\r\n        });\r\n      },\r\n      immediate: false\r\n    },\r\n    typeInfo: {\r\n      handler(val) {\r\n        this.filterTypeData(val);\r\n      },\r\n      deep: true\r\n    },\r\n    classInfo: {\r\n      handler(val) {\r\n        this.filterTypeData(this.typeInfo);\r\n      },\r\n      deep: true,\r\n    },\r\n    geneExp: {\r\n      handler(val) {\r\n        if (_.isEmpty(val)) {\r\n          this.geneData = [];\r\n        } else {\r\n          this.filterGeneExp(val);\r\n        }\r\n      },\r\n      deep: true,\r\n    },\r\n    hoverInfo: {\r\n      handler(val) {\r\n        if (!_.isEmpty(val)) {\r\n          this.getHoverFilterData(val);\r\n        } else {\r\n          this.hoverCategory = -1;\r\n          this.filterTypeData(this.typeInfo);\r\n        }\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions('uiState', [\r\n      'setOperateActive',\r\n      'toggleDrawer',\r\n      'closeDrawer',\r\n      'openDrawer',\r\n      'setSelectNodes'\r\n    ]),\r\n    filterTypeData(typeInfo) {\r\n      const typeClass = [];\r\n      const typeItem = [];\r\n      const typeValue = [];\r\n      const operateActive = [];\r\n      let filterNum = 0;\r\n      let flag = false;\r\n      \r\n      for (const key in typeInfo) {\r\n        if (key !== \"Class\") {\r\n          // 处理普通类型\r\n          const types = typeInfo[key];\r\n          const index = _.indexOf(this.field, key);\r\n          \r\n          // 跳过无效索引\r\n          if (index === -1) continue;\r\n          \r\n          const classValue = Math.floor(index / 4);\r\n          const itemValue = index % 4;\r\n          \r\n          for (const type of types) {\r\n            // 检查是否有重复条件\r\n            let exitOther = false;\r\n            for (let i = 0; i < filterNum; i++) {\r\n              if (typeClass[i] === classValue && typeItem[i] === itemValue) {\r\n                if (!flag && operateActive[i] === 0) {\r\n                  flag = true;\r\n                } else {\r\n                  exitOther = true;\r\n                }\r\n              }\r\n            }\r\n            \r\n            typeClass.push(classValue);\r\n            typeItem.push(itemValue);\r\n            \r\n            const valueIndex = _.indexOf(this.fieldValue[key], type);\r\n            typeValue.push(valueIndex);\r\n            \r\n            // 确定操作符类型\r\n            if (flag) {\r\n              operateActive.push(2); // OR\r\n            } else if (exitOther || operateActive.length === 0) {\r\n              operateActive.push(1);\r\n            } else {\r\n              operateActive.push(0); // AND\r\n            }\r\n            \r\n            filterNum++;\r\n          }\r\n        } else {\r\n          // 处理Class类型\r\n          // 现在classData是直接的子节点数组，不再是分组对象\r\n          const classData = typeInfo[key];\r\n          \r\n          // 检查classData是否为数组（新格式）还是对象（旧格式）\r\n          if (Array.isArray(classData)) {\r\n            // 新格式：直接处理子节点数组\r\n            const index = _.indexOf(this.field, \"Siletti_modf_SCANVI_L2\");\r\n            \r\n            // 跳过无效索引\r\n            if (index === -1) continue;\r\n            \r\n            const classPositionValue = Math.floor(index / 4);\r\n            const itemPositionValue = index % 4;\r\n            \r\n            // 直接遍历子节点数组\r\n            for (const childNode of classData) {\r\n              typeClass.push(classPositionValue);\r\n              typeItem.push(itemPositionValue);\r\n              \r\n              const valueIndex = _.indexOf(this.fieldValue[\"Siletti_modf_SCANVI_L2\"], childNode);\r\n              if (valueIndex !== -1) { // 只添加找到索引的项目\r\n                typeValue.push(valueIndex);\r\n                operateActive.push(1); // OR\r\n                filterNum++;\r\n              }\r\n            }\r\n          } else {\r\n            // 兼容旧格式：按分组对象处理（保持向后兼容）\r\n            for (const classKey in classData) {\r\n              const lv2Value = classData[classKey];\r\n              const index = _.indexOf(this.field, \"Siletti_modf_SCANVI_L2\");\r\n              \r\n              // 跳过无效索引\r\n              if (index === -1) continue;\r\n              \r\n              const classPositionValue = Math.floor(index / 4);\r\n              const itemPositionValue = index % 4;\r\n              \r\n              for (const lv2 of lv2Value) {\r\n                typeClass.push(classPositionValue);\r\n                typeItem.push(itemPositionValue);\r\n                \r\n                const valueIndex = _.indexOf(this.fieldValue[\"Siletti_modf_SCANVI_L2\"], lv2);\r\n                typeValue.push(valueIndex);\r\n                \r\n                operateActive.push(1); // OR\r\n                filterNum++;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.typeClass = typeClass;\r\n      this.typeItem = typeItem;\r\n      this.typeValue = typeValue;\r\n      this.operatorType = operateActive;\r\n      \r\n      // 将筛选数据设置到store中，供ScatterBrainSingle组件使用\r\n      this.$store.commit('uiState/SET_FILTER_DATA', {\r\n        typeClass,\r\n        typeItem,\r\n        typeValue,\r\n        operatorType: operateActive,\r\n        filterNum\r\n      });\r\n    },\r\n    filterGeneExp(geneExp) {\r\n      let keys = Object.keys(geneExp);\r\n      let key = keys[0];\r\n      this.geneData = geneExp[key];\r\n    },\r\n    separateGraph() {\r\n      this.setOperateActive(3);\r\n      this.graphNum = 2;\r\n      this.colorData = this.orginColorData;\r\n      this.partialData = this.umapData;\r\n      this.refKey = this.refKey + 1;\r\n    },\r\n    deleteSeparateGraph() {\r\n      if (this.graphNum > 1) {\r\n        this.graphNum = 1;\r\n        this.setOperateActive(1);\r\n      }\r\n    },\r\n    selectArea(selected) {\r\n      if (!selected || !selected.length) return;\r\n      \r\n      const selectNodes = [];\r\n      \r\n      // 处理每个选中项\r\n      for (let i = 0; i < selected.length; i++) {\r\n        const node = {};\r\n        let currentInfo = selected[i].slice(2, selected[i].length-1) || [];\r\n        \r\n        // 处理属性\r\n        currentInfo.forEach((item, index) => {\r\n          if (index < selected[i].length - 1) {\r\n            node[this.field[index]] = this.fieldValue[this.field[index]][item];\r\n          }\r\n        });\r\n        \r\n        // 处理颜色\r\n        const colors = selected[i][selected[i].length - 1] || [];\r\n        let color = colors.map(item => Math.round(item * 255)).join(\",\");\r\n        color = `rgba(${color})`;\r\n        \r\n        selectNodes.push({ node, color, id: i });\r\n      }\r\n      \r\n      // 按颜色分组\r\n      const groupNodes = _.groupBy(selectNodes, \"color\");\r\n      const selectGroupNodes = Object.keys(groupNodes).map(key => ({ \r\n        key, \r\n        value: groupNodes[key] \r\n      }));\r\n      \r\n      this.setSelectNodes(selectGroupNodes);\r\n      this.selectInfo = selectGroupNodes[0] || {};\r\n      this.colorData = this.orginColorData;\r\n      this.partialData = this.umapData;\r\n    },\r\n    changeCellItem(index = 0) {\r\n      this.selectInfo = this.selectNodes[index];\r\n    },\r\n    changeOperator(index) {\r\n      this.setOperateActive(index);\r\n      if (index === 1) {\r\n        // 点击arrow-expand-all图标时，清除选区效果并恢复图形原状\r\n        this.clearSelectionAndRestore();\r\n        \r\n        // 如果抽屉是打开的，关闭它\r\n        if (this.drawer) {\r\n          this.closeDrawer();\r\n        }\r\n      }\r\n    },\r\n    openSelectDrawer() {\r\n      this.openDrawer();\r\n      this.setOperateActive(2);\r\n    },\r\n    getHoverFilterData(hoverInfo) {\r\n      if (!hoverInfo || !hoverInfo.key) return;\r\n      \r\n      const index = _.indexOf(this.field, hoverInfo.key);\r\n      if (index === -1) return;\r\n      \r\n      const classValue = Math.floor(index / 4);\r\n      const itemValue = index % 4;\r\n      const valueIndex = _.indexOf(this.fieldValue[hoverInfo.key], hoverInfo.value);\r\n      \r\n      if (valueIndex === -1) return;\r\n      \r\n      // 检查是否已存在相同的过滤条件\r\n      for (let i = 0; i < this.filterNum; i++) {\r\n        if (this.typeClass[i] === classValue && \r\n            this.typeItem[i] === itemValue && \r\n            this.typeValue[i] === valueIndex) {\r\n          return; // 已存在相同的过滤条件，无需添加\r\n        }\r\n      }\r\n      \r\n      // 添加新的过滤条件\r\n      this.typeClass.push(classValue);\r\n      this.typeItem.push(itemValue);\r\n      this.typeValue.push(valueIndex);\r\n      this.operatorType.push(1); // OR操作\r\n      this.hoverCategory = valueIndex;\r\n    },\r\n    downloadImage() {\r\n      const chartComponent = this.datasetType === 'single' \r\n        ? this.$refs.singleChart \r\n        : this.$refs.multipleChart;\r\n      \r\n      if (!chartComponent) {\r\n        this.directDownload();\r\n        return;\r\n      }\r\n      \r\n      if (typeof chartComponent.downloadImage !== 'function') {\r\n        if (this.datasetType === 'single' && chartComponent.backupDownload) {\r\n          chartComponent.backupDownload();\r\n          return;\r\n        }\r\n        \r\n        this.directDownload();\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        chartComponent.downloadImage();\r\n      } catch (error) {\r\n        this.directDownload();\r\n      }\r\n    },\r\n    \r\n    directDownload() {\r\n      try {\r\n        const container = this.datasetType === 'single' \r\n          ? document.querySelector('#canvasContainer')\r\n          : document.querySelector('.scatter-container');\r\n        \r\n        if (!container) return;\r\n        \r\n        const canvas = container.querySelector('canvas');\r\n        if (!canvas) return;\r\n        \r\n        const link = document.createElement('a');\r\n        const fileName = `scatter_plot_${this.colorBy || 'default'}.png`;\r\n        link.download = fileName;\r\n        link.href = canvas.toDataURL('image/png');\r\n        \r\n        document.body.appendChild(link);\r\n        link.click();\r\n        \r\n        setTimeout(() => {\r\n          document.body.removeChild(link);\r\n          URL.revokeObjectURL(link.href);\r\n        }, 100);\r\n      } catch (error) {\r\n        console.error('直接下载失败:', error);\r\n      }\r\n    },\r\n    handleDrawerStateChange(newDrawerState) {\r\n      console.log(`抽屉状态变化: ${newDrawerState ? '打开' : '关闭'}`);\r\n      \r\n      // 如果抽屉关闭，清除选区效果\r\n      if (!newDrawerState) {\r\n        console.log('抽屉关闭，清除选区效果');\r\n        try {\r\n          // 重置操作模式为平移模式\r\n          this.setOperateActive(1);\r\n          \r\n          // 清除选中的节点数据\r\n          this.setSelectNodes([]);\r\n          this.selectInfo = {};\r\n          \r\n          // 通知图表组件清除选区\r\n          const chartComponent = this.datasetType === 'single' \r\n            ? this.$refs.singleChart \r\n            : this.$refs.multipleChart;\r\n          \r\n          if (chartComponent) {\r\n            // 清除选区状态\r\n            if (typeof chartComponent.clearSelection === 'function') {\r\n              chartComponent.clearSelection();\r\n            }\r\n            \r\n            // 切换回平移模式\r\n            if (typeof chartComponent.setMode === 'function') {\r\n              chartComponent.setMode('pan');\r\n            }\r\n            \r\n            // 如果是ScatterBrainSingle，还需要清除渲染器的选区状态\r\n            if (this.datasetType === 'single' && chartComponent.renderer) {\r\n              if (typeof chartComponent.renderer.clearSelection === 'function') {\r\n                chartComponent.renderer.clearSelection();\r\n              }\r\n              if (typeof chartComponent.renderer.setMode === 'function') {\r\n                chartComponent.renderer.setMode('pan');\r\n              }\r\n            }\r\n          }\r\n          \r\n          // 重置数据状态\r\n          this.colorData = this.orginColorData;\r\n          this.partialData = this.umapData;\r\n          \r\n          console.log('抽屉关闭时的选区效果已清除');\r\n        } catch (error) {\r\n          console.error('抽屉关闭时清除选区效果出错:', error);\r\n        }\r\n      }\r\n      \r\n      // 通知所有图表组件更新渲染器尺寸\r\n      if (this.datasetType === 'single' && this.$refs.singleChart) {\r\n        // 单图表模式\r\n        if (this.$refs.singleChart.handleContainerResize) {\r\n          this.$refs.singleChart.handleContainerResize();\r\n        }\r\n      } else if (this.datasetType === 'multiple' && this.$refs.multipleChart) {\r\n        // 多图表模式\r\n        if (this.$refs.multipleChart.handleContainerResize) {\r\n          this.$refs.multipleChart.handleContainerResize();\r\n        }\r\n      }\r\n      \r\n      // 如果有多个图表实例，也需要更新它们\r\n      if (this.graphNum > 1) {\r\n        // 处理多图表情况\r\n        const chartRefs = this.$refs.singleChart || this.$refs.multipleChart;\r\n        if (Array.isArray(chartRefs)) {\r\n          chartRefs.forEach(chart => {\r\n            if (chart && chart.handleContainerResize) {\r\n              chart.handleContainerResize();\r\n            }\r\n          });\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * 清除选区效果并恢复图形原状\r\n     */\r\n    clearSelectionAndRestore() {\r\n      console.log('清除选区效果并恢复图形原状');\r\n      \r\n      try {\r\n        // 1. 重置操作模式为平移模式\r\n        this.setOperateActive(1);\r\n        \r\n        // 2. 清除选中的节点数据\r\n        this.setSelectNodes([]);\r\n        this.selectInfo = {};\r\n        \r\n        // 3. 通知图表组件清除选区\r\n        const chartComponent = this.datasetType === 'single' \r\n          ? this.$refs.singleChart \r\n          : this.$refs.multipleChart;\r\n        \r\n        if (chartComponent) {\r\n          // 清除选区状态\r\n          if (typeof chartComponent.clearSelection === 'function') {\r\n            chartComponent.clearSelection();\r\n          }\r\n          \r\n          // 切换回平移模式\r\n          if (typeof chartComponent.setMode === 'function') {\r\n            chartComponent.setMode('pan');\r\n          }\r\n          \r\n          // 如果是ScatterBrainSingle，还需要清除渲染器的选区状态\r\n          if (this.datasetType === 'single' && chartComponent.renderer) {\r\n            if (typeof chartComponent.renderer.clearSelection === 'function') {\r\n              chartComponent.renderer.clearSelection();\r\n            }\r\n            if (typeof chartComponent.renderer.setMode === 'function') {\r\n              chartComponent.renderer.setMode('pan');\r\n            }\r\n          }\r\n        }\r\n        \r\n        // 4. 重置数据状态\r\n        this.colorData = this.orginColorData;\r\n        this.partialData = this.umapData;\r\n        \r\n        console.log('选区效果已清除，图形已恢复原状');\r\n      } catch (error) {\r\n        console.error('清除选区效果时出错:', error);\r\n      }\r\n    },\r\n    /**\r\n     * 处理关闭抽屉事件\r\n     * 关闭抽屉时同时清除选区效果\r\n     */\r\n    handleCloseDrawer() {\r\n      console.log('点击关闭按钮，关闭Selected Cells抽屉');\r\n      \r\n      try {\r\n        // 先清除选区效果，确保选区框立即消失\r\n        this.clearSelectionAndRestore();\r\n        \r\n        // 然后关闭抽屉，抽屉关闭的watch也会再次清除选区（防止遗漏）\r\n        this.closeDrawer();\r\n        \r\n        console.log('抽屉关闭指令已发送，选区效果已清除');\r\n      } catch (error) {\r\n        console.error('关闭抽屉时出错:', error);\r\n      }\r\n    },\r\n    \r\n\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.v-icon__svg {\r\n  width: 1.25rem;\r\n  height: 1.25rem;\r\n  fill: #000;\r\n}\r\n.graph-icon {\r\n  width: 2.5rem;\r\n  height: 2.5rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: #eee;\r\n  }\r\n}\r\n.opearate_active {\r\n  background-color: #eee;\r\n}\r\n.color-circle {\r\n  flex-shrink: 0;\r\n  display: inline-block;\r\n  width: 2rem;\r\n  height: 2rem;\r\n  border-radius: 50%;\r\n}\r\n.drawer-title {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n}\r\n.info-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n.text-hidden {\r\n  display: inline-block;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n.select-list {\r\n  text-align: left;\r\n  border-bottom: 1px solid #eee;\r\n  padding: 10px 0;\r\n}\r\n.graph-brain {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n.single-cell-graph {\r\n    user-select: none;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SingleCellGraph.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SingleCellGraph.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./SingleCellGraph.vue?vue&type=template&id=252396a0&scoped=true\"\nimport script from \"./SingleCellGraph.vue?vue&type=script&lang=js\"\nexport * from \"./SingleCellGraph.vue?vue&type=script&lang=js\"\nimport style0 from \"./SingleCellGraph.vue?vue&type=style&index=0&id=252396a0&prod&lang=scss&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"252396a0\",\n  null\n  \n)\n\nexport default component.exports","<template>\n <div class=\"home\">\n    <!-- 侧边栏部分 -->\n    <div class=\"sidebar\" :style=\"{ width: sidebarWidth + 'px' }\">\n      <v-tabs\n        vertical\n        v-model=\"tab\"\n        class=\"sidebar-tabs\"\n      >\n        <div class=\"tab-buttons\">\n          <v-tab v-for=\"item in tabList\" :key=\"item.text\" class=\"tab-button\">\n            <v-icon>{{ item.icon }}</v-icon>\n          </v-tab>\n        </div>\n        <div class=\"sidebar-actions\">\n          <span class=\"action-icon\"><v-icon>mdi-redo</v-icon></span>\n          <span class=\"action-icon\"><v-icon>mdi-undo</v-icon></span>\n          <hr class=\"action-divider\" />\n          <span class=\"action-icon\"><v-icon>mdi-launch</v-icon></span>\n        </div>\n      </v-tabs>\n      \n      <!-- 侧边栏内容 -->\n      <v-tabs-items v-model=\"tab\" reverse class=\"sidebar-content\">\n        <v-tab-item v-for=\"item in tabList\" :key=\"item.text\">\n          <v-card color=\"basil\" flat class=\"full-height\">\n            <component\n              v-bind:is=\"item.component\"\n              @getType=\"getType\"\n              @getHover=\"getHover\"\n              @getGeneExp=\"getGeneExp\"\n              @getColorBy=\"getColorBy\"\n              @changeLayout=\"changeLayout\"\n              @currentRangeSelected=\"getRangeSelected\"\n              @panelStateChange=\"handlePanelStateChange\"\n              @dataset-changed=\"handleDatasetChanged\"\n            ></component>\n          </v-card>\n        </v-tab-item>\n      </v-tabs-items>\n      \n      <!-- 拖拽调整宽度的分隔条 -->\n      <div class=\"resize-handle\" v-if=\"!isPanelOpen\" @mousedown=\"initResize\"></div>\n    </div>\n    \n    <!-- 可视化图表区域 -->\n    <div class=\"visualization-area\" :class=\"gridClass\" :key=\"flag\">\n      <SingleCellGraphVue \n        v-for=\"(item, i) in datasetList\" \n        :key=\"datasetList[i]\"\n        class=\"grid-item\"\n        :summaryData=\"summaryData\" \n        :isDelete=\"signDelete\" \n        :currentIndex=\"i\" \n        :classInfo=\"classInfo\" \n        :datasetType=\"datasetList[i]\" \n        @deleteGrap=\"deleteGrap\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport ViewManager from \"./tab/ViewManager.vue\";\nimport CellProperties from \"./tab/CellProperties.vue\";\nimport Genes from \"./tab/Genes.vue\";\nimport SingleCellGraphVue from \"./SingleCellGraph.vue\";\nimport _ from \"lodash\";\nimport { mapState, mapGetters, mapActions } from 'vuex';\nimport { nonReactiveDataMixin } from '@/utils/nonReactiveDataStore';\n\nexport default {\n  name: \"HomeView\",\n  mixins: [nonReactiveDataMixin], // 🔄 添加非响应式数据mixin\n  components: { \n    ViewManager, \n    CellProperties, \n    Genes, \n    SingleCellGraphVue\n  },\n  \n  data() {\n    return {\n      tab: 1,\n      tabList: [\n        {\n          text: \"View Manager\",\n          component: \"ViewManager\",\n          icon: \"mdi-hub\",\n        },\n        {\n          text: \"Cell Properties\",\n          component: \"CellProperties\",\n          icon: \"mdi-cog\",\n        },\n        {\n          text: \"Genes\",\n          component: \"Genes\",\n          icon: \"mdi-magnify\",\n        },\n      ],\n      notCellType: ['x', 'y', 'Siletti_modf_SCANVI_L1', 'Siletti_modf_SCANVI_L2', 'region', 'subregion'],\n      addCellType: ['Class'],\n      classInfo: {},\n      flag: 'a',\n      signDelete: false,\n      summaryData: {},\n      sidebarWidth: 400, // 初始侧边栏宽度（像素）\n      minSidebarWidth: 400, // 最小宽度限制\n      maxSidebarWidth: 600, // 最大宽度限制\n      initialX: 0,\n      initialWidth: 0,\n      isPanelOpen: false // 初始值设为false，表示面板未打开\n    };\n  },\n  \n  async mounted() {\n    await this.loadInitialData();\n  },\n  \n  computed: {\n    // 🔄 修改computed以使用新的getters（从nonReactiveDataStore获取大数据）\n    ...mapState('cellData', [\n      // 'cellInfoList', // 已迁移到nonReactiveDataStore\n      // 'geneExp',      // 已迁移到nonReactiveDataStore  \n      // 'fieldValue',   // 已迁移到nonReactiveDataStore\n      'typeInfo',\n      'hoverInfo',\n      'colorField',\n      'datasetList',\n      'field',\n      'total',\n      'dataRange',\n      'geneList',\n      'datasetName',\n      'geneExpRange'\n    ]),\n    ...mapGetters('cellData', [\n      'getCellInfoList',\n      'getFieldValue', \n      'getGeneExp'\n    ]),\n    ...mapGetters('uiState', [\n      'getGridClass'\n    ]),\n    \n    // 使用getters获取大数据（自动从nonReactiveDataStore获取）\n    cellInfoList() {\n      return this.getCellInfoList;\n    },\n    fieldValue() {\n      return this.getFieldValue;\n    },\n    geneExp() {\n      return this.getGeneExp;\n    },\n    \n    gridClass() {\n      return this.getGridClass || '';\n    }\n  },\n  \n  watch: {\n    datasetList: {\n      async handler(val) {\n        if (val.includes('multiple')) {\n          await this.loadDatasetSummary();\n        }\n      }\n    }\n  },\n  \n  methods: {\n    ...mapActions('cellData', [\n      'loadFieldsInfo',\n      'loadCellTypeValues',\n      'setTypeInfo',\n      'setHoverInfo',\n      'setColorField',\n      'loadGeneList'\n    ]),\n    ...mapActions('uiState', [\n      'updateGridClass',\n      'setCurrentRangeSelected'\n    ]),\n    /**\n     * 加载初始数据\n     */\n    async loadInitialData() {\n      try {\n        // 使用Vuex action加载数据\n        await this.loadFieldsInfo();\n        \n        // 异步加载cell_type_values.json\n        await this.loadCellTypeValues();\n        \n        // 加载基因列表\n        await this.$store.dispatch('cellData/loadGeneList');\n      } catch (error) {\n        console.error('加载初始数据失败:', error);\n      }\n    },\n    \n    /**\n     * 加载数据集摘要\n     */\n    async loadDatasetSummary() {\n      try {\n        const response = await fetch('/multiple_outputs/dataset_summary.json');\n        this.summaryData = await response.json();\n      } catch (error) {\n        console.error('加载数据集摘要失败:', error);\n      }\n    },\n    \n    /**\n     * 处理类型选择\n     */\n    getType(val) {\n      console.log('🏠 HomeView.getType 被调用:', val);\n      \n      const newTypeInfo = { ...this.typeInfo };\n      \n      if (val.type === 'plain') {\n        console.log('🏠 处理普通类型选择');\n        newTypeInfo[val.data.key] = val.data.value;\n        if (!val.data.value.length) {\n          delete newTypeInfo[val.data.key];\n        }\n      } else {\n        console.log('🏠 处理树形视图选择 (Class)');\n        newTypeInfo[val.data.key] = val.data.value;\n        if (_.isEmpty(newTypeInfo[val.data.key])) {\n          delete newTypeInfo[val.data.key];\n        }\n      }\n      \n      console.log('🏠 更新后的 typeInfo:', newTypeInfo);\n      this.setTypeInfo(newTypeInfo);\n    },\n    \n    /**\n     * 处理悬停事件\n     */\n    getHover(val) {\n      let hoverInfo = {};\n      \n      if (val.mode === 'over') {\n        const key = val.type === 'treeView' \n          ? (val.data.hasOwnProperty('children') ? 'Siletti_modf_SCANVI_L1' : 'Siletti_modf_SCANVI_L2') \n          : val.data.key;\n          \n        const value = val.type === 'treeView' ? val.data.name : val.data.value;\n        \n        hoverInfo = { key, value, type: val.type };\n        if (val.type === 'treeView' && !val.data.hasOwnProperty('children')) {\n          hoverInfo['parent'] = val.data.parent;\n        }\n      }\n      \n      this.setHoverInfo(hoverInfo);\n    },\n    \n    /**\n     * 获取基因表达\n     */\n    getGeneExp(val) {\n      if (_.isEmpty(val)) {\n        this.$store.commit('cellData/SET_GENE_EXP', {});\n      } else {\n        const keys = Object.keys(val);\n        const key = keys[keys.length - 1];\n        this.$store.commit('cellData/SET_GENE_EXP', { [key]: val[key] });\n      }\n    },\n    \n    /**\n     * 更新颜色配色方案\n     */\n    getColorBy(colorBy) {\n      this.setColorField(colorBy);\n      this.$store.commit('cellData/SET_GENE_EXP_RANGE', { ...this.geneExpRange, color: false });\n    },\n    \n    /**\n     * 改变布局\n     */\n    changeLayout(val) {\n      this.$store.commit('cellData/SET_DATASET_LIST', val);\n      this.updateGridClass();\n      this.flag = new Date().getTime();\n      this.signDelete = true;\n    },\n    \n    /**\n     * 删除图表\n     */\n    deleteGrap(index) {\n      console.log(`开始删除图表，索引: ${index}`);\n      \n      try {\n        // 先清理即将删除的组件的渲染器\n        const chartComponents = this.$children.filter(child => \n          child.$options.name === 'SingleCellGraphVue'\n        );\n        \n        if (chartComponents[index] && chartComponents[index].$refs.singleChart) {\n          const chartRef = chartComponents[index].$refs.singleChart;\n          if (chartRef.renderer && typeof chartRef.renderer.dispose === 'function') {\n            console.log(`清理第${index}个图表的渲染器`);\n            chartRef.renderer.dispose();\n            chartRef.renderer = null;\n          }\n        }\n        \n        // 延迟更新数据，确保组件清理完成\n        this.$nextTick(() => {\n          setTimeout(() => {\n            const newDatasetList = [...this.datasetList];\n            newDatasetList.splice(index, 1);\n            this.$store.commit('cellData/SET_DATASET_LIST', newDatasetList);\n            this.updateGridClass();\n            this.flag = new Date().getTime();\n            this.signDelete = newDatasetList.length > 1;\n            \n            console.log(`图表删除完成，剩余图表数量: ${newDatasetList.length}`);\n          }, 100); // 延迟100ms确保DOM稳定\n        });\n      } catch (error) {\n        console.error('删除图表时出错:', error);\n        \n        // 如果出错，仍然尝试删除\n        const newDatasetList = [...this.datasetList];\n        newDatasetList.splice(index, 1);\n        this.$store.commit('cellData/SET_DATASET_LIST', newDatasetList);\n        this.updateGridClass();\n        this.flag = new Date().getTime();\n        this.signDelete = newDatasetList.length > 1;\n      }\n    },\n    \n    /**\n     * 获取选定范围\n     */\n    getRangeSelected(val) {\n      this.$store.commit('cellData/SET_GENE_EXP_RANGE', val);\n      this.setCurrentRangeSelected(val);\n    },\n    \n    /**\n     * 初始化拖拽调整宽度\n     */\n    initResize(e) {\n      e.preventDefault();\n      document.addEventListener('mousemove', this.doResize);\n      document.addEventListener('mouseup', this.stopResize);\n      // 在body上添加样式，防止选中文本\n      document.body.style.userSelect = 'none';\n      this.initialX = e.clientX;\n      this.initialWidth = this.sidebarWidth;\n    },\n    \n    /**\n     * 执行宽度调整\n     */\n    doResize(e) {\n      this.sidebarWidth = this.initialWidth + (e.clientX - this.initialX);\n      // 限制最小宽度和最大宽度\n      if (this.sidebarWidth < this.minSidebarWidth) this.sidebarWidth = this.minSidebarWidth;\n      if (this.sidebarWidth > this.maxSidebarWidth) this.sidebarWidth = this.maxSidebarWidth;\n    },\n    \n    /**\n     * 停止拖拽\n     */\n    stopResize() {\n      document.removeEventListener('mousemove', this.doResize);\n      document.removeEventListener('mouseup', this.stopResize);\n      // 恢复正常的选择行为\n      document.body.style.userSelect = '';\n    },\n    \n    handlePanelStateChange(state) {\n      this.isPanelOpen = state;\n    },\n    \n    /**\n     * 处理数据集切换事件\n     */\n    async handleDatasetChanged(event) {\n      try {\n        console.log('HomeView: 接收到数据集切换事件', event);\n        \n        // 重新加载数据以适应新数据集\n        await this.loadInitialData();\n        \n        // 强制重新渲染图表组件\n        this.flag = this.flag === 'a' ? 'b' : 'a';\n        \n        console.log('HomeView: 数据集切换处理完成');\n      } catch (error) {\n        console.error('HomeView: 处理数据集切换失败:', error);\n      }\n    }\n  },\n  \n  // 确保组件销毁时清除事件监听\n  beforeDestroy() {\n    document.removeEventListener('mousemove', this.doResize);\n    document.removeEventListener('mouseup', this.stopResize);\n  },\n};\n</script>\n\n<style scoped>\n.home {\n  display: flex;\n  height: 100vh;\n}\n\n/* 侧边栏样式 */\n.sidebar {\n  /* width: 35%; 替换为动态宽度 */\n  height: 100vh;\n  display: flex;\n  position: relative;\n}\n\n/* 拖拽手柄样式 */\n.resize-handle {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 6px;\n  height: 100%;\n  cursor: ew-resize;\n  background-color: transparent;\n  transition: background-color 0.2s;\n  z-index: 10;\n}\n\n.resize-handle:hover, .resize-handle:active {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n\n/* 禁用状态下的手柄样式 */\n.resize-handle.disabled {\n  cursor: default;\n  pointer-events: none;\n  background-color: transparent;\n}\n\n.sidebar-tabs {\n  width: 10%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  border-right: 1px solid #eee;\n}\n\n.tab-buttons {\n  width: 100%;\n}\n\n.tab-button {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 10px 0;\n}\n\n.tab-button ::v-deep .v-icon {\n  margin: 0 auto;\n}\n\n.sidebar-actions {\n  display: flex;\n  flex-direction: column;\n  padding-bottom: 10px;\n  align-items: center;\n}\n\n.action-icon {\n  cursor: pointer;\n  padding: 5px;\n  border-radius: 50%;\n  margin-bottom: 5px;\n}\n\n.action-icon:hover {\n  background-color: #f5f5f5;\n}\n\n.action-divider {\n  width: 70%;\n  margin: 5px 0;\n}\n\n.sidebar-content {\n  width: 94%;\n}\n\n.full-height {\n  height: 100vh;\n}\n\n/* 可视化区域样式 */\n.visualization-area {\n  flex: 1;\n}\n\n/* 网格布局样式 */\n.grid-2 {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 10px;\n  width: 100%;\n  height: 100vh;\n}\n\n.grid-3 {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 10px;\n  width: 100%;\n  height: 100vh;\n}\n\n.grid-4 {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  grid-gap: 10px;\n  width: 100%;\n  height: 100vh;\n}\n\n.grid-item {\n  position: relative;\n  min-height: 0;\n  overflow: hidden;\n}\n\n/* 修复tab图标对齐问题 */\n::v-deep .v-tabs-bar {\n  height: 100vh !important;\n}\n\n::v-deep .v-tabs-bar__content {\n  height: auto !important;\n  justify-content: space-between;\n  height: 100% !important;\n}\n\n::v-deep .v-tab {\n  min-width: 100% !important;\n  padding: 0 !important;\n  justify-content: center !important;\n}\n\n::v-deep .v-tabs--vertical .v-tab {\n  justify-content: center !important;\n}\n\n::v-deep .v-icon {\n  height: auto !important;\n  width: auto !important;\n  font-size: 24px !important;\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./HomeView.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./HomeView.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./HomeView.vue?vue&type=template&id=01539fd0&scoped=true\"\nimport script from \"./HomeView.vue?vue&type=script&lang=js\"\nexport * from \"./HomeView.vue?vue&type=script&lang=js\"\nimport style0 from \"./HomeView.vue?vue&type=style&index=0&id=01539fd0&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"01539fd0\",\n  null\n  \n)\n\nexport default component.exports"],"names":["GL_DEPTH_COMPONENT","GL_DEPTH_STENCIL","HALF_FLOAT_OES","gl2Extensions","extensions","module","exports","overrideContextType","callback","webgl2","this","origGetContext","HTMLCanvasElement","prototype","getContext","ignoredContextType","contextAttributes","wrapGLContext","bind","rv","gl","p","versionProperty","toLowerCase","getExtension","origGetExtension","n","apply","origTexImage","texImage2D","target","miplevel","iformat","a","typeFor6","c","d","typeFor9","f","arguments","length","ifmt","getInternalFormat","webgl","getTextureType","drawBuffersWEBGL","drawBuffers","createVertexArray","deleteVertexArray","isVertexArray","bindVertexArray","drawArraysInstanced","drawElementsInstanced","vertexAttribDivisor","format","type","DEPTH_COMPONENT24","DEPTH24_STENCIL8","RGBA","RGBA16F","RGB","RGB16F","FLOAT","RGBA32F","RGB32F","HALF_FLOAT","global","factory","require","Vue","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread2","i","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","configurable","writable","_createClass","protoProps","staticProps","obj","value","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","Array","isArray","_arrayLikeToArray","iter","Symbol","iterator","from","o","minLen","toString","call","slice","constructor","name","test","len","arr2","hasOwnProperty","DIRECTION_TYPE","FRONT","BEHIND","CALC_TYPE","INIT","FIXED","DYNAMIC","LEADING_BUFFER","Virtual","param","callUpdate","init","sizes","Map","firstRangeTotalSize","firstRangeAverageSize","fixedSizeValue","calcType","offset","direction","range","create","checkRange","keeps","start","end","padFront","padBehind","getIndexOffset","slotHeaderSize","_this","v","includes","id","size","set","Math","min","uniqueIds","values","reduce","acc","val","round","isFront","isBehind","max","updateRange","getEndByStart","handleDataSourcesChange","handleFront","handleBehind","overs","getScrollOvers","buffer","isFixedType","floor","low","middle","middleOffset","high","givenIndex","indexSize","index","get","getEstimateSize","total","getLastIndex","getPadFront","getPadBehind","getRange","theoryEnd","truelyEnd","lastIndex","estimateSize","VirtualProps","dataKey","String","Function","required","dataSources","dataComponent","Number","extraProps","topThreshold","bottomThreshold","pageMode","Boolean","rootTag","wrapTag","wrapClass","wrapStyle","itemTag","itemClass","itemClassAdd","itemStyle","headerTag","headerClass","headerStyle","footerTag","footerClass","footerStyle","itemScopedSlots","ItemProps","event","tag","horizontal","component","slotComponent","uniqueKey","scopedSlots","SlotProps","Wrapper","created","shapeKey","mounted","ResizeObserver","resizeObserver","dispatchSizeChange","observe","$el","updated","beforeDestroy","disconnect","methods","getCurrentSize","$parent","$emit","hasInitial","Item","mixins","render","h","_this$extraProps","_this$scopedSlots","attrs","role","item","scope","Slot","$slots","EVENT_TYPE","ITEM","SLOT","SLOT_TYPE","HEADER","FOOTER","VirtualList","data","watch","virtual","updateParam","getUniqueIdFromDataSources","newValue","handleSlotSizeChange","scrollToIndex","scrollToOffset","isHorizontal","directionKey","installVirtual","$on","onItemResized","header","footer","onSlotResized","activated","document","addEventListener","onScroll","passive","deactivated","removeEventListener","updatePageModeFront","destroy","getSize","getSizes","getOffset","documentElement","body","root","$refs","ceil","getClientSize","getScrollSize","scrollToBottom","shepherd","setTimeout","rect","getBoundingClientRect","defaultView","ownerDocument","offsetFront","left","pageXOffset","top","pageYOffset","reset","slotFooterSize","onRangeChanged","map","dataSource","saveSize","hasInit","evt","clientSize","scrollSize","handleScroll","emitEvent","getRenderSlots","slots","_this$range","$scopedSlots","style","concat","console","warn","_this$$slots","_this$range2","paddingStyle","padding","wrapperStyle","assign","ref","on","width","height","_vm","_c","_self","staticClass","sidebarWidth","model","tab","$$v","expression","_l","tabList","text","_v","_s","icon","getType","getHover","getGeneExp","getColorBy","changeLayout","getRangeSelected","handlePanelStateChange","handleDatasetChanged","isPanelOpen","_e","initResize","flag","class","gridClass","datasetList","summaryData","signDelete","classInfo","deleteGrap","staticRenderFns","staticStyle","isConfigLoading","_m","allVisualization","openEdit","currentDatasetInfo","title","description","cellsDisplay","colorField","openAdd","showEditClass","$event","datasetOptions","handleDatasetChange","selectedDataset","visualList","selectVisual","ticksLabels","resulution","pointSize","checkbox","filteredCell","showAddVis","changeAddDataset","newSelectDataset","newVisualList","newSelectVisual","seasons","icons","selectDataset","isDatasetLoading","datasetInfoCache","visual","computed","mapState","currentOption","find","opt","info","config","displayName","formatNumber","total_cells","metadata","estimatedCells","window","handleDatasetChangedEvent","initializeDynamicConfig","loadAllDatasetInfo","mapActions","initializeDatasetConfig","getDatasetsConfig","Error","datasets","dataset","buildVisualizationOptions","currentDataset","getDataset","defaultDataset","log","configDefault","availableDatasets","error","loadDatasetsConfig","fallbackError","supportedVisualizations","visualizations","tsne","label","umap","pca","entries","toUpperCase","newDataset","setDataset","dispatchEvent","CustomEvent","detail","getDatasetInfo","getDatasetDisplayName","loadPromises","loadDatasetInfo","option","estimated","Promise","all","datasetType","has","matrixInfoPath","buildDatasetPath","response","fetch","ok","json","status","getDatasetVisualizationOptions","vis","num","toFixed","season","changeDataset","currentDatasetOption","defaultVis","defaultVisualization","selectedVisualization","newDatasetOption","unshift","datasetName","formatFileSize","cellInfoList","_u","fn","open","getFilterNum","stopPropagation","changeByColor","currentColorBy","currentComponent","children","field","fieldValue","getCheckList","getHoverItem","nativeOn","handleAttributeMouseEnter","handleAttributeMouseLeave","getTreeSelected","handleMouseOver","handleMouseOut","backgroundColor","getColor","getColorList","color","treeSelection","hsv2rgb","s","rgb","q","t","getColorFromValue","colorIndex","baseHue","colorGroup","secondaryShift","hue","saturation","brightness","onComponentEnter","onComponentLeave","typeList","onMouseEnter","onMouseLeave","checkList","typeName","colors","classes","highlightTimeout","componentHovered","default","handler","typeIndex","indexOf","immediate","join","mode","valueIndices","checkItem","selectedItem","valueIndex","bubbles","attributeName","attributeValueIndices","clearEvent","clearHoverEvent","clearHighlightEvent","reason","clearTimeout","attributeValue","onOver","_","onLeave","typeItemIndex","clearAllHighlights","nonReactiveDataMixin","components","typeListItem","expandPanelList","items","highlightedAttribute","highlightedValue","mapGetters","getCellInfoList","getFieldValue","addGlobalEventListeners","removeGlobalEventListeners","resolve","loadDataWithRetry","actionName","maxRetries","delay","lastError","attempt","message","retryDelay","pow","typeInfo","categoryData","categorizedData","actualAttributeName","selectedItemName","isCheckHighlight","force","treeData","prefix","match","trim","parent","highlightTreeItem","clearHighlight","hoverItem","undefined","highlightAttribute","colorKey","bytes","loadCellAttribute","attrPath","statusText","arrayBuffer","byteLength","floatArray","Float32Array","handlePropertyItemMouseEnter","handlePropertyItemMouseLeave","setHoverCategory","clearHoverCategory","$store","dispatch","highlightEvent","itemName","attributeValues","checkForCheckedItems","geneList","showBatchInput","_k","keyCode","batchInput","selectGene","_b","selected","select","remove","geneSelected","clearGenes","addBatchGenes","handlePanelClick","activeGeneForRendering","handleColorIconClick","removeItem","selectedRange","formatExpression","getSelectionStats","count","percentage","getExpressionPercentage","refInFor","startSelection","updateSelection","endSelection","cancelSelection","getExpressionRange","getAxisTickValue","currentSelectedGeneInfo","generateHistogramData","bar","getBarColor","isInSelectionRange","selectionActive","currentSelectionGene","selectionStart","x","getSelectionWidth","isNaN","getSelectionRangePosition","getAverageExpression","clearSelection","histogramData","y","selectionEnd","isUpdating","geneTotal","geneData","chunkCache","selectionStats","currentOpenPanel","geneColor","geneExp","loadGeneList","loadMatrixInfo","loadSavedRanges","gene","stats","geneInfo","total_genes","genes_per_chunk","geneNames","split","validGenes","geneName","found","remainingGenes","splice","activeGeneData","selectedGeneInfo","chunksToLoad","Set","geneIndexMap","findIndex","chunkIndex","geneIndex","add","loadChunkData","nonZeroCount","maxVal","minVal","validateGeneDataDifferences","calculateSelectionStats","saveSelectedRanges","$nextTick","$forceUpdate","chunkPath","chunkData","dataView","DataView","allExps","rowLength","rowCount","row","j","getFloat32","getGeneData","exps","expressionData","nonZeroValues","bins","binWidth","fill","binStart","binEnd","binIndex","maxCount","bin","totalCounts","sum","nonEmptyBins","avg","toExponential","calculateExpressionValue","svgWidth","leftMargin","rightMargin","effectiveWidth","adjustedX","normalizedPos","preventDefault","svgElement","currentTarget","clientX","startVal","endVal","abs","improveSelectionAccuracy","geneExpressionData","scaledX","localStorage","setItem","JSON","stringify","savedRanges","getItem","savedStats","parse","minRange","maxRange","cellsInRange","totalCells","svg","getElementById","exprRange","totalRange","startRatio","endRatio","startX","endX","position","emitAllSelectionRanges","allRanges","emitCurrentSelectionRange","handleColorClicked","intensity","singleGeneData","gene1","gene2","data1","data2","sample1","sample2","areSame","stats1","getGeneStats","stats2","nonZero","b","adjustedStart","adjustedEnd","minStartDiff","Infinity","minEndDiff","startDiff","endDiff","startAdjustmentRatio","endAdjustmentRatio","graphNum","drawer","directives","rawName","loading","colorBy","filterNum","operateActive","changeOperator","openSelectDrawer","separateGraph","deleteSeparateGraph","downloadImage","refKey","colorData","partialData","dataRange","colorRange","quadTree","hoverCategory","nodeMap","sizeData","selectedTypes","typeClass","typeItem","typeValue","operatorType","geneExpRange","selectArea","handleCloseDrawer","selectNodes","changeCellItem","selectInfo","itemComponent","QuadNode","boundary","pointsCount","points_count","hasFile","has_file","points","nw","ne","sw","se","containsPoint","minX","minY","maxX","maxY","getArea","intersectsBounds","searchBounds","nodeMinX","nodeMinY","nodeMaxX","nodeMaxY","QuadTree","jsonData","blocksCount","total_blocks","nodeCache","cacheLimit","cacheHits","cacheMisses","totalSearches","getNodeArea","node","findNodeByPoint","cacheKey","result","_findNodeByPointInternal","firstKey","next","delete","depth","smallestNode","smallestArea","child","area","findMultiplePoints","results","point","findNodesInRange","nodes","getPerformanceStats","cacheHitRate","cacheSize","clearCache","clear","DB_NAME","DB_VERSION","STORE_NAME","openDB","reject","checkRequest","indexedDB","onsuccess","existingDb","currentVersion","version","close","targetVersion","request","onupgradeneeded","db","oldVersion","newVersion","objectStoreNames","contains","createObjectStore","autoIncrement","onerror","storeMapData","then","transaction","store","objectStore","put","oncomplete","getMapData","deleteDatabase","deleteRequest","onblocked","async","resetDatabase","clearDatasetCache","allKeys","getAllKeys","datasetKeys","startsWith","deletePromises","FpsCounter","updateInterval","frames","lastTime","performance","now","fps","update","elapsed","PerformanceTracker","marks","timings","lastRenderTime","averageRenderTime","renderCount","startMark","endMark","startTime","duration","average","timing","trackRenderTime","getTimings","getAverageRenderTime","PerformanceWatcher","thresholds","renderTime","loadTime","memoryLimit","warnings","checkRenderTime","warning","time","checkLoadTime","checkMemoryUsage","memory","usedJSHeapSize","getWarnings","clearWarnings","perfTracker","perfWatcher","fpsCounter","createDatasetCacheKey","baseKey","checkCache","cacheData","loadBinaryFile","url","cachedData","dataArray","loadCoordinatesBin","blockPath","baseCacheKey","pop","DataLoader","abortController","loadStatus","inProgress","loaded","errors","loadQuadTree","path","fetchWithRetry","handleError","loadDataBlock","loadCoordinateBlock","blockId","fileError","flatArray","flat","resetError","fieldName","progressCallback","AbortController","signal","cache","headers","contentLength","parseInt","reader","getReader","chunks","received","done","read","Uint8Array","chunk","dataBuffer","loadAllCellAttributes","fields","attributesMap","allSettled","progress","success","failures","cancelLoading","abort","getLoadStatus","options","context","timestamp","Date","toISOString","dataLoader","ScatterRenderer","container","defaultZoom","defaultOffset","antialiasing","responderActive","selectionEnabled","hoverThrottleTime","highlightSize","state","zoom","offsetX","offsetY","isPanning","isSelecting","selectionMode","selectionVisible","selectedIndices","isZooming","targetZoom","velocity","inertiaEnabled","lastMousePosition","isChunkLoading","renderPending","renderInterval","animationFrameId","viewportRatio","isDirty","selectionStartData","selectionEndData","lastHoverTime","highlightAttributeName","highlightAttributeValues","highlightFilter","isTransitioning","transitionTimer","isMouseInListArea","hoverAttributeName","hoverValueIndex","highlightByAttribute","multiAttributeHighlight","enabled","attributes","resources","canvas","regl","drawScatter","positionBuffer","geneBuffer","vertexIdBuffer","filterTexture","textureSize","colorTexture","highlightTexture","hoverTexture","geneColorTexture","textureIndex","treeMap","nodeIndices","geneExpressionRange","callbacks","onDataLoaded","onPointSelected","onPointHovered","renderFrame","throttledHoverPoint","throttle","hoverPoint","func","limit","args","initialize","createElement","appendChild","pixelRatio","devicePixelRatio","offsetWidth","offsetHeight","requiredExtensions","createREGL","alpha","antialias","preserveDrawingBuffer","onDone","err","setupEventListeners","texture","mag","wrapS","wrapT","startRenderLoop","smoothZoom","deltaY","setPanningMode","handleResize","debouncedResize","createDebouncedResize","entry","timeoutId","isProcessing","loadData","quadTreePath","treeRes","min_x","max_x","min_y","max_y","geneBufferSize","wrap","loadTreeChunks","bufferCapacity","bufferSize","usage","positionBufferCapacity","MAX_TEXTURE_SIZE","_gl","getParameter","textureCapacity","textureWidth","sqrt","textureHeight","shape","nodeIds","collectNodeIds","currentField","queue","renderedChunkCount","chunkRenderInterval","updateProgress","shift","chunkPointCount","startIndex","chunkPoints","newTotalCount","expandBuffers","subdata","updateTextureForAttribute","scheduleRender","createDrawCommand","requiredCapacity","newCapacity","newBufferSize","oldBuffer","needsDataReload","newTextureWidth","newTextureHeight","oldColorTexture","resetForNewDataset","oldDataset","cacheError","hasValidData","safeGetMapData","datasetSpecificKey","fieldIndex","attrData","attributeCache","texWidth","texHeight","startPointIndex","pointsInRow","rowData","globalPointIndex","subimage","pointCount","nodeId","textureData","currentStartX","currentStartY","pointsToUpdate","availableInRow","updateWidth","floatArrayPart","subarray","setColorAttribute","newColorIndex","loadSuccess","commandCreated","setHighlightAttribute","attributeIndex","loadHighlightAttributeData","maxValue","isHighlighted","pointValue","some","highlightValue","validAttrData","emptyData","requestAnimationFrame","hasRegl","hasPositionBuffer","hasColorTexture","hasGeneBuffer","hasGeneColorTexture","dataTotal","dataCount","vertexShader","fragmentShader","viewport","frag","vert","prop","vertexId","uniforms","transform","xRange","yRange","aspectRatio","clientWidth","clientHeight","pointDataTexture[0]","currentColorField","useAntialiasing","hasHighlight","isAttributeHighlight","hasGeneData","primitive","enable","blend","srcRGB","srcAlpha","dstRGB","dstAlpha","boundStartSelection","capture","boundUpdateSelection","boundEndSelection","boundStartPanning","startPanning","boundEndPanning","endPanning","boundHandleMouseMove","handleMouseMove","cursor","setSelectionMode","clientY","applyInertia","getMode","pan","createTransformMatrix","dispose","cancelAnimationFrame","boundHandleResize","textures","loseContext","maxTextureUnits","MAX_TEXTURE_IMAGE_UNITS","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","bindRenderbuffer","RENDERBUFFER","bindFramebuffer","FRAMEBUFFER","maxVertexAttribs","MAX_VERTEX_ATTRIBS","disableVertexAttribArray","parentNode","removeChild","gc","errorDiv","className","textContent","cssText","closeBtn","onclick","dt","dx","movementX","dy","movementY","decay","animate","scaleAmount","animateZoom","containerWidth","containerHeight","newCanvasWidth","newCanvasHeight","getMousePositionInWebGL","mouseX","mouseY","getDataCoordinates","transformMatrix","scaleFactor","normalizedX","normalizedY","dataX","dataY","getWebGLCoordinates","transformedX","transformedY","webGLCoords","dataCoords","hasSelection","selectionBox","selectedPoints","getSelectedPoints","startY","endY","attributeDataMap","nodeData","nodeIndexInfo","globalIndex","pointData","colorValue","currentFieldName","currentAttrData","attrValue","drawSelectionBox","startWebGL","endWebGL","drawMaskLayer","drawBorders","positions","src","dst","generateMaskLayerFragmentShader","lineWidth","thickLineVertices","thickLineBuffer","hideTooltip","baseThreshold","zoomAdjustment","threshold","hoveredPoint","closestDistance","localPointIndex","px","py","distX","distY","distance","showTooltip","category","savedHighlightState","tooltip","tooltipStyle","colorStr","categoryName","innerHTML","canvasRect","display","tooltipWidth","tooltipHeight","tooltipX","tooltipY","transition","opacity","shouldRender","isHoverMode","isMouseInEmptyArea","isCheckMode","effectiveHighlight","renderError","setMode","testSelection","enableSelection","drawTestBox","currentMode","statusMessage","forceDrawSelectionBox","alert","VERSION","setSelectionVisible","visible","clearAfter","centerX","centerY","downloadCanvasAsPNG","fileName","safeFileName","replace","link","download","href","toDataURL","click","URL","revokeObjectURL","setMouseInListArea","isInArea","setHoverByAttribute","isHovered","clearHoverByAttribute","loadAttributeAndHighlight","clearAttributeHighlight","setMultipleAttributeHighlight","validValueIndices","setMultiAttributeIntersectionHighlight","clearMultiAttributeHighlight","calculateIntersectionHighlight","attributeMap","attributeNames","highlightedPointsCount","matchesThisAttribute","updateGeneData","expressionRange","updateGeneColorTexture","validValues","minValue","filterRange","expressionValue","inFilterRange","normalizedValue","red","blue","green","clearGeneData","updateFilter","filterData","filterTextureData","renderer","isInitialized","highlightListener","multipleHighlightListener","multiAttributeIntersectionListener","clearHighlightListener","hoverListener","clearHoverListener","mouseEnterListAreaListener","mouseLeaveListAreaListener","currentHighlight","currentCheckedHighlight","operate","uiState","cellData","hoverVal","newMode","switchMode","newColorBy","newRange","deep","newGeneData","newTotal","initRenderer","newField","fieldLength","geneDataLength","setupHighlightListeners","removeHighlightListeners","disposeError","scatterBrain","handlePointSelected","validColorIndex","handleKeyDown","handleHighlightEvent","handleMultipleHighlightEvent","handleMultiAttributeIntersectionEvent","handleClearHighlightEvent","handleHoverEvent","handleClearHoverEvent","handleMouseEnterListArea","handleMouseLeaveListArea","eventDetail","targetAttributeName","checkedAttributeName","backupDownload","querySelector","handleContainerResize","$vuetify","breakpoint","xs","opearate_active","setOperateActive","openDrawer","visualizationType","ScatterBrainSingle","GraphControls","infoList","orginColorData","umapData","newDrawerState","oldDrawerState","handleDrawerStateChange","filterTypeData","isEmpty","filterGeneExp","hoverInfo","getHoverFilterData","types","classValue","itemValue","exitOther","classData","classPositionValue","itemPositionValue","childNode","classKey","lv2Value","lv2","commit","currentInfo","groupNodes","groupBy","selectGroupNodes","setSelectNodes","clearSelectionAndRestore","closeDrawer","chartComponent","singleChart","multipleChart","directDownload","chartRefs","chart","ViewManager","CellProperties","Genes","SingleCellGraphVue","notCellType","addCellType","minSidebarWidth","maxSidebarWidth","initialX","initialWidth","loadInitialData","getGridClass","loadDatasetSummary","loadFieldsInfo","loadCellTypeValues","newTypeInfo","setTypeInfo","setHoverInfo","setColorField","updateGridClass","getTime","chartComponents","$children","$options","chartRef","newDatasetList","setCurrentRangeSelected","e","doResize","stopResize","userSelect"],"sourceRoot":""}